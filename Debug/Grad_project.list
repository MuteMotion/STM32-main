
Grad_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08009478  08009478  00019478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b8  080098b8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c0  080098c0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080098c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001d4  08009a9c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08009a9c  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eda4  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002317  00000000  00000000  0002efeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  00031308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a75  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173f7  00000000  00000000  00032aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001078b  00000000  00000000  00049ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f816  00000000  00000000  0005a66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d14  00000000  00000000  000e9e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000eeb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009460 	.word	0x08009460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009460 	.word	0x08009460

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fc65 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f82f 	bl	800106c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
//  ultraSonic_Init();
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  motor_init(&htim4,TIM4,TIM_CHANNEL_3, GPIOB, GPIO_PIN_14, GPIOB,GPIO_PIN_15);
 800100e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <main+0x60>)
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <main+0x60>)
 8001020:	2208      	movs	r2, #8
 8001022:	4910      	ldr	r1, [pc, #64]	; (8001064 <main+0x64>)
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0x68>)
 8001026:	f003 fca3 	bl	8004970 <motor_init>
  ultraSonic_Init();
 800102a:	f003 fd6b 	bl	8004b04 <ultraSonic_Init>
  MX_USART6_UART_Init();
 800102e:	f000 f87d 	bl	800112c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
int speed=0;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
//	  	  int frontDistance 	 = ultraSonic_readDistance(TRIG_2_PORT, TRIG_2_PIN, Echo2_GPIO_Port,Echo2_Pin, &htim2);
//
//	  	  printf("Distance: %d \n\r",frontDistance);
//	  	  HAL_Delay(500);

	  motor_set_direction(1);
 8001036:	2001      	movs	r0, #1
 8001038:	f003 fd2a 	bl	8004a90 <motor_set_direction>
	  motor_set_speed(speed);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	b29b      	uxth	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fcf3 	bl	8004a2c <motor_set_speed>
//	  TIM2->CCR2=speed;
	  speed+=20;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3314      	adds	r3, #20
 800104a:	607b      	str	r3, [r7, #4]
	  HAL_Delay(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f000 fcb2 	bl	80019b8 <HAL_Delay>
	  if (speed>255){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2bff      	cmp	r3, #255	; 0xff
 8001058:	dded      	ble.n	8001036 <main+0x36>
		  speed =0;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
	  motor_set_direction(1);
 800105e:	e7ea      	b.n	8001036 <main+0x36>
 8001060:	40020400 	.word	0x40020400
 8001064:	40000800 	.word	0x40000800
 8001068:	2000032c 	.word	0x2000032c

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fdb5 	bl	8005bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b23      	ldr	r3, [pc, #140]	; (8001124 <SystemClock_Config+0xb8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <SystemClock_Config+0xb8>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <SystemClock_Config+0xb8>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <SystemClock_Config+0xbc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <SystemClock_Config+0xbc>)
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <SystemClock_Config+0xbc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d4:	2310      	movs	r3, #16
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d8:	2300      	movs	r3, #0
 80010da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 ffcf 	bl	8002084 <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010ec:	f000 f85a 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fa32 	bl	8002574 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001116:	f000 f845 	bl	80011a4 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3750      	adds	r7, #80	; 0x50
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <MX_USART6_UART_Init+0x50>)
 8001134:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USART6_UART_Init+0x4c>)
 8001164:	f002 fba0 	bl	80038a8 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800116e:	f000 f819 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001f0 	.word	0x200001f0
 800117c:	40011400 	.word	0x40011400

08001180 <__io_putchar>:
  * @param None
  * @retval None
  */

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

	  /* Place your implementation of fputc here */
	  /* e.g. write a character to the USART1 and Loop until the end of transmission */
	  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 0xFFFF);
 8001188:	1d39      	adds	r1, r7, #4
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	2201      	movs	r2, #1
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <__io_putchar+0x20>)
 8001192:	f002 fbd9 	bl	8003948 <HAL_UART_Transmit>
	  return ch;
 8001196:	687b      	ldr	r3, [r7, #4]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200001f0 	.word	0x200001f0

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b094      	sub	sp, #80	; 0x50
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a90      	ldr	r2, [pc, #576]	; (8001460 <HAL_TIM_Base_MspInit+0x260>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d135      	bne.n	800128e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
 8001226:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a8e      	ldr	r2, [pc, #568]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
 800123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
 8001242:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a87      	ldr	r2, [pc, #540]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b85      	ldr	r3, [pc, #532]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	637b      	str	r3, [r7, #52]	; 0x34
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo1_Pin;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800126c:	2301      	movs	r3, #1
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001274:	4619      	mov	r1, r3
 8001276:	487c      	ldr	r0, [pc, #496]	; (8001468 <HAL_TIM_Base_MspInit+0x268>)
 8001278:	f000 fd66 	bl	8001d48 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	201b      	movs	r0, #27
 8001282:	f000 fc98 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001286:	201b      	movs	r0, #27
 8001288:	f000 fcb1 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800128c:	e127      	b.n	80014de <HAL_TIM_Base_MspInit+0x2de>
  else if(htim_base->Instance==TIM2)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001296:	d134      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
 800129c:	4b71      	ldr	r3, [pc, #452]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	4a70      	ldr	r2, [pc, #448]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6413      	str	r3, [r2, #64]	; 0x40
 80012a8:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
 80012b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b8:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	4a69      	ldr	r2, [pc, #420]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6313      	str	r3, [r2, #48]	; 0x30
 80012c4:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = Echo2_Pin;
 80012d0:	2320      	movs	r3, #32
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012e0:	2301      	movs	r3, #1
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012e8:	4619      	mov	r1, r3
 80012ea:	485f      	ldr	r0, [pc, #380]	; (8001468 <HAL_TIM_Base_MspInit+0x268>)
 80012ec:	f000 fd2c 	bl	8001d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 fc5e 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012fa:	201c      	movs	r0, #28
 80012fc:	f000 fc77 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 8001300:	e0ed      	b.n	80014de <HAL_TIM_Base_MspInit+0x2de>
  else if(htim_base->Instance==TIM3)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a59      	ldr	r2, [pc, #356]	; (800146c <HAL_TIM_Base_MspInit+0x26c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d134      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001310:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = Echo3_Pin;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001354:	2302      	movs	r3, #2
 8001356:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo3_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135c:	4619      	mov	r1, r3
 800135e:	4842      	ldr	r0, [pc, #264]	; (8001468 <HAL_TIM_Base_MspInit+0x268>)
 8001360:	f000 fcf2 	bl	8001d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	201d      	movs	r0, #29
 800136a:	f000 fc24 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800136e:	201d      	movs	r0, #29
 8001370:	f000 fc3d 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 8001374:	e0b3      	b.n	80014de <HAL_TIM_Base_MspInit+0x2de>
  else if(htim_base->Instance==TIM4)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <HAL_TIM_Base_MspInit+0x270>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d134      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a36      	ldr	r2, [pc, #216]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Echo4_Pin;
 80013b8:	2340      	movs	r3, #64	; 0x40
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c8:	2302      	movs	r3, #2
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo4_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4828      	ldr	r0, [pc, #160]	; (8001474 <HAL_TIM_Base_MspInit+0x274>)
 80013d4:	f000 fcb8 	bl	8001d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	201e      	movs	r0, #30
 80013de:	f000 fbea 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013e2:	201e      	movs	r0, #30
 80013e4:	f000 fc03 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 80013e8:	e079      	b.n	80014de <HAL_TIM_Base_MspInit+0x2de>
  else if(htim_base->Instance==TIM5)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <HAL_TIM_Base_MspInit+0x278>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d143      	bne.n	800147c <HAL_TIM_Base_MspInit+0x27c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_TIM_Base_MspInit+0x264>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Echo5_Pin;
 800142c:	2301      	movs	r3, #1
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800143c:	2302      	movs	r3, #2
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo5_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001444:	4619      	mov	r1, r3
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <HAL_TIM_Base_MspInit+0x268>)
 8001448:	f000 fc7e 	bl	8001d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2032      	movs	r0, #50	; 0x32
 8001452:	f000 fbb0 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001456:	2032      	movs	r0, #50	; 0x32
 8001458:	f000 fbc9 	bl	8001bee <HAL_NVIC_EnableIRQ>
}
 800145c:	e03f      	b.n	80014de <HAL_TIM_Base_MspInit+0x2de>
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40000400 	.word	0x40000400
 8001470:	40000800 	.word	0x40000800
 8001474:	40020400 	.word	0x40020400
 8001478:	40000c00 	.word	0x40000c00
  else if(htim_base->Instance==TIM9)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_TIM_Base_MspInit+0x2e8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12b      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2de>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_TIM_Base_MspInit+0x2ec>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Echo6_Pin;
 80014be:	2304      	movs	r3, #4
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014ce:	2303      	movs	r3, #3
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(Echo6_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80014da:	f000 fc35 	bl	8001d48 <HAL_GPIO_Init>
}
 80014de:	bf00      	nop
 80014e0:	3750      	adds	r7, #80	; 0x50
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40014000 	.word	0x40014000
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d11e      	bne.n	8001554 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_TIM_MspPostInit+0x68>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001532:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001536:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001544:	2301      	movs	r3, #1
 8001546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <HAL_TIM_MspPostInit+0x6c>)
 8001550:	f000 fbfa 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_UART_MspInit+0x94>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d134      	bne.n	80015f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_UART_MspInit+0x98>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_UART_MspInit+0x98>)
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_UART_MspInit+0x98>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_UART_MspInit+0x98>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_UART_MspInit+0x98>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_UART_MspInit+0x98>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015d0:	2308      	movs	r3, #8
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <HAL_UART_MspInit+0x9c>)
 80015dc:	f000 fbb4 	bl	8001d48 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2047      	movs	r0, #71	; 0x47
 80015e6:	f000 fae6 	bl	8001bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015ea:	2047      	movs	r0, #71	; 0x47
 80015ec:	f000 faff 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40011400 	.word	0x40011400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	e7fe      	b.n	8001608 <NMI_Handler+0x4>

0800160a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <MemManage_Handler+0x4>

08001616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <UsageFault_Handler+0x4>

08001622 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001650:	f000 f992 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
//
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM1_CC_IRQHandler+0x10>)
 800165e:	f001 fb1d 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
//
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000254 	.word	0x20000254

0800166c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <TIM2_IRQHandler+0x10>)
 8001672:	f001 fb13 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//
  /* USER CODE END TIM2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000029c 	.word	0x2000029c

08001680 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
//
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM3_IRQHandler+0x10>)
 8001686:	f001 fb09 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
//
  /* USER CODE END TIM3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002e4 	.word	0x200002e4

08001694 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <TIM4_IRQHandler+0x10>)
 800169a:	f001 faff 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
//
  /* USER CODE END TIM4_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000032c 	.word	0x2000032c

080016a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
//
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <TIM5_IRQHandler+0x10>)
 80016ae:	f001 faf5 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
//
  /* USER CODE END TIM5_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000374 	.word	0x20000374

080016bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <USART6_IRQHandler+0x10>)
 80016c2:	f002 f9cd 	bl	8003a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001f0 	.word	0x200001f0

080016d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_kill>:

int _kill(int pid, int sig)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ea:	f004 fad1 	bl	8005c90 <__errno>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2216      	movs	r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_exit>:

void _exit (int status)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ffe7 	bl	80016e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001712:	e7fe      	b.n	8001712 <_exit+0x12>

08001714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	e00a      	b.n	800173c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001726:	f3af 8000 	nop.w
 800172a:	4601      	mov	r1, r0
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	60ba      	str	r2, [r7, #8]
 8001732:	b2ca      	uxtb	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf0      	blt.n	8001726 <_read+0x12>
  }

  return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e009      	b.n	8001774 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fd09 	bl	8001180 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	dbf1      	blt.n	8001760 <_write+0x12>
  }
  return len;
 800177c:	687b      	ldr	r3, [r7, #4]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <_close>:

int _close(int file)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ae:	605a      	str	r2, [r3, #4]
  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_isatty>:

int _isatty(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c6:	2301      	movs	r3, #1
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <_sbrk+0x5c>)
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <_sbrk+0x60>)
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d102      	bne.n	8001812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <_sbrk+0x64>)
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <_sbrk+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	429a      	cmp	r2, r3
 800181e:	d207      	bcs.n	8001830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001820:	f004 fa36 	bl	8005c90 <__errno>
 8001824:	4603      	mov	r3, r0
 8001826:	220c      	movs	r2, #12
 8001828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	e009      	b.n	8001844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <_sbrk+0x64>)
 8001840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20010000 	.word	0x20010000
 8001850:	00000400 	.word	0x00000400
 8001854:	20000238 	.word	0x20000238
 8001858:	20000550 	.word	0x20000550

0800185c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001884:	f7ff ffea 	bl	800185c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ae:	f004 f9f5 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff fba5 	bl	8001000 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018c4:	080098c8 	.word	0x080098c8
  ldr r2, =_sbss
 80018c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018cc:	20000550 	.word	0x20000550

080018d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_Init+0x40>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_Init+0x40>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x40>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f94f 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fc52 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f967 	bl	8001c0a <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 f92f 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	2000023c 	.word	0x2000023c

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2000023c 	.word	0x2000023c

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff3e 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff8e 	bl	8001af4 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5d 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff31 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b084      	sub	sp, #16
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff feb6 	bl	80019a0 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d008      	beq.n	8001c54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e052      	b.n	8001cfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0216 	bic.w	r2, r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d103      	bne.n	8001c84 <HAL_DMA_Abort+0x62>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d007      	beq.n	8001c94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0208 	bic.w	r2, r2, #8
 8001c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca4:	e013      	b.n	8001cce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca6:	f7ff fe7b 	bl	80019a0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d90c      	bls.n	8001cce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e015      	b.n	8001cfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e4      	bne.n	8001ca6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00c      	b.n	8001d3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2205      	movs	r2, #5
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0201 	bic.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e159      	b.n	8002018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f040 8148 	bne.w	8002012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d005      	beq.n	8001d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d130      	bne.n	8001dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a2 	beq.w	8002012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_GPIO_Init+0x2ec>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a49      	ldr	r2, [pc, #292]	; (8002038 <HAL_GPIO_Init+0x2f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x202>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_GPIO_Init+0x2f4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x1fe>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_GPIO_Init+0x2f8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x1fa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_GPIO_Init+0x2fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x1f6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x1f2>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f002 0203 	and.w	r2, r2, #3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4093      	lsls	r3, r2
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_GPIO_Init+0x2ec>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3301      	adds	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	f67f aea2 	bls.w	8001d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40013800 	.word	0x40013800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021000 	.word	0x40021000
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e267      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d075      	beq.n	800218e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020a2:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d00c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d112      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b82      	ldr	r3, [pc, #520]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d10b      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d05b      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d157      	bne.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e242      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x74>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x98>
 8002102:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6f      	ldr	r2, [pc, #444]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xb0>
 800211c:	4b69      	ldr	r3, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a65      	ldr	r2, [pc, #404]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fc30 	bl	80019a0 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fc2c 	bl	80019a0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e207      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xc0>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fc1c 	bl	80019a0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fc18 	bl	80019a0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1f3      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800219a:	4b4a      	ldr	r3, [pc, #296]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a6:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1c7      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff fbd1 	bl	80019a0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff fbcd 	bl	80019a0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1a8      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4925      	ldr	r1, [pc, #148]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x244>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7ff fbb0 	bl	80019a0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff fbac 	bl	80019a0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e187      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d036      	beq.n	80022dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff fb90 	bl	80019a0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fb8c 	bl	80019a0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e167      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x240>)
 8002298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x200>
 80022a2:	e01b      	b.n	80022dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_OscConfig+0x248>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fb79 	bl	80019a0 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	e00e      	b.n	80022d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b2:	f7ff fb75 	bl	80019a0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d907      	bls.n	80022d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e150      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	42470000 	.word	0x42470000
 80022cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d0:	4b88      	ldr	r3, [pc, #544]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ea      	bne.n	80022b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8097 	beq.w	8002418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10f      	bne.n	800231a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b77      	ldr	r3, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7ff fb35 	bl	80019a0 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff fb31 	bl	80019a0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e10c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x474>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x2ea>
 8002360:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	; 0x70
 800236c:	e01c      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b05      	cmp	r3, #5
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x30c>
 8002376:	4b5f      	ldr	r3, [pc, #380]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a5e      	ldr	r2, [pc, #376]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
 8002382:	4b5c      	ldr	r3, [pc, #368]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6713      	str	r3, [r2, #112]	; 0x70
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0x324>
 8002390:	4b58      	ldr	r3, [pc, #352]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	4a57      	ldr	r2, [pc, #348]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6713      	str	r3, [r2, #112]	; 0x70
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023a2:	f023 0304 	bic.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff faf6 	bl	80019a0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7ff faf2 	bl	80019a0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0cb      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ce:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0ee      	beq.n	80023b8 <HAL_RCC_OscConfig+0x334>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023dc:	f7ff fae0 	bl	80019a0 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7ff fadc 	bl	80019a0 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0b5      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a38      	ldr	r2, [pc, #224]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a1 	beq.w	8002564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002422:	4b34      	ldr	r3, [pc, #208]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d05c      	beq.n	80024e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d141      	bne.n	80024ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fab0 	bl	80019a0 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff faac 	bl	80019a0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e087      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	491b      	ldr	r1, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 800248e:	2201      	movs	r2, #1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002492:	f7ff fa85 	bl	80019a0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249a:	f7ff fa81 	bl	80019a0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e05c      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x416>
 80024b8:	e054      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fa6e 	bl	80019a0 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c8:	f7ff fa6a 	bl	80019a0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e045      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x444>
 80024e6:	e03d      	b.n	8002564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e038      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4ec>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d028      	beq.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d121      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d11a      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002530:	4013      	ands	r3, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	085b      	lsrs	r3, r3, #1
 8002548:	3b01      	subs	r3, #1
 800254a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d107      	bne.n	8002560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0cc      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d90c      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002596:	4b65      	ldr	r3, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d044      	beq.n	8002694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d119      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262e:	2b03      	cmp	r3, #3
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b3f      	ldr	r3, [pc, #252]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e06f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e067      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f023 0203 	bic.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4934      	ldr	r1, [pc, #208]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002664:	f7ff f99c 	bl	80019a0 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	e00a      	b.n	8002682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800266c:	f7ff f998 	bl	80019a0 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 020c 	and.w	r2, r3, #12
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	429a      	cmp	r2, r3
 8002692:	d1eb      	bne.n	800266c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d20c      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f8fc 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40023c00 	.word	0x40023c00
 8002730:	40023800 	.word	0x40023800
 8002734:	08009478 	.word	0x08009478
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002744:	b090      	sub	sp, #64	; 0x40
 8002746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	2300      	movs	r3, #0
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d00d      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x40>
 8002764:	2b08      	cmp	r3, #8
 8002766:	f200 80a1 	bhi.w	80028ac <HAL_RCC_GetSysClockFreq+0x16c>
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x34>
 800276e:	2b04      	cmp	r3, #4
 8002770:	d003      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x3a>
 8002772:	e09b      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002778:	e09b      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800277e:	e098      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002780:	4b4f      	ldr	r3, [pc, #316]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278a:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	627a      	str	r2, [r7, #36]	; 0x24
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027a8:	2100      	movs	r1, #0
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ac:	fb03 f201 	mul.w	r2, r3, r1
 80027b0:	2300      	movs	r3, #0
 80027b2:	fb00 f303 	mul.w	r3, r0, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80027ba:	fba0 1202 	umull	r1, r2, r0, r2
 80027be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c0:	460a      	mov	r2, r1
 80027c2:	62ba      	str	r2, [r7, #40]	; 0x28
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	4413      	add	r3, r2
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	2200      	movs	r2, #0
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	61fa      	str	r2, [r7, #28]
 80027d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027da:	f7fe fa5d 	bl	8000c98 <__aeabi_uldivmod>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4613      	mov	r3, r2
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e6:	e053      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e8:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	099b      	lsrs	r3, r3, #6
 80027ee:	2200      	movs	r2, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	617a      	str	r2, [r7, #20]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027fa:	f04f 0b00 	mov.w	fp, #0
 80027fe:	4652      	mov	r2, sl
 8002800:	465b      	mov	r3, fp
 8002802:	f04f 0000 	mov.w	r0, #0
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	0159      	lsls	r1, r3, #5
 800280c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002810:	0150      	lsls	r0, r2, #5
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	ebb2 080a 	subs.w	r8, r2, sl
 800281a:	eb63 090b 	sbc.w	r9, r3, fp
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800282a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800282e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002832:	ebb2 0408 	subs.w	r4, r2, r8
 8002836:	eb63 0509 	sbc.w	r5, r3, r9
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	00eb      	lsls	r3, r5, #3
 8002844:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002848:	00e2      	lsls	r2, r4, #3
 800284a:	4614      	mov	r4, r2
 800284c:	461d      	mov	r5, r3
 800284e:	eb14 030a 	adds.w	r3, r4, sl
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	eb45 030b 	adc.w	r3, r5, fp
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002866:	4629      	mov	r1, r5
 8002868:	028b      	lsls	r3, r1, #10
 800286a:	4621      	mov	r1, r4
 800286c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002870:	4621      	mov	r1, r4
 8002872:	028a      	lsls	r2, r1, #10
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	2200      	movs	r2, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002884:	f7fe fa08 	bl	8000c98 <__aeabi_uldivmod>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4613      	mov	r3, r2
 800288e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	0c1b      	lsrs	r3, r3, #16
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	3301      	adds	r3, #1
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028aa:	e002      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3740      	adds	r7, #64	; 0x40
 80028b8:	46bd      	mov	sp, r7
 80028ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	017d7840 	.word	0x017d7840

080028cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d0:	4b03      	ldr	r3, [pc, #12]	; (80028e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000000 	.word	0x20000000

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028e8:	f7ff fff0 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	0a9b      	lsrs	r3, r3, #10
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40023800 	.word	0x40023800
 8002908:	08009488 	.word	0x08009488

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002910:	f7ff ffdc 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0b5b      	lsrs	r3, r3, #13
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4903      	ldr	r1, [pc, #12]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002928:	4618      	mov	r0, r3
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40023800 	.word	0x40023800
 8002930:	08009488 	.word	0x08009488

08002934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e041      	b.n	80029ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fc50 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fc3e 	bl	80031f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d001      	beq.n	80029ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e03c      	b.n	8002a66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <HAL_TIM_Base_Start+0xa0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d018      	beq.n	8002a30 <HAL_TIM_Base_Start+0x5c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d013      	beq.n	8002a30 <HAL_TIM_Base_Start+0x5c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <HAL_TIM_Base_Start+0xa4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00e      	beq.n	8002a30 <HAL_TIM_Base_Start+0x5c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_TIM_Base_Start+0xa8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_TIM_Base_Start+0x5c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_TIM_Base_Start+0xac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d004      	beq.n	8002a30 <HAL_TIM_Base_Start+0x5c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_TIM_Base_Start+0xb0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d010      	beq.n	8002a64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0201 	orr.w	r2, r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a52:	e007      	b.n	8002a64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800
 8002a80:	40000c00 	.word	0x40000c00
 8002a84:	40014000 	.word	0x40014000

08002a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e041      	b.n	8002b1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f839 	bl	8002b26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f000 fb94 	bl	80031f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <HAL_TIM_PWM_Start+0x24>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e022      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d109      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x3e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e015      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start+0x58>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e008      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x6a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e068      	b.n	8002c80 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x82>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bbc:	e013      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_PWM_Start+0x92>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	e00b      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_PWM_Start+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	e003      	b.n	8002be6 <HAL_TIM_PWM_Start+0xaa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2201      	movs	r2, #1
 8002bec:	6839      	ldr	r1, [r7, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fdb2 	bl	8003758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_TIM_PWM_Start+0x14c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_TIM_PWM_Start+0x14c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x10e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d013      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x10e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_TIM_PWM_Start+0x150>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x10e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_TIM_PWM_Start+0x154>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x10e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_TIM_PWM_Start+0x158>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_TIM_PWM_Start+0x10e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_TIM_PWM_Start+0x15c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d111      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b06      	cmp	r3, #6
 8002c5a:	d010      	beq.n	8002c7e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	e007      	b.n	8002c7e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40014000 	.word	0x40014000

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d020      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01b      	beq.n	8002d00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa65 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa57 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa68 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d020      	beq.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01b      	beq.n	8002d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0204 	mvn.w	r2, #4
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa3f 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002d38:	e005      	b.n	8002d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa31 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa42 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d020      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01b      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0208 	mvn.w	r2, #8
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa19 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa0b 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa1c 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d020      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01b      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0210 	mvn.w	r2, #16
 8002db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2208      	movs	r2, #8
 8002dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f9f3 	bl	80031b6 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9e5 	bl	80031a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9f6 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0201 	mvn.w	r2, #1
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9c3 	bl	800318e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00c      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fd34 	bl	8003894 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9c7 	bl	80031de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0220 	mvn.w	r2, #32
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fd06 	bl	8003880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e0ae      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b0c      	cmp	r3, #12
 8002ea6:	f200 809f 	bhi.w	8002fe8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002fe9 	.word	0x08002fe9
 8002eb8:	08002fe9 	.word	0x08002fe9
 8002ebc:	08002fe9 	.word	0x08002fe9
 8002ec0:	08002f25 	.word	0x08002f25
 8002ec4:	08002fe9 	.word	0x08002fe9
 8002ec8:	08002fe9 	.word	0x08002fe9
 8002ecc:	08002fe9 	.word	0x08002fe9
 8002ed0:	08002f67 	.word	0x08002f67
 8002ed4:	08002fe9 	.word	0x08002fe9
 8002ed8:	08002fe9 	.word	0x08002fe9
 8002edc:	08002fe9 	.word	0x08002fe9
 8002ee0:	08002fa7 	.word	0x08002fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fa0e 	bl	800330c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0208 	orr.w	r2, r2, #8
 8002efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6999      	ldr	r1, [r3, #24]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	619a      	str	r2, [r3, #24]
      break;
 8002f22:	e064      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fa54 	bl	80033d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6999      	ldr	r1, [r3, #24]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	021a      	lsls	r2, r3, #8
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	619a      	str	r2, [r3, #24]
      break;
 8002f64:	e043      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fa9f 	bl	80034b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0208 	orr.w	r2, r2, #8
 8002f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0204 	bic.w	r2, r2, #4
 8002f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69d9      	ldr	r1, [r3, #28]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	61da      	str	r2, [r3, #28]
      break;
 8002fa4:	e023      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fae9 	bl	8003584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69d9      	ldr	r1, [r3, #28]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	61da      	str	r2, [r3, #28]
      break;
 8002fe6:	e002      	b.n	8002fee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_TIM_ConfigClockSource+0x1c>
 8003018:	2302      	movs	r3, #2
 800301a:	e0b4      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x186>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800303a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003054:	d03e      	beq.n	80030d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305a:	f200 8087 	bhi.w	800316c <HAL_TIM_ConfigClockSource+0x16c>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	f000 8086 	beq.w	8003172 <HAL_TIM_ConfigClockSource+0x172>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306a:	d87f      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 800306c:	2b70      	cmp	r3, #112	; 0x70
 800306e:	d01a      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d87b      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d050      	beq.n	800311a <HAL_TIM_ConfigClockSource+0x11a>
 8003078:	2b60      	cmp	r3, #96	; 0x60
 800307a:	d877      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d03c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0xfa>
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d873      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d058      	beq.n	800313a <HAL_TIM_ConfigClockSource+0x13a>
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d86f      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d064      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x15a>
 8003090:	2b30      	cmp	r3, #48	; 0x30
 8003092:	d86b      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d060      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x15a>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d867      	bhi.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05c      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d05a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	e062      	b.n	800316c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b6:	f000 fb2f 	bl	8003718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	609a      	str	r2, [r3, #8]
      break;
 80030d2:	e04f      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e4:	f000 fb18 	bl	8003718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f6:	609a      	str	r2, [r3, #8]
      break;
 80030f8:	e03c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003106:	461a      	mov	r2, r3
 8003108:	f000 fa8c 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2150      	movs	r1, #80	; 0x50
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fae5 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003118:	e02c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003126:	461a      	mov	r2, r3
 8003128:	f000 faab 	bl	8003682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2160      	movs	r1, #96	; 0x60
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fad5 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003138:	e01c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003146:	461a      	mov	r2, r3
 8003148:	f000 fa6c 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2140      	movs	r1, #64	; 0x40
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fac5 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003158:	e00c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 fabc 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 800316a:	e003      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      break;
 8003170:	e000      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3a      	ldr	r2, [pc, #232]	; (80032f0 <TIM_Base_SetConfig+0xfc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <TIM_Base_SetConfig+0x100>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <TIM_Base_SetConfig+0x104>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0x38>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a35      	ldr	r2, [pc, #212]	; (80032fc <TIM_Base_SetConfig+0x108>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <TIM_Base_SetConfig+0xfc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d01b      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324c:	d017      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <TIM_Base_SetConfig+0x100>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <TIM_Base_SetConfig+0x104>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00f      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <TIM_Base_SetConfig+0x108>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00b      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a25      	ldr	r2, [pc, #148]	; (8003300 <TIM_Base_SetConfig+0x10c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <TIM_Base_SetConfig+0x110>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d003      	beq.n	800327e <TIM_Base_SetConfig+0x8a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a23      	ldr	r2, [pc, #140]	; (8003308 <TIM_Base_SetConfig+0x114>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d108      	bne.n	8003290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a0e      	ldr	r2, [pc, #56]	; (80032f0 <TIM_Base_SetConfig+0xfc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d105      	bne.n	80032e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	611a      	str	r2, [r3, #16]
  }
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400
 8003308:	40014800 	.word	0x40014800

0800330c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0201 	bic.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10c      	bne.n	8003382 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0308 	bic.w	r3, r3, #8
 800336e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <TIM_OC1_SetConfig+0xc8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40010000 	.word	0x40010000

080033d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0210 	bic.w	r2, r3, #16
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <TIM_OC2_SetConfig+0xd4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10d      	bne.n	8003454 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800343e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <TIM_OC2_SetConfig+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d113      	bne.n	8003484 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	621a      	str	r2, [r3, #32]
}
 800349e:	bf00      	nop
 80034a0:	371c      	adds	r7, #28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40010000 	.word	0x40010000

080034b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0303 	bic.w	r3, r3, #3
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <TIM_OC3_SetConfig+0xd0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10d      	bne.n	800352a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a14      	ldr	r2, [pc, #80]	; (8003580 <TIM_OC3_SetConfig+0xd0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d113      	bne.n	800355a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40010000 	.word	0x40010000

08003584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <TIM_OC4_SetConfig+0x9c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d109      	bne.n	80035f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0210 	bic.w	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2201      	movs	r2, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e050      	b.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d013      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a15      	ldr	r2, [pc, #84]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10c      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	4313      	orrs	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40010000 	.word	0x40010000
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800
 8003878:	40000c00 	.word	0x40000c00
 800387c:	40014000 	.word	0x40014000

08003880 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e042      	b.n	8003940 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fe48 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2224      	movs	r2, #36	; 0x24
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fd69 	bl	80043c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695a      	ldr	r2, [r3, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b20      	cmp	r3, #32
 8003966:	d175      	bne.n	8003a54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_UART_Transmit+0x2c>
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e06e      	b.n	8003a56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2221      	movs	r2, #33	; 0x21
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003986:	f7fe f80b 	bl	80019a0 <HAL_GetTick>
 800398a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d108      	bne.n	80039b4 <HAL_UART_Transmit+0x6c>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	e003      	b.n	80039bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039bc:	e02e      	b.n	8003a1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fb05 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e03a      	b.n	8003a56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e007      	b.n	8003a0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1cb      	bne.n	80039be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2140      	movs	r1, #64	; 0x40
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fad1 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e006      	b.n	8003a56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b0ba      	sub	sp, #232	; 0xe8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x66>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fbc2 	bl	8004248 <UART_Receive_IT>
      return;
 8003ac4:	e25b      	b.n	8003f7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80de 	beq.w	8003c8c <HAL_UART_IRQHandler+0x22c>
 8003ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80d1 	beq.w	8003c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_UART_IRQHandler+0xae>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xd2>
 8003b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f043 0202 	orr.w	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xf6>
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f043 0204 	orr.w	r2, r3, #4
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d011      	beq.n	8003b86 <HAL_UART_IRQHandler+0x126>
 8003b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f043 0208 	orr.w	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 81f2 	beq.w	8003f74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_UART_IRQHandler+0x14e>
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fb4d 	bl	8004248 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_UART_IRQHandler+0x17a>
 8003bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04f      	beq.n	8003c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa55 	bl	800408a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d141      	bne.n	8003c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3314      	adds	r3, #20
 8003bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3314      	adds	r3, #20
 8003c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1d9      	bne.n	8003bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d013      	beq.n	8003c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	4a7e      	ldr	r2, [pc, #504]	; (8003e40 <HAL_UART_IRQHandler+0x3e0>)
 8003c48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe f857 	bl	8001d02 <HAL_DMA_Abort_IT>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c64:	4610      	mov	r0, r2
 8003c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	e00e      	b.n	8003c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f99e 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c70:	e00a      	b.n	8003c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f99a 	bl	8003fac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c78:	e006      	b.n	8003c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f996 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c86:	e175      	b.n	8003f74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	bf00      	nop
    return;
 8003c8a:	e173      	b.n	8003f74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 814f 	bne.w	8003f34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8148 	beq.w	8003f34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8141 	beq.w	8003f34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	f040 80b6 	bne.w	8003e44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8145 	beq.w	8003f78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	f080 813e 	bcs.w	8003f78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	f000 8088 	beq.w	8003e22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1d9      	bne.n	8003d12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3314      	adds	r3, #20
 8003d64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d70:	f023 0301 	bic.w	r3, r3, #1
 8003d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3314      	adds	r3, #20
 8003d7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e1      	bne.n	8003d5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e3      	bne.n	8003d9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e04:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e3      	bne.n	8003de0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd ff00 	bl	8001c22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f8c1 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e3e:	e09b      	b.n	8003f78 <HAL_UART_IRQHandler+0x518>
 8003e40:	08004151 	.word	0x08004151
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 808e 	beq.w	8003f7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8089 	beq.w	8003f7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	e853 3f00 	ldrex	r3, [r3]
 8003ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f0c:	61fa      	str	r2, [r7, #28]
 8003f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	69b9      	ldr	r1, [r7, #24]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	617b      	str	r3, [r7, #20]
   return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e3      	bne.n	8003ee8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f847 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f32:	e023      	b.n	8003f7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d009      	beq.n	8003f54 <HAL_UART_IRQHandler+0x4f4>
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f913 	bl	8004178 <UART_Transmit_IT>
    return;
 8003f52:	e014      	b.n	8003f7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <HAL_UART_IRQHandler+0x51e>
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f953 	bl	8004218 <UART_EndTransmit_IT>
    return;
 8003f72:	e004      	b.n	8003f7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f7c:	bf00      	nop
  }
}
 8003f7e:	37e8      	adds	r7, #232	; 0xe8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e03b      	b.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d037      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fd fcd5 	bl	80019a0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	6a3a      	ldr	r2, [r7, #32]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e03a      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0304 	and.w	r3, r3, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	d023      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d020      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d01d      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b08      	cmp	r3, #8
 8004032:	d116      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f81d 	bl	800408a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2208      	movs	r2, #8
 8004054:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00f      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b4      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b095      	sub	sp, #84	; 0x54
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b2:	643a      	str	r2, [r7, #64]	; 0x40
 80040b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d119      	bne.n	8004136 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	e853 3f00 	ldrex	r3, [r3]
 8004110:	60bb      	str	r3, [r7, #8]
   return(result);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0310 	bic.w	r3, r3, #16
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004122:	61ba      	str	r2, [r7, #24]
 8004124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6979      	ldr	r1, [r7, #20]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	613b      	str	r3, [r7, #16]
   return(result);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e5      	bne.n	8004102 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004144:	bf00      	nop
 8004146:	3754      	adds	r7, #84	; 0x54
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff1e 	bl	8003fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b21      	cmp	r3, #33	; 0x21
 800418a:	d13e      	bne.n	800420a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d114      	bne.n	80041c0 <UART_Transmit_IT+0x48>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]
 80041be:	e008      	b.n	80041d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6211      	str	r1, [r2, #32]
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fea3 	bl	8003f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b22      	cmp	r3, #34	; 0x22
 800425a:	f040 80ae 	bne.w	80043ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004266:	d117      	bne.n	8004298 <UART_Receive_IT+0x50>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d113      	bne.n	8004298 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	b29b      	uxth	r3, r3
 8004282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004286:	b29a      	uxth	r2, r3
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	1c9a      	adds	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
 8004296:	e026      	b.n	80042e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d007      	beq.n	80042bc <UART_Receive_IT+0x74>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <UART_Receive_IT+0x82>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e008      	b.n	80042dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4619      	mov	r1, r3
 80042f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d15d      	bne.n	80043b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0220 	bic.w	r2, r2, #32
 8004308:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004318:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0201 	bic.w	r2, r2, #1
 8004328:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	2b01      	cmp	r3, #1
 800433e:	d135      	bne.n	80043ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f023 0310 	bic.w	r3, r3, #16
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	623a      	str	r2, [r7, #32]
 8004368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	61bb      	str	r3, [r7, #24]
   return(result);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e5      	bne.n	8004346 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d10a      	bne.n	800439e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fe0b 	bl	8003fc0 <HAL_UARTEx_RxEventCallback>
 80043aa:	e002      	b.n	80043b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff fdf3 	bl	8003f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e002      	b.n	80043bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3730      	adds	r7, #48	; 0x30
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b0c0      	sub	sp, #256	; 0x100
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	ea40 0301 	orr.w	r3, r0, r1
 80043ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800441c:	f021 010c 	bic.w	r1, r1, #12
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800442a:	430b      	orrs	r3, r1
 800442c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	6999      	ldr	r1, [r3, #24]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	ea40 0301 	orr.w	r3, r0, r1
 800444a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4b8f      	ldr	r3, [pc, #572]	; (8004690 <UART_SetConfig+0x2cc>)
 8004454:	429a      	cmp	r2, r3
 8004456:	d005      	beq.n	8004464 <UART_SetConfig+0xa0>
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <UART_SetConfig+0x2d0>)
 8004460:	429a      	cmp	r2, r3
 8004462:	d104      	bne.n	800446e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004464:	f7fe fa52 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8004468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800446c:	e003      	b.n	8004476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446e:	f7fe fa39 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004480:	f040 810c 	bne.w	800469c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800448e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004496:	4622      	mov	r2, r4
 8004498:	462b      	mov	r3, r5
 800449a:	1891      	adds	r1, r2, r2
 800449c:	65b9      	str	r1, [r7, #88]	; 0x58
 800449e:	415b      	adcs	r3, r3
 80044a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044a6:	4621      	mov	r1, r4
 80044a8:	eb12 0801 	adds.w	r8, r2, r1
 80044ac:	4629      	mov	r1, r5
 80044ae:	eb43 0901 	adc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044d4:	462b      	mov	r3, r5
 80044d6:	eb49 0303 	adc.w	r3, r9, r3
 80044da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044f2:	460b      	mov	r3, r1
 80044f4:	18db      	adds	r3, r3, r3
 80044f6:	653b      	str	r3, [r7, #80]	; 0x50
 80044f8:	4613      	mov	r3, r2
 80044fa:	eb42 0303 	adc.w	r3, r2, r3
 80044fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004508:	f7fc fbc6 	bl	8000c98 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b61      	ldr	r3, [pc, #388]	; (8004698 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	64b9      	str	r1, [r7, #72]	; 0x48
 8004534:	415b      	adcs	r3, r3
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800453c:	4641      	mov	r1, r8
 800453e:	eb12 0a01 	adds.w	sl, r2, r1
 8004542:	4649      	mov	r1, r9
 8004544:	eb43 0b01 	adc.w	fp, r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455c:	4692      	mov	sl, r2
 800455e:	469b      	mov	fp, r3
 8004560:	4643      	mov	r3, r8
 8004562:	eb1a 0303 	adds.w	r3, sl, r3
 8004566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800456a:	464b      	mov	r3, r9
 800456c:	eb4b 0303 	adc.w	r3, fp, r3
 8004570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004588:	460b      	mov	r3, r1
 800458a:	18db      	adds	r3, r3, r3
 800458c:	643b      	str	r3, [r7, #64]	; 0x40
 800458e:	4613      	mov	r3, r2
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
 8004596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800459a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800459e:	f7fc fb7b 	bl	8000c98 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <UART_SetConfig+0x2d4>)
 80045aa:	fba3 2301 	umull	r2, r3, r3, r1
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2264      	movs	r2, #100	; 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	1acb      	subs	r3, r1, r3
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045be:	4b36      	ldr	r3, [pc, #216]	; (8004698 <UART_SetConfig+0x2d4>)
 80045c0:	fba3 2302 	umull	r2, r3, r3, r2
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045cc:	441c      	add	r4, r3
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80045e8:	415b      	adcs	r3, r3
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6339      	str	r1, [r7, #48]	; 0x30
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800463c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004644:	460b      	mov	r3, r1
 8004646:	18db      	adds	r3, r3, r3
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
 800464a:	4613      	mov	r3, r2
 800464c:	eb42 0303 	adc.w	r3, r2, r3
 8004650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800465a:	f7fc fb1d 	bl	8000c98 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <UART_SetConfig+0x2d4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <UART_SetConfig+0x2d4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 0207 	and.w	r2, r3, #7
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4422      	add	r2, r4
 800468a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800468c:	e106      	b.n	800489c <UART_SetConfig+0x4d8>
 800468e:	bf00      	nop
 8004690:	40011000 	.word	0x40011000
 8004694:	40011400 	.word	0x40011400
 8004698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046ae:	4642      	mov	r2, r8
 80046b0:	464b      	mov	r3, r9
 80046b2:	1891      	adds	r1, r2, r2
 80046b4:	6239      	str	r1, [r7, #32]
 80046b6:	415b      	adcs	r3, r3
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046be:	4641      	mov	r1, r8
 80046c0:	1854      	adds	r4, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0501 	adc.w	r5, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	00eb      	lsls	r3, r5, #3
 80046d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046d6:	00e2      	lsls	r2, r4, #3
 80046d8:	4614      	mov	r4, r2
 80046da:	461d      	mov	r5, r3
 80046dc:	4643      	mov	r3, r8
 80046de:	18e3      	adds	r3, r4, r3
 80046e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046e4:	464b      	mov	r3, r9
 80046e6:	eb45 0303 	adc.w	r3, r5, r3
 80046ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800470a:	4629      	mov	r1, r5
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	4621      	mov	r1, r4
 8004710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004714:	4621      	mov	r1, r4
 8004716:	008a      	lsls	r2, r1, #2
 8004718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800471c:	f7fc fabc 	bl	8000c98 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b60      	ldr	r3, [pc, #384]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004726:	fba3 2302 	umull	r2, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	011c      	lsls	r4, r3, #4
 800472e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004732:	2200      	movs	r2, #0
 8004734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800473c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	61b9      	str	r1, [r7, #24]
 8004748:	415b      	adcs	r3, r3
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6139      	str	r1, [r7, #16]
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004784:	464b      	mov	r3, r9
 8004786:	460a      	mov	r2, r1
 8004788:	eb42 0303 	adc.w	r3, r2, r3
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	67bb      	str	r3, [r7, #120]	; 0x78
 800479a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047a8:	4649      	mov	r1, r9
 80047aa:	008b      	lsls	r3, r1, #2
 80047ac:	4641      	mov	r1, r8
 80047ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b2:	4641      	mov	r1, r8
 80047b4:	008a      	lsls	r2, r1, #2
 80047b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ba:	f7fc fa6d 	bl	8000c98 <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <UART_SetConfig+0x4e4>)
 80047c6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2264      	movs	r2, #100	; 0x64
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	1acb      	subs	r3, r1, r3
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	3332      	adds	r3, #50	; 0x32
 80047d8:	4a33      	ldr	r2, [pc, #204]	; (80048a8 <UART_SetConfig+0x4e4>)
 80047da:	fba2 2303 	umull	r2, r3, r2, r3
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e4:	441c      	add	r4, r3
 80047e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ea:	2200      	movs	r2, #0
 80047ec:	673b      	str	r3, [r7, #112]	; 0x70
 80047ee:	677a      	str	r2, [r7, #116]	; 0x74
 80047f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047f4:	4642      	mov	r2, r8
 80047f6:	464b      	mov	r3, r9
 80047f8:	1891      	adds	r1, r2, r2
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	415b      	adcs	r3, r3
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004804:	4641      	mov	r1, r8
 8004806:	1851      	adds	r1, r2, r1
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	4649      	mov	r1, r9
 800480c:	414b      	adcs	r3, r1
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800481c:	4659      	mov	r1, fp
 800481e:	00cb      	lsls	r3, r1, #3
 8004820:	4651      	mov	r1, sl
 8004822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004826:	4651      	mov	r1, sl
 8004828:	00ca      	lsls	r2, r1, #3
 800482a:	4610      	mov	r0, r2
 800482c:	4619      	mov	r1, r3
 800482e:	4603      	mov	r3, r0
 8004830:	4642      	mov	r2, r8
 8004832:	189b      	adds	r3, r3, r2
 8004834:	66bb      	str	r3, [r7, #104]	; 0x68
 8004836:	464b      	mov	r3, r9
 8004838:	460a      	mov	r2, r1
 800483a:	eb42 0303 	adc.w	r3, r2, r3
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
 800484a:	667a      	str	r2, [r7, #100]	; 0x64
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004858:	4649      	mov	r1, r9
 800485a:	008b      	lsls	r3, r1, #2
 800485c:	4641      	mov	r1, r8
 800485e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004862:	4641      	mov	r1, r8
 8004864:	008a      	lsls	r2, r1, #2
 8004866:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800486a:	f7fc fa15 	bl	8000c98 <__aeabi_uldivmod>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004874:	fba3 1302 	umull	r1, r3, r3, r2
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	2164      	movs	r1, #100	; 0x64
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	3332      	adds	r3, #50	; 0x32
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <UART_SetConfig+0x4e4>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f003 020f 	and.w	r2, r3, #15
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4422      	add	r2, r4
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048a2:	46bd      	mov	sp, r7
 80048a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a8:	51eb851f 	.word	0x51eb851f

080048ac <Init_PWM_Timer>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim9;

void Init_PWM_Timer(TIM_HandleTypeDef *htim, TIM_TypeDef *timerInstance, uint32_t Prescaler, uint32_t Period, uint32_t pwm_channel_init) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b092      	sub	sp, #72	; 0x48
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	615a      	str	r2, [r3, #20]
 80048e4:	619a      	str	r2, [r3, #24]

    htim->Instance = timerInstance; // Adjust the timer instance as per your requirement
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	601a      	str	r2, [r3, #0]
    htim->Init.Prescaler = Prescaler;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
    htim->Init.Period = Period;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(htim);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7fe f812 	bl	8002934 <HAL_TIM_Base_Init>
    HAL_TIM_PWM_Init(htim);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7fe f8b9 	bl	8002a88 <HAL_TIM_PWM_Init>
    HAL_TIM_PWM_Start(htim, pwm_channel_init);
 8004916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7fe f90f 	bl	8002b3c <HAL_TIM_PWM_Start>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800491e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8004924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004928:	4619      	mov	r1, r3
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7fe fb68 	bl	8003000 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004930:	2300      	movs	r3, #0
 8004932:	633b      	str	r3, [r7, #48]	; 0x30
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004934:	2300      	movs	r3, #0
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8004938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800493c:	4619      	mov	r1, r3
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fe ff30 	bl	80037a4 <HAL_TIMEx_MasterConfigSynchronization>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004944:	2360      	movs	r3, #96	; 0x60
 8004946:	617b      	str	r3, [r7, #20]
    sConfigOC.Pulse = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, pwm_channel_init);
 8004954:	f107 0314 	add.w	r3, r7, #20
 8004958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7fe fa8d 	bl	8002e7c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_MspPostInit(htim);
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7fc fdc6 	bl	80014f4 <HAL_TIM_MspPostInit>
}
 8004968:	bf00      	nop
 800496a:	3748      	adds	r7, #72	; 0x48
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <motor_init>:


void motor_init(TIM_HandleTypeDef *htim_pwm_init,TIM_TypeDef *timerInstance, uint32_t pwm_channel_init, GPIO_TypeDef *port_dir1_init, uint16_t pin_dir1_init, GPIO_TypeDef *port_dir2_init, uint16_t pin_dir2_init) {
 8004970:	b580      	push	{r7, lr}
 8004972:	b08c      	sub	sp, #48	; 0x30
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
    htim_pwm = htim_pwm_init;
 800497e:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <motor_init+0xa4>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6013      	str	r3, [r2, #0]
    port_dir1 = port_dir1_init;
 8004984:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <motor_init+0xa8>)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	6013      	str	r3, [r2, #0]
    pin_dir1 = pin_dir1_init;
 800498a:	4a24      	ldr	r2, [pc, #144]	; (8004a1c <motor_init+0xac>)
 800498c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800498e:	8013      	strh	r3, [r2, #0]
    port_dir2 = port_dir2_init;
 8004990:	4a23      	ldr	r2, [pc, #140]	; (8004a20 <motor_init+0xb0>)
 8004992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004994:	6013      	str	r3, [r2, #0]
    pin_dir2 = pin_dir2_init;
 8004996:	4a23      	ldr	r2, [pc, #140]	; (8004a24 <motor_init+0xb4>)
 8004998:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800499a:	8013      	strh	r3, [r2, #0]
    pwm_channel =pwm_channel_init;
 800499c:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <motor_init+0xb8>)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6013      	str	r3, [r2, #0]

    Init_PWM_Timer(htim_pwm,timerInstance, 4, 255, pwm_channel);
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <motor_init+0xa4>)
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	4b20      	ldr	r3, [pc, #128]	; (8004a28 <motor_init+0xb8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	23ff      	movs	r3, #255	; 0xff
 80049ae:	2204      	movs	r2, #4
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	f7ff ff7b 	bl	80048ac <Init_PWM_Timer>
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b6:	f107 0314 	add.w	r3, r7, #20
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	605a      	str	r2, [r3, #4]
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	611a      	str	r2, [r3, #16]
    // Configure direction control pins
	GPIO_InitStruct.Pin = pin_dir1_init | pin_dir2_init;
 80049c6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80049c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049ca:	4313      	orrs	r3, r2
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port_dir1_init, &GPIO_InitStruct);
 80049d4:	f107 0314 	add.w	r3, r7, #20
 80049d8:	4619      	mov	r1, r3
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f7fd f9b4 	bl	8001d48 <HAL_GPIO_Init>
	HAL_GPIO_Init(port_dir2_init, &GPIO_InitStruct);
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	4619      	mov	r1, r3
 80049e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049e8:	f7fd f9ae 	bl	8001d48 <HAL_GPIO_Init>



    HAL_GPIO_WritePin(port_dir1, pin_dir1, GPIO_PIN_RESET);
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <motor_init+0xa8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <motor_init+0xac>)
 80049f2:	8811      	ldrh	r1, [r2, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fb2a 	bl	8002050 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(port_dir2, pin_dir2, GPIO_PIN_RESET);
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <motor_init+0xb0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <motor_init+0xb4>)
 8004a02:	8811      	ldrh	r1, [r2, #0]
 8004a04:	2200      	movs	r2, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fd fb22 	bl	8002050 <HAL_GPIO_WritePin>
}
 8004a0c:	bf00      	nop
 8004a0e:	3728      	adds	r7, #40	; 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000240 	.word	0x20000240
 8004a18:	20000244 	.word	0x20000244
 8004a1c:	2000024c 	.word	0x2000024c
 8004a20:	20000248 	.word	0x20000248
 8004a24:	2000024e 	.word	0x2000024e
 8004a28:	20000250 	.word	0x20000250

08004a2c <motor_set_speed>:

void motor_set_speed(uint16_t speed) {
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	4603      	mov	r3, r0
 8004a34:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, speed);
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <motor_set_speed+0x5c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <motor_set_speed+0x1e>
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <motor_set_speed+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	88fa      	ldrh	r2, [r7, #6]
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM2->CCR2=speed;
}
 8004a48:	e018      	b.n	8004a7c <motor_set_speed+0x50>
    __HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, speed);
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <motor_set_speed+0x5c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d105      	bne.n	8004a5e <motor_set_speed+0x32>
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <motor_set_speed+0x60>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a5c:	e00e      	b.n	8004a7c <motor_set_speed+0x50>
    __HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, speed);
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <motor_set_speed+0x5c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d105      	bne.n	8004a72 <motor_set_speed+0x46>
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <motor_set_speed+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8004a70:	e004      	b.n	8004a7c <motor_set_speed+0x50>
    __HAL_TIM_SET_COMPARE(htim_pwm, pwm_channel, speed);
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <motor_set_speed+0x60>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	88fb      	ldrh	r3, [r7, #6]
 8004a7a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	20000250 	.word	0x20000250
 8004a8c:	20000240 	.word	0x20000240

08004a90 <motor_set_direction>:

void motor_set_direction(MotorDirection direction) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
    switch (direction) {
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <motor_set_direction+0x16>
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d011      	beq.n	8004ac8 <motor_set_direction+0x38>
        case MOTOR_DIRECTION_BACKWARD:
            HAL_GPIO_WritePin(port_dir1, pin_dir1, GPIO_PIN_SET);
            HAL_GPIO_WritePin(port_dir2, pin_dir2, GPIO_PIN_RESET);
            break;
    }
}
 8004aa4:	e021      	b.n	8004aea <motor_set_direction+0x5a>
            HAL_GPIO_WritePin(port_dir1, pin_dir1, GPIO_PIN_RESET);
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <motor_set_direction+0x64>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <motor_set_direction+0x68>)
 8004aac:	8811      	ldrh	r1, [r2, #0]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fd facd 	bl	8002050 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(port_dir2, pin_dir2, GPIO_PIN_SET);
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <motor_set_direction+0x6c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <motor_set_direction+0x70>)
 8004abc:	8811      	ldrh	r1, [r2, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fac5 	bl	8002050 <HAL_GPIO_WritePin>
            break;
 8004ac6:	e010      	b.n	8004aea <motor_set_direction+0x5a>
            HAL_GPIO_WritePin(port_dir1, pin_dir1, GPIO_PIN_SET);
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <motor_set_direction+0x64>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <motor_set_direction+0x68>)
 8004ace:	8811      	ldrh	r1, [r2, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fd fabc 	bl	8002050 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(port_dir2, pin_dir2, GPIO_PIN_RESET);
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <motor_set_direction+0x6c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <motor_set_direction+0x70>)
 8004ade:	8811      	ldrh	r1, [r2, #0]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd fab4 	bl	8002050 <HAL_GPIO_WritePin>
            break;
 8004ae8:	bf00      	nop
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000244 	.word	0x20000244
 8004af8:	2000024c 	.word	0x2000024c
 8004afc:	20000248 	.word	0x20000248
 8004b00:	2000024e 	.word	0x2000024e

08004b04 <ultraSonic_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;



void ultraSonic_Init(void){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
		Init_Timer(&htim1,TIM1);
 8004b08:	4919      	ldr	r1, [pc, #100]	; (8004b70 <ultraSonic_Init+0x6c>)
 8004b0a:	481a      	ldr	r0, [pc, #104]	; (8004b74 <ultraSonic_Init+0x70>)
 8004b0c:	f000 f84a 	bl	8004ba4 <Init_Timer>
	    Init_Timer(&htim2,TIM2);
 8004b10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b14:	4818      	ldr	r0, [pc, #96]	; (8004b78 <ultraSonic_Init+0x74>)
 8004b16:	f000 f845 	bl	8004ba4 <Init_Timer>
	    Init_Timer(&htim3,TIM3);
 8004b1a:	4918      	ldr	r1, [pc, #96]	; (8004b7c <ultraSonic_Init+0x78>)
 8004b1c:	4818      	ldr	r0, [pc, #96]	; (8004b80 <ultraSonic_Init+0x7c>)
 8004b1e:	f000 f841 	bl	8004ba4 <Init_Timer>
	    Init_Timer(&htim4,TIM4);
 8004b22:	4918      	ldr	r1, [pc, #96]	; (8004b84 <ultraSonic_Init+0x80>)
 8004b24:	4818      	ldr	r0, [pc, #96]	; (8004b88 <ultraSonic_Init+0x84>)
 8004b26:	f000 f83d 	bl	8004ba4 <Init_Timer>
	    Init_Timer(&htim5,TIM5);
 8004b2a:	4918      	ldr	r1, [pc, #96]	; (8004b8c <ultraSonic_Init+0x88>)
 8004b2c:	4818      	ldr	r0, [pc, #96]	; (8004b90 <ultraSonic_Init+0x8c>)
 8004b2e:	f000 f839 	bl	8004ba4 <Init_Timer>
	    Init_Timer(&htim9,TIM9);
 8004b32:	4918      	ldr	r1, [pc, #96]	; (8004b94 <ultraSonic_Init+0x90>)
 8004b34:	4818      	ldr	r0, [pc, #96]	; (8004b98 <ultraSonic_Init+0x94>)
 8004b36:	f000 f835 	bl	8004ba4 <Init_Timer>

	    Init_GPIO(TRIG_1_PORT, TRIG_1_PIN);
 8004b3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b3e:	4817      	ldr	r0, [pc, #92]	; (8004b9c <ultraSonic_Init+0x98>)
 8004b40:	f000 f852 	bl	8004be8 <Init_GPIO>
	    Init_GPIO(TRIG_2_PORT, TRIG_2_PIN);
 8004b44:	2110      	movs	r1, #16
 8004b46:	4815      	ldr	r0, [pc, #84]	; (8004b9c <ultraSonic_Init+0x98>)
 8004b48:	f000 f84e 	bl	8004be8 <Init_GPIO>
	    Init_GPIO(TRIG_3_PORT, TRIG_3_PIN);
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	4813      	ldr	r0, [pc, #76]	; (8004b9c <ultraSonic_Init+0x98>)
 8004b50:	f000 f84a 	bl	8004be8 <Init_GPIO>
	    Init_GPIO(TRIG_4_PORT, TRIG_4_PIN);
 8004b54:	2120      	movs	r1, #32
 8004b56:	4812      	ldr	r0, [pc, #72]	; (8004ba0 <ultraSonic_Init+0x9c>)
 8004b58:	f000 f846 	bl	8004be8 <Init_GPIO>
	    Init_GPIO(TRIG_5_PORT, TRIG_5_PIN);
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	480f      	ldr	r0, [pc, #60]	; (8004b9c <ultraSonic_Init+0x98>)
 8004b60:	f000 f842 	bl	8004be8 <Init_GPIO>
	    Init_GPIO(TRIG_6_PORT, TRIG_6_PIN);
 8004b64:	2108      	movs	r1, #8
 8004b66:	480d      	ldr	r0, [pc, #52]	; (8004b9c <ultraSonic_Init+0x98>)
 8004b68:	f000 f83e 	bl	8004be8 <Init_GPIO>
}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40010000 	.word	0x40010000
 8004b74:	20000254 	.word	0x20000254
 8004b78:	2000029c 	.word	0x2000029c
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	200002e4 	.word	0x200002e4
 8004b84:	40000800 	.word	0x40000800
 8004b88:	2000032c 	.word	0x2000032c
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	20000374 	.word	0x20000374
 8004b94:	40014000 	.word	0x40014000
 8004b98:	200003bc 	.word	0x200003bc
 8004b9c:	40020000 	.word	0x40020000
 8004ba0:	40020400 	.word	0x40020400

08004ba4 <Init_Timer>:




void Init_Timer(TIM_HandleTypeDef *htim,TIM_TypeDef *timerInstance) {
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
    htim->Instance = timerInstance; // Adjust the timer instance as per your requirement
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	601a      	str	r2, [r3, #0]
    htim->Init.Prescaler = prescaler;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]
    htim->Init.Period = period;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	22ff      	movs	r2, #255	; 0xff
 8004bc4:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd feae 	bl	8002934 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fd fefb 	bl	80029d4 <HAL_TIM_Base_Start>

}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <Init_GPIO>:


void Init_GPIO(GPIO_TypeDef *TRIG_Port, uint16_t TRIG_Pin)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08a      	sub	sp, #40	; 0x28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf4:	f107 0314 	add.w	r3, r7, #20
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]
	if (TRIG_Port == GPIOA)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <Init_GPIO+0xbc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d10e      	bne.n	8004c2a <Init_GPIO+0x42>
	{__HAL_RCC_GPIOA_CLK_ENABLE();}
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	e024      	b.n	8004c74 <Init_GPIO+0x8c>
	else if(TRIG_Port == GPIOB)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <Init_GPIO+0xc4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10e      	bne.n	8004c50 <Init_GPIO+0x68>
	{__HAL_RCC_GPIOB_CLK_ENABLE();}
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	6313      	str	r3, [r2, #48]	; 0x30
 8004c42:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	e011      	b.n	8004c74 <Init_GPIO+0x8c>
	else if (TRIG_Port == GPIOC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a17      	ldr	r2, [pc, #92]	; (8004cb0 <Init_GPIO+0xc8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10d      	bne.n	8004c74 <Init_GPIO+0x8c>
	{__HAL_RCC_GPIOC_CLK_ENABLE();}
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	6313      	str	r3, [r2, #48]	; 0x30
 8004c68:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <Init_GPIO+0xc0>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]

	HAL_GPIO_WritePin(TRIG_Port, TRIG_Pin, GPIO_PIN_RESET);
 8004c74:	887b      	ldrh	r3, [r7, #2]
 8004c76:	2200      	movs	r2, #0
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd f9e8 	bl	8002050 <HAL_GPIO_WritePin>

		  /*Configure GPIO pins */
		GPIO_InitStruct.Pin = TRIG_Pin;
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(TRIG_Port, &GPIO_InitStruct);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fd f856 	bl	8001d48 <HAL_GPIO_Init>



}
 8004c9c:	bf00      	nop
 8004c9e:	3728      	adds	r7, #40	; 0x28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40020400 	.word	0x40020400
 8004cb0:	40020800 	.word	0x40020800

08004cb4 <__cvt>:
 8004cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	ec55 4b10 	vmov	r4, r5, d0
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	460e      	mov	r6, r1
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	bfbb      	ittet	lt
 8004cc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cca:	461d      	movlt	r5, r3
 8004ccc:	2300      	movge	r3, #0
 8004cce:	232d      	movlt	r3, #45	; 0x2d
 8004cd0:	700b      	strb	r3, [r1, #0]
 8004cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cd8:	4691      	mov	r9, r2
 8004cda:	f023 0820 	bic.w	r8, r3, #32
 8004cde:	bfbc      	itt	lt
 8004ce0:	4622      	movlt	r2, r4
 8004ce2:	4614      	movlt	r4, r2
 8004ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ce8:	d005      	beq.n	8004cf6 <__cvt+0x42>
 8004cea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cee:	d100      	bne.n	8004cf2 <__cvt+0x3e>
 8004cf0:	3601      	adds	r6, #1
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	e000      	b.n	8004cf8 <__cvt+0x44>
 8004cf6:	2103      	movs	r1, #3
 8004cf8:	ab03      	add	r3, sp, #12
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	ab02      	add	r3, sp, #8
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	ec45 4b10 	vmov	d0, r4, r5
 8004d04:	4653      	mov	r3, sl
 8004d06:	4632      	mov	r2, r6
 8004d08:	f001 f87e 	bl	8005e08 <_dtoa_r>
 8004d0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d10:	4607      	mov	r7, r0
 8004d12:	d102      	bne.n	8004d1a <__cvt+0x66>
 8004d14:	f019 0f01 	tst.w	r9, #1
 8004d18:	d022      	beq.n	8004d60 <__cvt+0xac>
 8004d1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d1e:	eb07 0906 	add.w	r9, r7, r6
 8004d22:	d110      	bne.n	8004d46 <__cvt+0x92>
 8004d24:	783b      	ldrb	r3, [r7, #0]
 8004d26:	2b30      	cmp	r3, #48	; 0x30
 8004d28:	d10a      	bne.n	8004d40 <__cvt+0x8c>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	4620      	mov	r0, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	f7fb fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d36:	b918      	cbnz	r0, 8004d40 <__cvt+0x8c>
 8004d38:	f1c6 0601 	rsb	r6, r6, #1
 8004d3c:	f8ca 6000 	str.w	r6, [sl]
 8004d40:	f8da 3000 	ldr.w	r3, [sl]
 8004d44:	4499      	add	r9, r3
 8004d46:	2200      	movs	r2, #0
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	f7fb fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d52:	b108      	cbz	r0, 8004d58 <__cvt+0xa4>
 8004d54:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d58:	2230      	movs	r2, #48	; 0x30
 8004d5a:	9b03      	ldr	r3, [sp, #12]
 8004d5c:	454b      	cmp	r3, r9
 8004d5e:	d307      	bcc.n	8004d70 <__cvt+0xbc>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d64:	1bdb      	subs	r3, r3, r7
 8004d66:	4638      	mov	r0, r7
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	b004      	add	sp, #16
 8004d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	9103      	str	r1, [sp, #12]
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	e7f0      	b.n	8004d5a <__cvt+0xa6>

08004d78 <__exponent>:
 8004d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	bfb8      	it	lt
 8004d80:	4249      	neglt	r1, r1
 8004d82:	f803 2b02 	strb.w	r2, [r3], #2
 8004d86:	bfb4      	ite	lt
 8004d88:	222d      	movlt	r2, #45	; 0x2d
 8004d8a:	222b      	movge	r2, #43	; 0x2b
 8004d8c:	2909      	cmp	r1, #9
 8004d8e:	7042      	strb	r2, [r0, #1]
 8004d90:	dd2a      	ble.n	8004de8 <__exponent+0x70>
 8004d92:	f10d 0207 	add.w	r2, sp, #7
 8004d96:	4617      	mov	r7, r2
 8004d98:	260a      	movs	r6, #10
 8004d9a:	4694      	mov	ip, r2
 8004d9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004da0:	fb06 1415 	mls	r4, r6, r5, r1
 8004da4:	3430      	adds	r4, #48	; 0x30
 8004da6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004daa:	460c      	mov	r4, r1
 8004dac:	2c63      	cmp	r4, #99	; 0x63
 8004dae:	f102 32ff 	add.w	r2, r2, #4294967295
 8004db2:	4629      	mov	r1, r5
 8004db4:	dcf1      	bgt.n	8004d9a <__exponent+0x22>
 8004db6:	3130      	adds	r1, #48	; 0x30
 8004db8:	f1ac 0402 	sub.w	r4, ip, #2
 8004dbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004dc0:	1c41      	adds	r1, r0, #1
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	42ba      	cmp	r2, r7
 8004dc6:	d30a      	bcc.n	8004dde <__exponent+0x66>
 8004dc8:	f10d 0209 	add.w	r2, sp, #9
 8004dcc:	eba2 020c 	sub.w	r2, r2, ip
 8004dd0:	42bc      	cmp	r4, r7
 8004dd2:	bf88      	it	hi
 8004dd4:	2200      	movhi	r2, #0
 8004dd6:	4413      	add	r3, r2
 8004dd8:	1a18      	subs	r0, r3, r0
 8004dda:	b003      	add	sp, #12
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004de2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004de6:	e7ed      	b.n	8004dc4 <__exponent+0x4c>
 8004de8:	2330      	movs	r3, #48	; 0x30
 8004dea:	3130      	adds	r1, #48	; 0x30
 8004dec:	7083      	strb	r3, [r0, #2]
 8004dee:	70c1      	strb	r1, [r0, #3]
 8004df0:	1d03      	adds	r3, r0, #4
 8004df2:	e7f1      	b.n	8004dd8 <__exponent+0x60>

08004df4 <_printf_float>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	ed2d 8b02 	vpush	{d8}
 8004dfc:	b08d      	sub	sp, #52	; 0x34
 8004dfe:	460c      	mov	r4, r1
 8004e00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e04:	4616      	mov	r6, r2
 8004e06:	461f      	mov	r7, r3
 8004e08:	4605      	mov	r5, r0
 8004e0a:	f000 fef7 	bl	8005bfc <_localeconv_r>
 8004e0e:	f8d0 a000 	ldr.w	sl, [r0]
 8004e12:	4650      	mov	r0, sl
 8004e14:	f7fb fa34 	bl	8000280 <strlen>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	f8d8 3000 	ldr.w	r3, [r8]
 8004e24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e28:	3307      	adds	r3, #7
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	f103 0208 	add.w	r2, r3, #8
 8004e32:	f8c8 2000 	str.w	r2, [r8]
 8004e36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e3e:	9307      	str	r3, [sp, #28]
 8004e40:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e44:	ee08 0a10 	vmov	s16, r0
 8004e48:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e50:	4b9e      	ldr	r3, [pc, #632]	; (80050cc <_printf_float+0x2d8>)
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	f7fb fe71 	bl	8000b3c <__aeabi_dcmpun>
 8004e5a:	bb88      	cbnz	r0, 8004ec0 <_printf_float+0xcc>
 8004e5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e60:	4b9a      	ldr	r3, [pc, #616]	; (80050cc <_printf_float+0x2d8>)
 8004e62:	f04f 32ff 	mov.w	r2, #4294967295
 8004e66:	f7fb fe4b 	bl	8000b00 <__aeabi_dcmple>
 8004e6a:	bb48      	cbnz	r0, 8004ec0 <_printf_float+0xcc>
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2300      	movs	r3, #0
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fe3a 	bl	8000aec <__aeabi_dcmplt>
 8004e78:	b110      	cbz	r0, 8004e80 <_printf_float+0x8c>
 8004e7a:	232d      	movs	r3, #45	; 0x2d
 8004e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e80:	4a93      	ldr	r2, [pc, #588]	; (80050d0 <_printf_float+0x2dc>)
 8004e82:	4b94      	ldr	r3, [pc, #592]	; (80050d4 <_printf_float+0x2e0>)
 8004e84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e88:	bf94      	ite	ls
 8004e8a:	4690      	movls	r8, r2
 8004e8c:	4698      	movhi	r8, r3
 8004e8e:	2303      	movs	r3, #3
 8004e90:	6123      	str	r3, [r4, #16]
 8004e92:	9b05      	ldr	r3, [sp, #20]
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	f04f 0900 	mov.w	r9, #0
 8004e9e:	9700      	str	r7, [sp, #0]
 8004ea0:	4633      	mov	r3, r6
 8004ea2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 f9da 	bl	8005260 <_printf_common>
 8004eac:	3001      	adds	r0, #1
 8004eae:	f040 8090 	bne.w	8004fd2 <_printf_float+0x1de>
 8004eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb6:	b00d      	add	sp, #52	; 0x34
 8004eb8:	ecbd 8b02 	vpop	{d8}
 8004ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	4640      	mov	r0, r8
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	f7fb fe38 	bl	8000b3c <__aeabi_dcmpun>
 8004ecc:	b140      	cbz	r0, 8004ee0 <_printf_float+0xec>
 8004ece:	464b      	mov	r3, r9
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bfbc      	itt	lt
 8004ed4:	232d      	movlt	r3, #45	; 0x2d
 8004ed6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004eda:	4a7f      	ldr	r2, [pc, #508]	; (80050d8 <_printf_float+0x2e4>)
 8004edc:	4b7f      	ldr	r3, [pc, #508]	; (80050dc <_printf_float+0x2e8>)
 8004ede:	e7d1      	b.n	8004e84 <_printf_float+0x90>
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ee6:	9206      	str	r2, [sp, #24]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	d13f      	bne.n	8004f6c <_printf_float+0x178>
 8004eec:	2306      	movs	r3, #6
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	9b05      	ldr	r3, [sp, #20]
 8004ef2:	6861      	ldr	r1, [r4, #4]
 8004ef4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9303      	str	r3, [sp, #12]
 8004efc:	ab0a      	add	r3, sp, #40	; 0x28
 8004efe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f02:	ab09      	add	r3, sp, #36	; 0x24
 8004f04:	ec49 8b10 	vmov	d0, r8, r9
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f10:	4628      	mov	r0, r5
 8004f12:	f7ff fecf 	bl	8004cb4 <__cvt>
 8004f16:	9b06      	ldr	r3, [sp, #24]
 8004f18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f1a:	2b47      	cmp	r3, #71	; 0x47
 8004f1c:	4680      	mov	r8, r0
 8004f1e:	d108      	bne.n	8004f32 <_printf_float+0x13e>
 8004f20:	1cc8      	adds	r0, r1, #3
 8004f22:	db02      	blt.n	8004f2a <_printf_float+0x136>
 8004f24:	6863      	ldr	r3, [r4, #4]
 8004f26:	4299      	cmp	r1, r3
 8004f28:	dd41      	ble.n	8004fae <_printf_float+0x1ba>
 8004f2a:	f1ab 0302 	sub.w	r3, fp, #2
 8004f2e:	fa5f fb83 	uxtb.w	fp, r3
 8004f32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f36:	d820      	bhi.n	8004f7a <_printf_float+0x186>
 8004f38:	3901      	subs	r1, #1
 8004f3a:	465a      	mov	r2, fp
 8004f3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f40:	9109      	str	r1, [sp, #36]	; 0x24
 8004f42:	f7ff ff19 	bl	8004d78 <__exponent>
 8004f46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f48:	1813      	adds	r3, r2, r0
 8004f4a:	2a01      	cmp	r2, #1
 8004f4c:	4681      	mov	r9, r0
 8004f4e:	6123      	str	r3, [r4, #16]
 8004f50:	dc02      	bgt.n	8004f58 <_printf_float+0x164>
 8004f52:	6822      	ldr	r2, [r4, #0]
 8004f54:	07d2      	lsls	r2, r2, #31
 8004f56:	d501      	bpl.n	8004f5c <_printf_float+0x168>
 8004f58:	3301      	adds	r3, #1
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d09c      	beq.n	8004e9e <_printf_float+0xaa>
 8004f64:	232d      	movs	r3, #45	; 0x2d
 8004f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f6a:	e798      	b.n	8004e9e <_printf_float+0xaa>
 8004f6c:	9a06      	ldr	r2, [sp, #24]
 8004f6e:	2a47      	cmp	r2, #71	; 0x47
 8004f70:	d1be      	bne.n	8004ef0 <_printf_float+0xfc>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1bc      	bne.n	8004ef0 <_printf_float+0xfc>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e7b9      	b.n	8004eee <_printf_float+0xfa>
 8004f7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f7e:	d118      	bne.n	8004fb2 <_printf_float+0x1be>
 8004f80:	2900      	cmp	r1, #0
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	dd0b      	ble.n	8004f9e <_printf_float+0x1aa>
 8004f86:	6121      	str	r1, [r4, #16]
 8004f88:	b913      	cbnz	r3, 8004f90 <_printf_float+0x19c>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	07d0      	lsls	r0, r2, #31
 8004f8e:	d502      	bpl.n	8004f96 <_printf_float+0x1a2>
 8004f90:	3301      	adds	r3, #1
 8004f92:	440b      	add	r3, r1
 8004f94:	6123      	str	r3, [r4, #16]
 8004f96:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f98:	f04f 0900 	mov.w	r9, #0
 8004f9c:	e7de      	b.n	8004f5c <_printf_float+0x168>
 8004f9e:	b913      	cbnz	r3, 8004fa6 <_printf_float+0x1b2>
 8004fa0:	6822      	ldr	r2, [r4, #0]
 8004fa2:	07d2      	lsls	r2, r2, #31
 8004fa4:	d501      	bpl.n	8004faa <_printf_float+0x1b6>
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	e7f4      	b.n	8004f94 <_printf_float+0x1a0>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e7f2      	b.n	8004f94 <_printf_float+0x1a0>
 8004fae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	db05      	blt.n	8004fc4 <_printf_float+0x1d0>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	6121      	str	r1, [r4, #16]
 8004fbc:	07d8      	lsls	r0, r3, #31
 8004fbe:	d5ea      	bpl.n	8004f96 <_printf_float+0x1a2>
 8004fc0:	1c4b      	adds	r3, r1, #1
 8004fc2:	e7e7      	b.n	8004f94 <_printf_float+0x1a0>
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	bfd4      	ite	le
 8004fc8:	f1c1 0202 	rsble	r2, r1, #2
 8004fcc:	2201      	movgt	r2, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	e7e0      	b.n	8004f94 <_printf_float+0x1a0>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	055a      	lsls	r2, r3, #21
 8004fd6:	d407      	bmi.n	8004fe8 <_printf_float+0x1f4>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	4642      	mov	r2, r8
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d12c      	bne.n	8005040 <_printf_float+0x24c>
 8004fe6:	e764      	b.n	8004eb2 <_printf_float+0xbe>
 8004fe8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fec:	f240 80e0 	bls.w	80051b0 <_printf_float+0x3bc>
 8004ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f7fb fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d034      	beq.n	800506a <_printf_float+0x276>
 8005000:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <_printf_float+0x2ec>)
 8005002:	2301      	movs	r3, #1
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	f43f af51 	beq.w	8004eb2 <_printf_float+0xbe>
 8005010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005014:	429a      	cmp	r2, r3
 8005016:	db02      	blt.n	800501e <_printf_float+0x22a>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	07d8      	lsls	r0, r3, #31
 800501c:	d510      	bpl.n	8005040 <_printf_float+0x24c>
 800501e:	ee18 3a10 	vmov	r3, s16
 8005022:	4652      	mov	r2, sl
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f af41 	beq.w	8004eb2 <_printf_float+0xbe>
 8005030:	f04f 0800 	mov.w	r8, #0
 8005034:	f104 091a 	add.w	r9, r4, #26
 8005038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	4543      	cmp	r3, r8
 800503e:	dc09      	bgt.n	8005054 <_printf_float+0x260>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	079b      	lsls	r3, r3, #30
 8005044:	f100 8107 	bmi.w	8005256 <_printf_float+0x462>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e730      	b.n	8004eb6 <_printf_float+0xc2>
 8005054:	2301      	movs	r3, #1
 8005056:	464a      	mov	r2, r9
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f af27 	beq.w	8004eb2 <_printf_float+0xbe>
 8005064:	f108 0801 	add.w	r8, r8, #1
 8005068:	e7e6      	b.n	8005038 <_printf_float+0x244>
 800506a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	dc39      	bgt.n	80050e4 <_printf_float+0x2f0>
 8005070:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <_printf_float+0x2ec>)
 8005072:	2301      	movs	r3, #1
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	f43f af19 	beq.w	8004eb2 <_printf_float+0xbe>
 8005080:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005084:	4313      	orrs	r3, r2
 8005086:	d102      	bne.n	800508e <_printf_float+0x29a>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	07d9      	lsls	r1, r3, #31
 800508c:	d5d8      	bpl.n	8005040 <_printf_float+0x24c>
 800508e:	ee18 3a10 	vmov	r3, s16
 8005092:	4652      	mov	r2, sl
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af09 	beq.w	8004eb2 <_printf_float+0xbe>
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	f104 0a1a 	add.w	sl, r4, #26
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	425b      	negs	r3, r3
 80050ac:	454b      	cmp	r3, r9
 80050ae:	dc01      	bgt.n	80050b4 <_printf_float+0x2c0>
 80050b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b2:	e792      	b.n	8004fda <_printf_float+0x1e6>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4652      	mov	r2, sl
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f aef7 	beq.w	8004eb2 <_printf_float+0xbe>
 80050c4:	f109 0901 	add.w	r9, r9, #1
 80050c8:	e7ee      	b.n	80050a8 <_printf_float+0x2b4>
 80050ca:	bf00      	nop
 80050cc:	7fefffff 	.word	0x7fefffff
 80050d0:	08009490 	.word	0x08009490
 80050d4:	08009494 	.word	0x08009494
 80050d8:	08009498 	.word	0x08009498
 80050dc:	0800949c 	.word	0x0800949c
 80050e0:	080094a0 	.word	0x080094a0
 80050e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050e8:	429a      	cmp	r2, r3
 80050ea:	bfa8      	it	ge
 80050ec:	461a      	movge	r2, r3
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	4691      	mov	r9, r2
 80050f2:	dc37      	bgt.n	8005164 <_printf_float+0x370>
 80050f4:	f04f 0b00 	mov.w	fp, #0
 80050f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050fc:	f104 021a 	add.w	r2, r4, #26
 8005100:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005102:	9305      	str	r3, [sp, #20]
 8005104:	eba3 0309 	sub.w	r3, r3, r9
 8005108:	455b      	cmp	r3, fp
 800510a:	dc33      	bgt.n	8005174 <_printf_float+0x380>
 800510c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005110:	429a      	cmp	r2, r3
 8005112:	db3b      	blt.n	800518c <_printf_float+0x398>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	07da      	lsls	r2, r3, #31
 8005118:	d438      	bmi.n	800518c <_printf_float+0x398>
 800511a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800511e:	eba2 0903 	sub.w	r9, r2, r3
 8005122:	9b05      	ldr	r3, [sp, #20]
 8005124:	1ad2      	subs	r2, r2, r3
 8005126:	4591      	cmp	r9, r2
 8005128:	bfa8      	it	ge
 800512a:	4691      	movge	r9, r2
 800512c:	f1b9 0f00 	cmp.w	r9, #0
 8005130:	dc35      	bgt.n	800519e <_printf_float+0x3aa>
 8005132:	f04f 0800 	mov.w	r8, #0
 8005136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800513a:	f104 0a1a 	add.w	sl, r4, #26
 800513e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	eba3 0309 	sub.w	r3, r3, r9
 8005148:	4543      	cmp	r3, r8
 800514a:	f77f af79 	ble.w	8005040 <_printf_float+0x24c>
 800514e:	2301      	movs	r3, #1
 8005150:	4652      	mov	r2, sl
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f aeaa 	beq.w	8004eb2 <_printf_float+0xbe>
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	e7ec      	b.n	800513e <_printf_float+0x34a>
 8005164:	4613      	mov	r3, r2
 8005166:	4631      	mov	r1, r6
 8005168:	4642      	mov	r2, r8
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	d1c0      	bne.n	80050f4 <_printf_float+0x300>
 8005172:	e69e      	b.n	8004eb2 <_printf_float+0xbe>
 8005174:	2301      	movs	r3, #1
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	9205      	str	r2, [sp, #20]
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f ae97 	beq.w	8004eb2 <_printf_float+0xbe>
 8005184:	9a05      	ldr	r2, [sp, #20]
 8005186:	f10b 0b01 	add.w	fp, fp, #1
 800518a:	e7b9      	b.n	8005100 <_printf_float+0x30c>
 800518c:	ee18 3a10 	vmov	r3, s16
 8005190:	4652      	mov	r2, sl
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	d1be      	bne.n	800511a <_printf_float+0x326>
 800519c:	e689      	b.n	8004eb2 <_printf_float+0xbe>
 800519e:	9a05      	ldr	r2, [sp, #20]
 80051a0:	464b      	mov	r3, r9
 80051a2:	4442      	add	r2, r8
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	d1c1      	bne.n	8005132 <_printf_float+0x33e>
 80051ae:	e680      	b.n	8004eb2 <_printf_float+0xbe>
 80051b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051b2:	2a01      	cmp	r2, #1
 80051b4:	dc01      	bgt.n	80051ba <_printf_float+0x3c6>
 80051b6:	07db      	lsls	r3, r3, #31
 80051b8:	d53a      	bpl.n	8005230 <_printf_float+0x43c>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4642      	mov	r2, r8
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	47b8      	blx	r7
 80051c4:	3001      	adds	r0, #1
 80051c6:	f43f ae74 	beq.w	8004eb2 <_printf_float+0xbe>
 80051ca:	ee18 3a10 	vmov	r3, s16
 80051ce:	4652      	mov	r2, sl
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f43f ae6b 	beq.w	8004eb2 <_printf_float+0xbe>
 80051dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051e0:	2200      	movs	r2, #0
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80051e8:	f7fb fc76 	bl	8000ad8 <__aeabi_dcmpeq>
 80051ec:	b9d8      	cbnz	r0, 8005226 <_printf_float+0x432>
 80051ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80051f2:	f108 0201 	add.w	r2, r8, #1
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	d10e      	bne.n	800521e <_printf_float+0x42a>
 8005200:	e657      	b.n	8004eb2 <_printf_float+0xbe>
 8005202:	2301      	movs	r3, #1
 8005204:	4652      	mov	r2, sl
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	f43f ae50 	beq.w	8004eb2 <_printf_float+0xbe>
 8005212:	f108 0801 	add.w	r8, r8, #1
 8005216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005218:	3b01      	subs	r3, #1
 800521a:	4543      	cmp	r3, r8
 800521c:	dcf1      	bgt.n	8005202 <_printf_float+0x40e>
 800521e:	464b      	mov	r3, r9
 8005220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005224:	e6da      	b.n	8004fdc <_printf_float+0x1e8>
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	f104 0a1a 	add.w	sl, r4, #26
 800522e:	e7f2      	b.n	8005216 <_printf_float+0x422>
 8005230:	2301      	movs	r3, #1
 8005232:	4642      	mov	r2, r8
 8005234:	e7df      	b.n	80051f6 <_printf_float+0x402>
 8005236:	2301      	movs	r3, #1
 8005238:	464a      	mov	r2, r9
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae36 	beq.w	8004eb2 <_printf_float+0xbe>
 8005246:	f108 0801 	add.w	r8, r8, #1
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	4543      	cmp	r3, r8
 8005252:	dcf0      	bgt.n	8005236 <_printf_float+0x442>
 8005254:	e6f8      	b.n	8005048 <_printf_float+0x254>
 8005256:	f04f 0800 	mov.w	r8, #0
 800525a:	f104 0919 	add.w	r9, r4, #25
 800525e:	e7f4      	b.n	800524a <_printf_float+0x456>

08005260 <_printf_common>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	4699      	mov	r9, r3
 8005268:	688a      	ldr	r2, [r1, #8]
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005270:	4293      	cmp	r3, r2
 8005272:	bfb8      	it	lt
 8005274:	4613      	movlt	r3, r2
 8005276:	6033      	str	r3, [r6, #0]
 8005278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800527c:	4607      	mov	r7, r0
 800527e:	460c      	mov	r4, r1
 8005280:	b10a      	cbz	r2, 8005286 <_printf_common+0x26>
 8005282:	3301      	adds	r3, #1
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	0699      	lsls	r1, r3, #26
 800528a:	bf42      	ittt	mi
 800528c:	6833      	ldrmi	r3, [r6, #0]
 800528e:	3302      	addmi	r3, #2
 8005290:	6033      	strmi	r3, [r6, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	f015 0506 	ands.w	r5, r5, #6
 8005298:	d106      	bne.n	80052a8 <_printf_common+0x48>
 800529a:	f104 0a19 	add.w	sl, r4, #25
 800529e:	68e3      	ldr	r3, [r4, #12]
 80052a0:	6832      	ldr	r2, [r6, #0]
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc26      	bgt.n	80052f6 <_printf_common+0x96>
 80052a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052ac:	1e13      	subs	r3, r2, #0
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	0692      	lsls	r2, r2, #26
 80052b6:	d42b      	bmi.n	8005310 <_printf_common+0xb0>
 80052b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d01e      	beq.n	8005304 <_printf_common+0xa4>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	6922      	ldr	r2, [r4, #16]
 80052ca:	f003 0306 	and.w	r3, r3, #6
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	bf02      	ittt	eq
 80052d2:	68e5      	ldreq	r5, [r4, #12]
 80052d4:	6833      	ldreq	r3, [r6, #0]
 80052d6:	1aed      	subeq	r5, r5, r3
 80052d8:	68a3      	ldr	r3, [r4, #8]
 80052da:	bf0c      	ite	eq
 80052dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e0:	2500      	movne	r5, #0
 80052e2:	4293      	cmp	r3, r2
 80052e4:	bfc4      	itt	gt
 80052e6:	1a9b      	subgt	r3, r3, r2
 80052e8:	18ed      	addgt	r5, r5, r3
 80052ea:	2600      	movs	r6, #0
 80052ec:	341a      	adds	r4, #26
 80052ee:	42b5      	cmp	r5, r6
 80052f0:	d11a      	bne.n	8005328 <_printf_common+0xc8>
 80052f2:	2000      	movs	r0, #0
 80052f4:	e008      	b.n	8005308 <_printf_common+0xa8>
 80052f6:	2301      	movs	r3, #1
 80052f8:	4652      	mov	r2, sl
 80052fa:	4649      	mov	r1, r9
 80052fc:	4638      	mov	r0, r7
 80052fe:	47c0      	blx	r8
 8005300:	3001      	adds	r0, #1
 8005302:	d103      	bne.n	800530c <_printf_common+0xac>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	3501      	adds	r5, #1
 800530e:	e7c6      	b.n	800529e <_printf_common+0x3e>
 8005310:	18e1      	adds	r1, r4, r3
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	2030      	movs	r0, #48	; 0x30
 8005316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800531a:	4422      	add	r2, r4
 800531c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005324:	3302      	adds	r3, #2
 8005326:	e7c7      	b.n	80052b8 <_printf_common+0x58>
 8005328:	2301      	movs	r3, #1
 800532a:	4622      	mov	r2, r4
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d0e6      	beq.n	8005304 <_printf_common+0xa4>
 8005336:	3601      	adds	r6, #1
 8005338:	e7d9      	b.n	80052ee <_printf_common+0x8e>
	...

0800533c <_printf_i>:
 800533c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	7e0f      	ldrb	r7, [r1, #24]
 8005342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005344:	2f78      	cmp	r7, #120	; 0x78
 8005346:	4691      	mov	r9, r2
 8005348:	4680      	mov	r8, r0
 800534a:	460c      	mov	r4, r1
 800534c:	469a      	mov	sl, r3
 800534e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005352:	d807      	bhi.n	8005364 <_printf_i+0x28>
 8005354:	2f62      	cmp	r7, #98	; 0x62
 8005356:	d80a      	bhi.n	800536e <_printf_i+0x32>
 8005358:	2f00      	cmp	r7, #0
 800535a:	f000 80d4 	beq.w	8005506 <_printf_i+0x1ca>
 800535e:	2f58      	cmp	r7, #88	; 0x58
 8005360:	f000 80c0 	beq.w	80054e4 <_printf_i+0x1a8>
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800536c:	e03a      	b.n	80053e4 <_printf_i+0xa8>
 800536e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005372:	2b15      	cmp	r3, #21
 8005374:	d8f6      	bhi.n	8005364 <_printf_i+0x28>
 8005376:	a101      	add	r1, pc, #4	; (adr r1, 800537c <_printf_i+0x40>)
 8005378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053e9 	.word	0x080053e9
 8005384:	08005365 	.word	0x08005365
 8005388:	08005365 	.word	0x08005365
 800538c:	08005365 	.word	0x08005365
 8005390:	08005365 	.word	0x08005365
 8005394:	080053e9 	.word	0x080053e9
 8005398:	08005365 	.word	0x08005365
 800539c:	08005365 	.word	0x08005365
 80053a0:	08005365 	.word	0x08005365
 80053a4:	08005365 	.word	0x08005365
 80053a8:	080054ed 	.word	0x080054ed
 80053ac:	08005415 	.word	0x08005415
 80053b0:	080054a7 	.word	0x080054a7
 80053b4:	08005365 	.word	0x08005365
 80053b8:	08005365 	.word	0x08005365
 80053bc:	0800550f 	.word	0x0800550f
 80053c0:	08005365 	.word	0x08005365
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005365 	.word	0x08005365
 80053cc:	08005365 	.word	0x08005365
 80053d0:	080054af 	.word	0x080054af
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	602a      	str	r2, [r5, #0]
 80053dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e4:	2301      	movs	r3, #1
 80053e6:	e09f      	b.n	8005528 <_printf_i+0x1ec>
 80053e8:	6820      	ldr	r0, [r4, #0]
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	0607      	lsls	r7, r0, #24
 80053ee:	f103 0104 	add.w	r1, r3, #4
 80053f2:	6029      	str	r1, [r5, #0]
 80053f4:	d501      	bpl.n	80053fa <_printf_i+0xbe>
 80053f6:	681e      	ldr	r6, [r3, #0]
 80053f8:	e003      	b.n	8005402 <_printf_i+0xc6>
 80053fa:	0646      	lsls	r6, r0, #25
 80053fc:	d5fb      	bpl.n	80053f6 <_printf_i+0xba>
 80053fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005402:	2e00      	cmp	r6, #0
 8005404:	da03      	bge.n	800540e <_printf_i+0xd2>
 8005406:	232d      	movs	r3, #45	; 0x2d
 8005408:	4276      	negs	r6, r6
 800540a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540e:	485a      	ldr	r0, [pc, #360]	; (8005578 <_printf_i+0x23c>)
 8005410:	230a      	movs	r3, #10
 8005412:	e012      	b.n	800543a <_printf_i+0xfe>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	1d19      	adds	r1, r3, #4
 800541a:	6029      	str	r1, [r5, #0]
 800541c:	0605      	lsls	r5, r0, #24
 800541e:	d501      	bpl.n	8005424 <_printf_i+0xe8>
 8005420:	681e      	ldr	r6, [r3, #0]
 8005422:	e002      	b.n	800542a <_printf_i+0xee>
 8005424:	0641      	lsls	r1, r0, #25
 8005426:	d5fb      	bpl.n	8005420 <_printf_i+0xe4>
 8005428:	881e      	ldrh	r6, [r3, #0]
 800542a:	4853      	ldr	r0, [pc, #332]	; (8005578 <_printf_i+0x23c>)
 800542c:	2f6f      	cmp	r7, #111	; 0x6f
 800542e:	bf0c      	ite	eq
 8005430:	2308      	moveq	r3, #8
 8005432:	230a      	movne	r3, #10
 8005434:	2100      	movs	r1, #0
 8005436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800543a:	6865      	ldr	r5, [r4, #4]
 800543c:	60a5      	str	r5, [r4, #8]
 800543e:	2d00      	cmp	r5, #0
 8005440:	bfa2      	ittt	ge
 8005442:	6821      	ldrge	r1, [r4, #0]
 8005444:	f021 0104 	bicge.w	r1, r1, #4
 8005448:	6021      	strge	r1, [r4, #0]
 800544a:	b90e      	cbnz	r6, 8005450 <_printf_i+0x114>
 800544c:	2d00      	cmp	r5, #0
 800544e:	d04b      	beq.n	80054e8 <_printf_i+0x1ac>
 8005450:	4615      	mov	r5, r2
 8005452:	fbb6 f1f3 	udiv	r1, r6, r3
 8005456:	fb03 6711 	mls	r7, r3, r1, r6
 800545a:	5dc7      	ldrb	r7, [r0, r7]
 800545c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005460:	4637      	mov	r7, r6
 8005462:	42bb      	cmp	r3, r7
 8005464:	460e      	mov	r6, r1
 8005466:	d9f4      	bls.n	8005452 <_printf_i+0x116>
 8005468:	2b08      	cmp	r3, #8
 800546a:	d10b      	bne.n	8005484 <_printf_i+0x148>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	07de      	lsls	r6, r3, #31
 8005470:	d508      	bpl.n	8005484 <_printf_i+0x148>
 8005472:	6923      	ldr	r3, [r4, #16]
 8005474:	6861      	ldr	r1, [r4, #4]
 8005476:	4299      	cmp	r1, r3
 8005478:	bfde      	ittt	le
 800547a:	2330      	movle	r3, #48	; 0x30
 800547c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005480:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005484:	1b52      	subs	r2, r2, r5
 8005486:	6122      	str	r2, [r4, #16]
 8005488:	f8cd a000 	str.w	sl, [sp]
 800548c:	464b      	mov	r3, r9
 800548e:	aa03      	add	r2, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f7ff fee4 	bl	8005260 <_printf_common>
 8005498:	3001      	adds	r0, #1
 800549a:	d14a      	bne.n	8005532 <_printf_i+0x1f6>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b004      	add	sp, #16
 80054a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	4833      	ldr	r0, [pc, #204]	; (800557c <_printf_i+0x240>)
 80054b0:	2778      	movs	r7, #120	; 0x78
 80054b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	6829      	ldr	r1, [r5, #0]
 80054ba:	061f      	lsls	r7, r3, #24
 80054bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80054c0:	d402      	bmi.n	80054c8 <_printf_i+0x18c>
 80054c2:	065f      	lsls	r7, r3, #25
 80054c4:	bf48      	it	mi
 80054c6:	b2b6      	uxthmi	r6, r6
 80054c8:	07df      	lsls	r7, r3, #31
 80054ca:	bf48      	it	mi
 80054cc:	f043 0320 	orrmi.w	r3, r3, #32
 80054d0:	6029      	str	r1, [r5, #0]
 80054d2:	bf48      	it	mi
 80054d4:	6023      	strmi	r3, [r4, #0]
 80054d6:	b91e      	cbnz	r6, 80054e0 <_printf_i+0x1a4>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	f023 0320 	bic.w	r3, r3, #32
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	2310      	movs	r3, #16
 80054e2:	e7a7      	b.n	8005434 <_printf_i+0xf8>
 80054e4:	4824      	ldr	r0, [pc, #144]	; (8005578 <_printf_i+0x23c>)
 80054e6:	e7e4      	b.n	80054b2 <_printf_i+0x176>
 80054e8:	4615      	mov	r5, r2
 80054ea:	e7bd      	b.n	8005468 <_printf_i+0x12c>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	6826      	ldr	r6, [r4, #0]
 80054f0:	6961      	ldr	r1, [r4, #20]
 80054f2:	1d18      	adds	r0, r3, #4
 80054f4:	6028      	str	r0, [r5, #0]
 80054f6:	0635      	lsls	r5, r6, #24
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	d501      	bpl.n	8005500 <_printf_i+0x1c4>
 80054fc:	6019      	str	r1, [r3, #0]
 80054fe:	e002      	b.n	8005506 <_printf_i+0x1ca>
 8005500:	0670      	lsls	r0, r6, #25
 8005502:	d5fb      	bpl.n	80054fc <_printf_i+0x1c0>
 8005504:	8019      	strh	r1, [r3, #0]
 8005506:	2300      	movs	r3, #0
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	4615      	mov	r5, r2
 800550c:	e7bc      	b.n	8005488 <_printf_i+0x14c>
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	602a      	str	r2, [r5, #0]
 8005514:	681d      	ldr	r5, [r3, #0]
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	2100      	movs	r1, #0
 800551a:	4628      	mov	r0, r5
 800551c:	f7fa fe60 	bl	80001e0 <memchr>
 8005520:	b108      	cbz	r0, 8005526 <_printf_i+0x1ea>
 8005522:	1b40      	subs	r0, r0, r5
 8005524:	6060      	str	r0, [r4, #4]
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	2300      	movs	r3, #0
 800552c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005530:	e7aa      	b.n	8005488 <_printf_i+0x14c>
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	462a      	mov	r2, r5
 8005536:	4649      	mov	r1, r9
 8005538:	4640      	mov	r0, r8
 800553a:	47d0      	blx	sl
 800553c:	3001      	adds	r0, #1
 800553e:	d0ad      	beq.n	800549c <_printf_i+0x160>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	079b      	lsls	r3, r3, #30
 8005544:	d413      	bmi.n	800556e <_printf_i+0x232>
 8005546:	68e0      	ldr	r0, [r4, #12]
 8005548:	9b03      	ldr	r3, [sp, #12]
 800554a:	4298      	cmp	r0, r3
 800554c:	bfb8      	it	lt
 800554e:	4618      	movlt	r0, r3
 8005550:	e7a6      	b.n	80054a0 <_printf_i+0x164>
 8005552:	2301      	movs	r3, #1
 8005554:	4632      	mov	r2, r6
 8005556:	4649      	mov	r1, r9
 8005558:	4640      	mov	r0, r8
 800555a:	47d0      	blx	sl
 800555c:	3001      	adds	r0, #1
 800555e:	d09d      	beq.n	800549c <_printf_i+0x160>
 8005560:	3501      	adds	r5, #1
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	9903      	ldr	r1, [sp, #12]
 8005566:	1a5b      	subs	r3, r3, r1
 8005568:	42ab      	cmp	r3, r5
 800556a:	dcf2      	bgt.n	8005552 <_printf_i+0x216>
 800556c:	e7eb      	b.n	8005546 <_printf_i+0x20a>
 800556e:	2500      	movs	r5, #0
 8005570:	f104 0619 	add.w	r6, r4, #25
 8005574:	e7f5      	b.n	8005562 <_printf_i+0x226>
 8005576:	bf00      	nop
 8005578:	080094a2 	.word	0x080094a2
 800557c:	080094b3 	.word	0x080094b3

08005580 <_scanf_float>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b087      	sub	sp, #28
 8005586:	4617      	mov	r7, r2
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	688b      	ldr	r3, [r1, #8]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005592:	bf83      	ittte	hi
 8005594:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005598:	195b      	addhi	r3, r3, r5
 800559a:	9302      	strhi	r3, [sp, #8]
 800559c:	2300      	movls	r3, #0
 800559e:	bf86      	itte	hi
 80055a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80055a4:	608b      	strhi	r3, [r1, #8]
 80055a6:	9302      	strls	r3, [sp, #8]
 80055a8:	680b      	ldr	r3, [r1, #0]
 80055aa:	468b      	mov	fp, r1
 80055ac:	2500      	movs	r5, #0
 80055ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80055b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80055b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055ba:	4680      	mov	r8, r0
 80055bc:	460c      	mov	r4, r1
 80055be:	465e      	mov	r6, fp
 80055c0:	46aa      	mov	sl, r5
 80055c2:	46a9      	mov	r9, r5
 80055c4:	9501      	str	r5, [sp, #4]
 80055c6:	68a2      	ldr	r2, [r4, #8]
 80055c8:	b152      	cbz	r2, 80055e0 <_scanf_float+0x60>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b4e      	cmp	r3, #78	; 0x4e
 80055d0:	d864      	bhi.n	800569c <_scanf_float+0x11c>
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d83c      	bhi.n	8005650 <_scanf_float+0xd0>
 80055d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055da:	b2c8      	uxtb	r0, r1
 80055dc:	280e      	cmp	r0, #14
 80055de:	d93a      	bls.n	8005656 <_scanf_float+0xd6>
 80055e0:	f1b9 0f00 	cmp.w	r9, #0
 80055e4:	d003      	beq.n	80055ee <_scanf_float+0x6e>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055f2:	f1ba 0f01 	cmp.w	sl, #1
 80055f6:	f200 8113 	bhi.w	8005820 <_scanf_float+0x2a0>
 80055fa:	455e      	cmp	r6, fp
 80055fc:	f200 8105 	bhi.w	800580a <_scanf_float+0x28a>
 8005600:	2501      	movs	r5, #1
 8005602:	4628      	mov	r0, r5
 8005604:	b007      	add	sp, #28
 8005606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800560e:	2a0d      	cmp	r2, #13
 8005610:	d8e6      	bhi.n	80055e0 <_scanf_float+0x60>
 8005612:	a101      	add	r1, pc, #4	; (adr r1, 8005618 <_scanf_float+0x98>)
 8005614:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005618:	08005757 	.word	0x08005757
 800561c:	080055e1 	.word	0x080055e1
 8005620:	080055e1 	.word	0x080055e1
 8005624:	080055e1 	.word	0x080055e1
 8005628:	080057b7 	.word	0x080057b7
 800562c:	0800578f 	.word	0x0800578f
 8005630:	080055e1 	.word	0x080055e1
 8005634:	080055e1 	.word	0x080055e1
 8005638:	08005765 	.word	0x08005765
 800563c:	080055e1 	.word	0x080055e1
 8005640:	080055e1 	.word	0x080055e1
 8005644:	080055e1 	.word	0x080055e1
 8005648:	080055e1 	.word	0x080055e1
 800564c:	0800571d 	.word	0x0800571d
 8005650:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005654:	e7db      	b.n	800560e <_scanf_float+0x8e>
 8005656:	290e      	cmp	r1, #14
 8005658:	d8c2      	bhi.n	80055e0 <_scanf_float+0x60>
 800565a:	a001      	add	r0, pc, #4	; (adr r0, 8005660 <_scanf_float+0xe0>)
 800565c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005660:	0800570f 	.word	0x0800570f
 8005664:	080055e1 	.word	0x080055e1
 8005668:	0800570f 	.word	0x0800570f
 800566c:	080057a3 	.word	0x080057a3
 8005670:	080055e1 	.word	0x080055e1
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056f9 	.word	0x080056f9
 800567c:	080056f9 	.word	0x080056f9
 8005680:	080056f9 	.word	0x080056f9
 8005684:	080056f9 	.word	0x080056f9
 8005688:	080056f9 	.word	0x080056f9
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080056f9 	.word	0x080056f9
 8005694:	080056f9 	.word	0x080056f9
 8005698:	080056f9 	.word	0x080056f9
 800569c:	2b6e      	cmp	r3, #110	; 0x6e
 800569e:	d809      	bhi.n	80056b4 <_scanf_float+0x134>
 80056a0:	2b60      	cmp	r3, #96	; 0x60
 80056a2:	d8b2      	bhi.n	800560a <_scanf_float+0x8a>
 80056a4:	2b54      	cmp	r3, #84	; 0x54
 80056a6:	d077      	beq.n	8005798 <_scanf_float+0x218>
 80056a8:	2b59      	cmp	r3, #89	; 0x59
 80056aa:	d199      	bne.n	80055e0 <_scanf_float+0x60>
 80056ac:	2d07      	cmp	r5, #7
 80056ae:	d197      	bne.n	80055e0 <_scanf_float+0x60>
 80056b0:	2508      	movs	r5, #8
 80056b2:	e029      	b.n	8005708 <_scanf_float+0x188>
 80056b4:	2b74      	cmp	r3, #116	; 0x74
 80056b6:	d06f      	beq.n	8005798 <_scanf_float+0x218>
 80056b8:	2b79      	cmp	r3, #121	; 0x79
 80056ba:	e7f6      	b.n	80056aa <_scanf_float+0x12a>
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	05c8      	lsls	r0, r1, #23
 80056c0:	d51a      	bpl.n	80056f8 <_scanf_float+0x178>
 80056c2:	9b02      	ldr	r3, [sp, #8]
 80056c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056c8:	6021      	str	r1, [r4, #0]
 80056ca:	f109 0901 	add.w	r9, r9, #1
 80056ce:	b11b      	cbz	r3, 80056d8 <_scanf_float+0x158>
 80056d0:	3b01      	subs	r3, #1
 80056d2:	3201      	adds	r2, #1
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	60a2      	str	r2, [r4, #8]
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	3b01      	subs	r3, #1
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	3301      	adds	r3, #1
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	f340 8084 	ble.w	80057f8 <_scanf_float+0x278>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	3301      	adds	r3, #1
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	e766      	b.n	80055c6 <_scanf_float+0x46>
 80056f8:	eb1a 0f05 	cmn.w	sl, r5
 80056fc:	f47f af70 	bne.w	80055e0 <_scanf_float+0x60>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005706:	6022      	str	r2, [r4, #0]
 8005708:	f806 3b01 	strb.w	r3, [r6], #1
 800570c:	e7e4      	b.n	80056d8 <_scanf_float+0x158>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	0610      	lsls	r0, r2, #24
 8005712:	f57f af65 	bpl.w	80055e0 <_scanf_float+0x60>
 8005716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800571a:	e7f4      	b.n	8005706 <_scanf_float+0x186>
 800571c:	f1ba 0f00 	cmp.w	sl, #0
 8005720:	d10e      	bne.n	8005740 <_scanf_float+0x1c0>
 8005722:	f1b9 0f00 	cmp.w	r9, #0
 8005726:	d10e      	bne.n	8005746 <_scanf_float+0x1c6>
 8005728:	6822      	ldr	r2, [r4, #0]
 800572a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800572e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005732:	d108      	bne.n	8005746 <_scanf_float+0x1c6>
 8005734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	f04f 0a01 	mov.w	sl, #1
 800573e:	e7e3      	b.n	8005708 <_scanf_float+0x188>
 8005740:	f1ba 0f02 	cmp.w	sl, #2
 8005744:	d055      	beq.n	80057f2 <_scanf_float+0x272>
 8005746:	2d01      	cmp	r5, #1
 8005748:	d002      	beq.n	8005750 <_scanf_float+0x1d0>
 800574a:	2d04      	cmp	r5, #4
 800574c:	f47f af48 	bne.w	80055e0 <_scanf_float+0x60>
 8005750:	3501      	adds	r5, #1
 8005752:	b2ed      	uxtb	r5, r5
 8005754:	e7d8      	b.n	8005708 <_scanf_float+0x188>
 8005756:	f1ba 0f01 	cmp.w	sl, #1
 800575a:	f47f af41 	bne.w	80055e0 <_scanf_float+0x60>
 800575e:	f04f 0a02 	mov.w	sl, #2
 8005762:	e7d1      	b.n	8005708 <_scanf_float+0x188>
 8005764:	b97d      	cbnz	r5, 8005786 <_scanf_float+0x206>
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	f47f af3c 	bne.w	80055e6 <_scanf_float+0x66>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005774:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005778:	f47f af39 	bne.w	80055ee <_scanf_float+0x6e>
 800577c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	2501      	movs	r5, #1
 8005784:	e7c0      	b.n	8005708 <_scanf_float+0x188>
 8005786:	2d03      	cmp	r5, #3
 8005788:	d0e2      	beq.n	8005750 <_scanf_float+0x1d0>
 800578a:	2d05      	cmp	r5, #5
 800578c:	e7de      	b.n	800574c <_scanf_float+0x1cc>
 800578e:	2d02      	cmp	r5, #2
 8005790:	f47f af26 	bne.w	80055e0 <_scanf_float+0x60>
 8005794:	2503      	movs	r5, #3
 8005796:	e7b7      	b.n	8005708 <_scanf_float+0x188>
 8005798:	2d06      	cmp	r5, #6
 800579a:	f47f af21 	bne.w	80055e0 <_scanf_float+0x60>
 800579e:	2507      	movs	r5, #7
 80057a0:	e7b2      	b.n	8005708 <_scanf_float+0x188>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	0591      	lsls	r1, r2, #22
 80057a6:	f57f af1b 	bpl.w	80055e0 <_scanf_float+0x60>
 80057aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80057b4:	e7a8      	b.n	8005708 <_scanf_float+0x188>
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057c0:	d006      	beq.n	80057d0 <_scanf_float+0x250>
 80057c2:	0550      	lsls	r0, r2, #21
 80057c4:	f57f af0c 	bpl.w	80055e0 <_scanf_float+0x60>
 80057c8:	f1b9 0f00 	cmp.w	r9, #0
 80057cc:	f43f af0f 	beq.w	80055ee <_scanf_float+0x6e>
 80057d0:	0591      	lsls	r1, r2, #22
 80057d2:	bf58      	it	pl
 80057d4:	9901      	ldrpl	r1, [sp, #4]
 80057d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057da:	bf58      	it	pl
 80057dc:	eba9 0101 	subpl.w	r1, r9, r1
 80057e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057e4:	bf58      	it	pl
 80057e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057ea:	6022      	str	r2, [r4, #0]
 80057ec:	f04f 0900 	mov.w	r9, #0
 80057f0:	e78a      	b.n	8005708 <_scanf_float+0x188>
 80057f2:	f04f 0a03 	mov.w	sl, #3
 80057f6:	e787      	b.n	8005708 <_scanf_float+0x188>
 80057f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057fc:	4639      	mov	r1, r7
 80057fe:	4640      	mov	r0, r8
 8005800:	4798      	blx	r3
 8005802:	2800      	cmp	r0, #0
 8005804:	f43f aedf 	beq.w	80055c6 <_scanf_float+0x46>
 8005808:	e6ea      	b.n	80055e0 <_scanf_float+0x60>
 800580a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800580e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005812:	463a      	mov	r2, r7
 8005814:	4640      	mov	r0, r8
 8005816:	4798      	blx	r3
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	3b01      	subs	r3, #1
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	e6ec      	b.n	80055fa <_scanf_float+0x7a>
 8005820:	1e6b      	subs	r3, r5, #1
 8005822:	2b06      	cmp	r3, #6
 8005824:	d825      	bhi.n	8005872 <_scanf_float+0x2f2>
 8005826:	2d02      	cmp	r5, #2
 8005828:	d836      	bhi.n	8005898 <_scanf_float+0x318>
 800582a:	455e      	cmp	r6, fp
 800582c:	f67f aee8 	bls.w	8005600 <_scanf_float+0x80>
 8005830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005834:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005838:	463a      	mov	r2, r7
 800583a:	4640      	mov	r0, r8
 800583c:	4798      	blx	r3
 800583e:	6923      	ldr	r3, [r4, #16]
 8005840:	3b01      	subs	r3, #1
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	e7f1      	b.n	800582a <_scanf_float+0x2aa>
 8005846:	9802      	ldr	r0, [sp, #8]
 8005848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800584c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	463a      	mov	r2, r7
 8005854:	4640      	mov	r0, r8
 8005856:	4798      	blx	r3
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	3b01      	subs	r3, #1
 800585c:	6123      	str	r3, [r4, #16]
 800585e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005862:	fa5f fa8a 	uxtb.w	sl, sl
 8005866:	f1ba 0f02 	cmp.w	sl, #2
 800586a:	d1ec      	bne.n	8005846 <_scanf_float+0x2c6>
 800586c:	3d03      	subs	r5, #3
 800586e:	b2ed      	uxtb	r5, r5
 8005870:	1b76      	subs	r6, r6, r5
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	05da      	lsls	r2, r3, #23
 8005876:	d52f      	bpl.n	80058d8 <_scanf_float+0x358>
 8005878:	055b      	lsls	r3, r3, #21
 800587a:	d510      	bpl.n	800589e <_scanf_float+0x31e>
 800587c:	455e      	cmp	r6, fp
 800587e:	f67f aebf 	bls.w	8005600 <_scanf_float+0x80>
 8005882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800588a:	463a      	mov	r2, r7
 800588c:	4640      	mov	r0, r8
 800588e:	4798      	blx	r3
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	3b01      	subs	r3, #1
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	e7f1      	b.n	800587c <_scanf_float+0x2fc>
 8005898:	46aa      	mov	sl, r5
 800589a:	9602      	str	r6, [sp, #8]
 800589c:	e7df      	b.n	800585e <_scanf_float+0x2de>
 800589e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	2965      	cmp	r1, #101	; 0x65
 80058a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80058aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	d00c      	beq.n	80058cc <_scanf_float+0x34c>
 80058b2:	2945      	cmp	r1, #69	; 0x45
 80058b4:	d00a      	beq.n	80058cc <_scanf_float+0x34c>
 80058b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058ba:	463a      	mov	r2, r7
 80058bc:	4640      	mov	r0, r8
 80058be:	4798      	blx	r3
 80058c0:	6923      	ldr	r3, [r4, #16]
 80058c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	1eb5      	subs	r5, r6, #2
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058d0:	463a      	mov	r2, r7
 80058d2:	4640      	mov	r0, r8
 80058d4:	4798      	blx	r3
 80058d6:	462e      	mov	r6, r5
 80058d8:	6825      	ldr	r5, [r4, #0]
 80058da:	f015 0510 	ands.w	r5, r5, #16
 80058de:	d158      	bne.n	8005992 <_scanf_float+0x412>
 80058e0:	7035      	strb	r5, [r6, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ec:	d11c      	bne.n	8005928 <_scanf_float+0x3a8>
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	454b      	cmp	r3, r9
 80058f2:	eba3 0209 	sub.w	r2, r3, r9
 80058f6:	d124      	bne.n	8005942 <_scanf_float+0x3c2>
 80058f8:	2200      	movs	r2, #0
 80058fa:	4659      	mov	r1, fp
 80058fc:	4640      	mov	r0, r8
 80058fe:	f002 fc2f 	bl	8008160 <_strtod_r>
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	6821      	ldr	r1, [r4, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f011 0f02 	tst.w	r1, #2
 800590c:	ec57 6b10 	vmov	r6, r7, d0
 8005910:	f103 0204 	add.w	r2, r3, #4
 8005914:	d020      	beq.n	8005958 <_scanf_float+0x3d8>
 8005916:	9903      	ldr	r1, [sp, #12]
 8005918:	600a      	str	r2, [r1, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	e9c3 6700 	strd	r6, r7, [r3]
 8005920:	68e3      	ldr	r3, [r4, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60e3      	str	r3, [r4, #12]
 8005926:	e66c      	b.n	8005602 <_scanf_float+0x82>
 8005928:	9b04      	ldr	r3, [sp, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0e4      	beq.n	80058f8 <_scanf_float+0x378>
 800592e:	9905      	ldr	r1, [sp, #20]
 8005930:	230a      	movs	r3, #10
 8005932:	462a      	mov	r2, r5
 8005934:	3101      	adds	r1, #1
 8005936:	4640      	mov	r0, r8
 8005938:	f002 fc9a 	bl	8008270 <_strtol_r>
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	9e05      	ldr	r6, [sp, #20]
 8005940:	1ac2      	subs	r2, r0, r3
 8005942:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005946:	429e      	cmp	r6, r3
 8005948:	bf28      	it	cs
 800594a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800594e:	4912      	ldr	r1, [pc, #72]	; (8005998 <_scanf_float+0x418>)
 8005950:	4630      	mov	r0, r6
 8005952:	f000 f8e7 	bl	8005b24 <siprintf>
 8005956:	e7cf      	b.n	80058f8 <_scanf_float+0x378>
 8005958:	f011 0f04 	tst.w	r1, #4
 800595c:	9903      	ldr	r1, [sp, #12]
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	d1db      	bne.n	800591a <_scanf_float+0x39a>
 8005962:	f8d3 8000 	ldr.w	r8, [r3]
 8005966:	ee10 2a10 	vmov	r2, s0
 800596a:	ee10 0a10 	vmov	r0, s0
 800596e:	463b      	mov	r3, r7
 8005970:	4639      	mov	r1, r7
 8005972:	f7fb f8e3 	bl	8000b3c <__aeabi_dcmpun>
 8005976:	b128      	cbz	r0, 8005984 <_scanf_float+0x404>
 8005978:	4808      	ldr	r0, [pc, #32]	; (800599c <_scanf_float+0x41c>)
 800597a:	f000 f9b7 	bl	8005cec <nanf>
 800597e:	ed88 0a00 	vstr	s0, [r8]
 8005982:	e7cd      	b.n	8005920 <_scanf_float+0x3a0>
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f936 	bl	8000bf8 <__aeabi_d2f>
 800598c:	f8c8 0000 	str.w	r0, [r8]
 8005990:	e7c6      	b.n	8005920 <_scanf_float+0x3a0>
 8005992:	2500      	movs	r5, #0
 8005994:	e635      	b.n	8005602 <_scanf_float+0x82>
 8005996:	bf00      	nop
 8005998:	080094c4 	.word	0x080094c4
 800599c:	08009855 	.word	0x08009855

080059a0 <std>:
 80059a0:	2300      	movs	r3, #0
 80059a2:	b510      	push	{r4, lr}
 80059a4:	4604      	mov	r4, r0
 80059a6:	e9c0 3300 	strd	r3, r3, [r0]
 80059aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ae:	6083      	str	r3, [r0, #8]
 80059b0:	8181      	strh	r1, [r0, #12]
 80059b2:	6643      	str	r3, [r0, #100]	; 0x64
 80059b4:	81c2      	strh	r2, [r0, #14]
 80059b6:	6183      	str	r3, [r0, #24]
 80059b8:	4619      	mov	r1, r3
 80059ba:	2208      	movs	r2, #8
 80059bc:	305c      	adds	r0, #92	; 0x5c
 80059be:	f000 f914 	bl	8005bea <memset>
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <std+0x58>)
 80059c4:	6263      	str	r3, [r4, #36]	; 0x24
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <std+0x5c>)
 80059c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <std+0x60>)
 80059cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <std+0x64>)
 80059d0:	6323      	str	r3, [r4, #48]	; 0x30
 80059d2:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <std+0x68>)
 80059d4:	6224      	str	r4, [r4, #32]
 80059d6:	429c      	cmp	r4, r3
 80059d8:	d006      	beq.n	80059e8 <std+0x48>
 80059da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80059de:	4294      	cmp	r4, r2
 80059e0:	d002      	beq.n	80059e8 <std+0x48>
 80059e2:	33d0      	adds	r3, #208	; 0xd0
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d105      	bne.n	80059f4 <std+0x54>
 80059e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f0:	f000 b978 	b.w	8005ce4 <__retarget_lock_init_recursive>
 80059f4:	bd10      	pop	{r4, pc}
 80059f6:	bf00      	nop
 80059f8:	08005b65 	.word	0x08005b65
 80059fc:	08005b87 	.word	0x08005b87
 8005a00:	08005bbf 	.word	0x08005bbf
 8005a04:	08005be3 	.word	0x08005be3
 8005a08:	20000404 	.word	0x20000404

08005a0c <stdio_exit_handler>:
 8005a0c:	4a02      	ldr	r2, [pc, #8]	; (8005a18 <stdio_exit_handler+0xc>)
 8005a0e:	4903      	ldr	r1, [pc, #12]	; (8005a1c <stdio_exit_handler+0x10>)
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <stdio_exit_handler+0x14>)
 8005a12:	f000 b869 	b.w	8005ae8 <_fwalk_sglue>
 8005a16:	bf00      	nop
 8005a18:	2000000c 	.word	0x2000000c
 8005a1c:	080088b9 	.word	0x080088b9
 8005a20:	20000018 	.word	0x20000018

08005a24 <cleanup_stdio>:
 8005a24:	6841      	ldr	r1, [r0, #4]
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <cleanup_stdio+0x34>)
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	d001      	beq.n	8005a34 <cleanup_stdio+0x10>
 8005a30:	f002 ff42 	bl	80088b8 <_fflush_r>
 8005a34:	68a1      	ldr	r1, [r4, #8]
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <cleanup_stdio+0x38>)
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d002      	beq.n	8005a42 <cleanup_stdio+0x1e>
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f002 ff3b 	bl	80088b8 <_fflush_r>
 8005a42:	68e1      	ldr	r1, [r4, #12]
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <cleanup_stdio+0x3c>)
 8005a46:	4299      	cmp	r1, r3
 8005a48:	d004      	beq.n	8005a54 <cleanup_stdio+0x30>
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a50:	f002 bf32 	b.w	80088b8 <_fflush_r>
 8005a54:	bd10      	pop	{r4, pc}
 8005a56:	bf00      	nop
 8005a58:	20000404 	.word	0x20000404
 8005a5c:	2000046c 	.word	0x2000046c
 8005a60:	200004d4 	.word	0x200004d4

08005a64 <global_stdio_init.part.0>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <global_stdio_init.part.0+0x30>)
 8005a68:	4c0b      	ldr	r4, [pc, #44]	; (8005a98 <global_stdio_init.part.0+0x34>)
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <global_stdio_init.part.0+0x38>)
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	2200      	movs	r2, #0
 8005a72:	2104      	movs	r1, #4
 8005a74:	f7ff ff94 	bl	80059a0 <std>
 8005a78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2109      	movs	r1, #9
 8005a80:	f7ff ff8e 	bl	80059a0 <std>
 8005a84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a88:	2202      	movs	r2, #2
 8005a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8e:	2112      	movs	r1, #18
 8005a90:	f7ff bf86 	b.w	80059a0 <std>
 8005a94:	2000053c 	.word	0x2000053c
 8005a98:	20000404 	.word	0x20000404
 8005a9c:	08005a0d 	.word	0x08005a0d

08005aa0 <__sfp_lock_acquire>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__sfp_lock_acquire+0x8>)
 8005aa2:	f000 b920 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000545 	.word	0x20000545

08005aac <__sfp_lock_release>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__sfp_lock_release+0x8>)
 8005aae:	f000 b91b 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	20000545 	.word	0x20000545

08005ab8 <__sinit>:
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	4604      	mov	r4, r0
 8005abc:	f7ff fff0 	bl	8005aa0 <__sfp_lock_acquire>
 8005ac0:	6a23      	ldr	r3, [r4, #32]
 8005ac2:	b11b      	cbz	r3, 8005acc <__sinit+0x14>
 8005ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac8:	f7ff bff0 	b.w	8005aac <__sfp_lock_release>
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <__sinit+0x28>)
 8005ace:	6223      	str	r3, [r4, #32]
 8005ad0:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <__sinit+0x2c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1f5      	bne.n	8005ac4 <__sinit+0xc>
 8005ad8:	f7ff ffc4 	bl	8005a64 <global_stdio_init.part.0>
 8005adc:	e7f2      	b.n	8005ac4 <__sinit+0xc>
 8005ade:	bf00      	nop
 8005ae0:	08005a25 	.word	0x08005a25
 8005ae4:	2000053c 	.word	0x2000053c

08005ae8 <_fwalk_sglue>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	4607      	mov	r7, r0
 8005aee:	4688      	mov	r8, r1
 8005af0:	4614      	mov	r4, r2
 8005af2:	2600      	movs	r6, #0
 8005af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af8:	f1b9 0901 	subs.w	r9, r9, #1
 8005afc:	d505      	bpl.n	8005b0a <_fwalk_sglue+0x22>
 8005afe:	6824      	ldr	r4, [r4, #0]
 8005b00:	2c00      	cmp	r4, #0
 8005b02:	d1f7      	bne.n	8005af4 <_fwalk_sglue+0xc>
 8005b04:	4630      	mov	r0, r6
 8005b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d907      	bls.n	8005b20 <_fwalk_sglue+0x38>
 8005b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b14:	3301      	adds	r3, #1
 8005b16:	d003      	beq.n	8005b20 <_fwalk_sglue+0x38>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c0      	blx	r8
 8005b1e:	4306      	orrs	r6, r0
 8005b20:	3568      	adds	r5, #104	; 0x68
 8005b22:	e7e9      	b.n	8005af8 <_fwalk_sglue+0x10>

08005b24 <siprintf>:
 8005b24:	b40e      	push	{r1, r2, r3}
 8005b26:	b500      	push	{lr}
 8005b28:	b09c      	sub	sp, #112	; 0x70
 8005b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b2c:	9002      	str	r0, [sp, #8]
 8005b2e:	9006      	str	r0, [sp, #24]
 8005b30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b34:	4809      	ldr	r0, [pc, #36]	; (8005b5c <siprintf+0x38>)
 8005b36:	9107      	str	r1, [sp, #28]
 8005b38:	9104      	str	r1, [sp, #16]
 8005b3a:	4909      	ldr	r1, [pc, #36]	; (8005b60 <siprintf+0x3c>)
 8005b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b40:	9105      	str	r1, [sp, #20]
 8005b42:	6800      	ldr	r0, [r0, #0]
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	a902      	add	r1, sp, #8
 8005b48:	f002 fbee 	bl	8008328 <_svfiprintf_r>
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	b01c      	add	sp, #112	; 0x70
 8005b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b58:	b003      	add	sp, #12
 8005b5a:	4770      	bx	lr
 8005b5c:	20000064 	.word	0x20000064
 8005b60:	ffff0208 	.word	0xffff0208

08005b64 <__sread>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	460c      	mov	r4, r1
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	f000 f86c 	bl	8005c48 <_read_r>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	bfab      	itete	ge
 8005b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b76:	89a3      	ldrhlt	r3, [r4, #12]
 8005b78:	181b      	addge	r3, r3, r0
 8005b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b7e:	bfac      	ite	ge
 8005b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b82:	81a3      	strhlt	r3, [r4, #12]
 8005b84:	bd10      	pop	{r4, pc}

08005b86 <__swrite>:
 8005b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	05db      	lsls	r3, r3, #23
 8005b90:	4605      	mov	r5, r0
 8005b92:	460c      	mov	r4, r1
 8005b94:	4616      	mov	r6, r2
 8005b96:	d505      	bpl.n	8005ba4 <__swrite+0x1e>
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f000 f840 	bl	8005c24 <_lseek_r>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	f000 b857 	b.w	8005c6c <_write_r>

08005bbe <__sseek>:
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc6:	f000 f82d 	bl	8005c24 <_lseek_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	bf15      	itete	ne
 8005bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bda:	81a3      	strheq	r3, [r4, #12]
 8005bdc:	bf18      	it	ne
 8005bde:	81a3      	strhne	r3, [r4, #12]
 8005be0:	bd10      	pop	{r4, pc}

08005be2 <__sclose>:
 8005be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be6:	f000 b80d 	b.w	8005c04 <_close_r>

08005bea <memset>:
 8005bea:	4402      	add	r2, r0
 8005bec:	4603      	mov	r3, r0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d100      	bne.n	8005bf4 <memset+0xa>
 8005bf2:	4770      	bx	lr
 8005bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf8:	e7f9      	b.n	8005bee <memset+0x4>
	...

08005bfc <_localeconv_r>:
 8005bfc:	4800      	ldr	r0, [pc, #0]	; (8005c00 <_localeconv_r+0x4>)
 8005bfe:	4770      	bx	lr
 8005c00:	20000158 	.word	0x20000158

08005c04 <_close_r>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	4d06      	ldr	r5, [pc, #24]	; (8005c20 <_close_r+0x1c>)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	4608      	mov	r0, r1
 8005c0e:	602b      	str	r3, [r5, #0]
 8005c10:	f7fb fdb9 	bl	8001786 <_close>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_close_r+0x1a>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_close_r+0x1a>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	20000540 	.word	0x20000540

08005c24 <_lseek_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d07      	ldr	r5, [pc, #28]	; (8005c44 <_lseek_r+0x20>)
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4608      	mov	r0, r1
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	2200      	movs	r2, #0
 8005c30:	602a      	str	r2, [r5, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f7fb fdce 	bl	80017d4 <_lseek>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_lseek_r+0x1e>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_lseek_r+0x1e>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20000540 	.word	0x20000540

08005c48 <_read_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	; (8005c68 <_read_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fb fd5c 	bl	8001714 <_read>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_read_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_read_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000540 	.word	0x20000540

08005c6c <_write_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	; (8005c8c <_write_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fb fd67 	bl	800174e <_write>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_write_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_write_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	20000540 	.word	0x20000540

08005c90 <__errno>:
 8005c90:	4b01      	ldr	r3, [pc, #4]	; (8005c98 <__errno+0x8>)
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000064 	.word	0x20000064

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	; (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	; (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	; (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	; (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f003 fbd6 	bl	8009460 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	080098c0 	.word	0x080098c0
 8005cd8:	080098c0 	.word	0x080098c0
 8005cdc:	080098c0 	.word	0x080098c0
 8005ce0:	080098c4 	.word	0x080098c4

08005ce4 <__retarget_lock_init_recursive>:
 8005ce4:	4770      	bx	lr

08005ce6 <__retarget_lock_acquire_recursive>:
 8005ce6:	4770      	bx	lr

08005ce8 <__retarget_lock_release_recursive>:
 8005ce8:	4770      	bx	lr
	...

08005cec <nanf>:
 8005cec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005cf4 <nanf+0x8>
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	7fc00000 	.word	0x7fc00000

08005cf8 <quorem>:
 8005cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	6903      	ldr	r3, [r0, #16]
 8005cfe:	690c      	ldr	r4, [r1, #16]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	4607      	mov	r7, r0
 8005d04:	db7e      	blt.n	8005e04 <quorem+0x10c>
 8005d06:	3c01      	subs	r4, #1
 8005d08:	f101 0814 	add.w	r8, r1, #20
 8005d0c:	f100 0514 	add.w	r5, r0, #20
 8005d10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	429a      	cmp	r2, r3
 8005d22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d2e:	d331      	bcc.n	8005d94 <quorem+0x9c>
 8005d30:	f04f 0e00 	mov.w	lr, #0
 8005d34:	4640      	mov	r0, r8
 8005d36:	46ac      	mov	ip, r5
 8005d38:	46f2      	mov	sl, lr
 8005d3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d3e:	b293      	uxth	r3, r2
 8005d40:	fb06 e303 	mla	r3, r6, r3, lr
 8005d44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d48:	0c1a      	lsrs	r2, r3, #16
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d50:	f8dc a000 	ldr.w	sl, [ip]
 8005d54:	fa13 f38a 	uxtah	r3, r3, sl
 8005d58:	fb06 220e 	mla	r2, r6, lr, r2
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	9b00      	ldr	r3, [sp, #0]
 8005d60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d64:	b292      	uxth	r2, r2
 8005d66:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d6e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d72:	4581      	cmp	r9, r0
 8005d74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d78:	f84c 3b04 	str.w	r3, [ip], #4
 8005d7c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d80:	d2db      	bcs.n	8005d3a <quorem+0x42>
 8005d82:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d86:	b92b      	cbnz	r3, 8005d94 <quorem+0x9c>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	429d      	cmp	r5, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	d32c      	bcc.n	8005dec <quorem+0xf4>
 8005d92:	613c      	str	r4, [r7, #16]
 8005d94:	4638      	mov	r0, r7
 8005d96:	f001 f9ef 	bl	8007178 <__mcmp>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	db22      	blt.n	8005de4 <quorem+0xec>
 8005d9e:	3601      	adds	r6, #1
 8005da0:	4629      	mov	r1, r5
 8005da2:	2000      	movs	r0, #0
 8005da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005da8:	f8d1 c000 	ldr.w	ip, [r1]
 8005dac:	b293      	uxth	r3, r2
 8005dae:	1ac3      	subs	r3, r0, r3
 8005db0:	0c12      	lsrs	r2, r2, #16
 8005db2:	fa13 f38c 	uxtah	r3, r3, ip
 8005db6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005dba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dc4:	45c1      	cmp	r9, r8
 8005dc6:	f841 3b04 	str.w	r3, [r1], #4
 8005dca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005dce:	d2e9      	bcs.n	8005da4 <quorem+0xac>
 8005dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd8:	b922      	cbnz	r2, 8005de4 <quorem+0xec>
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	429d      	cmp	r5, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	d30a      	bcc.n	8005df8 <quorem+0x100>
 8005de2:	613c      	str	r4, [r7, #16]
 8005de4:	4630      	mov	r0, r6
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	3b04      	subs	r3, #4
 8005df0:	2a00      	cmp	r2, #0
 8005df2:	d1ce      	bne.n	8005d92 <quorem+0x9a>
 8005df4:	3c01      	subs	r4, #1
 8005df6:	e7c9      	b.n	8005d8c <quorem+0x94>
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	d1f0      	bne.n	8005de2 <quorem+0xea>
 8005e00:	3c01      	subs	r4, #1
 8005e02:	e7eb      	b.n	8005ddc <quorem+0xe4>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7ee      	b.n	8005de6 <quorem+0xee>

08005e08 <_dtoa_r>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	ed2d 8b04 	vpush	{d8-d9}
 8005e10:	69c5      	ldr	r5, [r0, #28]
 8005e12:	b093      	sub	sp, #76	; 0x4c
 8005e14:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e18:	ec57 6b10 	vmov	r6, r7, d0
 8005e1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e20:	9107      	str	r1, [sp, #28]
 8005e22:	4604      	mov	r4, r0
 8005e24:	920a      	str	r2, [sp, #40]	; 0x28
 8005e26:	930d      	str	r3, [sp, #52]	; 0x34
 8005e28:	b975      	cbnz	r5, 8005e48 <_dtoa_r+0x40>
 8005e2a:	2010      	movs	r0, #16
 8005e2c:	f000 fe2a 	bl	8006a84 <malloc>
 8005e30:	4602      	mov	r2, r0
 8005e32:	61e0      	str	r0, [r4, #28]
 8005e34:	b920      	cbnz	r0, 8005e40 <_dtoa_r+0x38>
 8005e36:	4bae      	ldr	r3, [pc, #696]	; (80060f0 <_dtoa_r+0x2e8>)
 8005e38:	21ef      	movs	r1, #239	; 0xef
 8005e3a:	48ae      	ldr	r0, [pc, #696]	; (80060f4 <_dtoa_r+0x2ec>)
 8005e3c:	f002 fe4c 	bl	8008ad8 <__assert_func>
 8005e40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e44:	6005      	str	r5, [r0, #0]
 8005e46:	60c5      	str	r5, [r0, #12]
 8005e48:	69e3      	ldr	r3, [r4, #28]
 8005e4a:	6819      	ldr	r1, [r3, #0]
 8005e4c:	b151      	cbz	r1, 8005e64 <_dtoa_r+0x5c>
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	604a      	str	r2, [r1, #4]
 8005e52:	2301      	movs	r3, #1
 8005e54:	4093      	lsls	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 ff07 	bl	8006c6c <_Bfree>
 8005e5e:	69e3      	ldr	r3, [r4, #28]
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	1e3b      	subs	r3, r7, #0
 8005e66:	bfbb      	ittet	lt
 8005e68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005e6c:	9303      	strlt	r3, [sp, #12]
 8005e6e:	2300      	movge	r3, #0
 8005e70:	2201      	movlt	r2, #1
 8005e72:	bfac      	ite	ge
 8005e74:	f8c8 3000 	strge.w	r3, [r8]
 8005e78:	f8c8 2000 	strlt.w	r2, [r8]
 8005e7c:	4b9e      	ldr	r3, [pc, #632]	; (80060f8 <_dtoa_r+0x2f0>)
 8005e7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e82:	ea33 0308 	bics.w	r3, r3, r8
 8005e86:	d11b      	bne.n	8005ec0 <_dtoa_r+0xb8>
 8005e88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e8a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e94:	4333      	orrs	r3, r6
 8005e96:	f000 8593 	beq.w	80069c0 <_dtoa_r+0xbb8>
 8005e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e9c:	b963      	cbnz	r3, 8005eb8 <_dtoa_r+0xb0>
 8005e9e:	4b97      	ldr	r3, [pc, #604]	; (80060fc <_dtoa_r+0x2f4>)
 8005ea0:	e027      	b.n	8005ef2 <_dtoa_r+0xea>
 8005ea2:	4b97      	ldr	r3, [pc, #604]	; (8006100 <_dtoa_r+0x2f8>)
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	9800      	ldr	r0, [sp, #0]
 8005eae:	b013      	add	sp, #76	; 0x4c
 8005eb0:	ecbd 8b04 	vpop	{d8-d9}
 8005eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb8:	4b90      	ldr	r3, [pc, #576]	; (80060fc <_dtoa_r+0x2f4>)
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	3303      	adds	r3, #3
 8005ebe:	e7f3      	b.n	8005ea8 <_dtoa_r+0xa0>
 8005ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	ec51 0b17 	vmov	r0, r1, d7
 8005eca:	eeb0 8a47 	vmov.f32	s16, s14
 8005ece:	eef0 8a67 	vmov.f32	s17, s15
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f7fa fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ed8:	4681      	mov	r9, r0
 8005eda:	b160      	cbz	r0, 8005ef6 <_dtoa_r+0xee>
 8005edc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ede:	2301      	movs	r3, #1
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8568 	beq.w	80069ba <_dtoa_r+0xbb2>
 8005eea:	4b86      	ldr	r3, [pc, #536]	; (8006104 <_dtoa_r+0x2fc>)
 8005eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	e7da      	b.n	8005eac <_dtoa_r+0xa4>
 8005ef6:	aa10      	add	r2, sp, #64	; 0x40
 8005ef8:	a911      	add	r1, sp, #68	; 0x44
 8005efa:	4620      	mov	r0, r4
 8005efc:	eeb0 0a48 	vmov.f32	s0, s16
 8005f00:	eef0 0a68 	vmov.f32	s1, s17
 8005f04:	f001 fa4e 	bl	80073a4 <__d2b>
 8005f08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f0c:	4682      	mov	sl, r0
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	d07f      	beq.n	8006012 <_dtoa_r+0x20a>
 8005f12:	ee18 3a90 	vmov	r3, s17
 8005f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f1a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005f1e:	ec51 0b18 	vmov	r0, r1, d8
 8005f22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005f26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f2a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f2e:	4619      	mov	r1, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	4b75      	ldr	r3, [pc, #468]	; (8006108 <_dtoa_r+0x300>)
 8005f34:	f7fa f9b0 	bl	8000298 <__aeabi_dsub>
 8005f38:	a367      	add	r3, pc, #412	; (adr r3, 80060d8 <_dtoa_r+0x2d0>)
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	f7fa fb63 	bl	8000608 <__aeabi_dmul>
 8005f42:	a367      	add	r3, pc, #412	; (adr r3, 80060e0 <_dtoa_r+0x2d8>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f9a8 	bl	800029c <__adddf3>
 8005f4c:	4606      	mov	r6, r0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	460f      	mov	r7, r1
 8005f52:	f7fa faef 	bl	8000534 <__aeabi_i2d>
 8005f56:	a364      	add	r3, pc, #400	; (adr r3, 80060e8 <_dtoa_r+0x2e0>)
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	f7fa fb54 	bl	8000608 <__aeabi_dmul>
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4630      	mov	r0, r6
 8005f66:	4639      	mov	r1, r7
 8005f68:	f7fa f998 	bl	800029c <__adddf3>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460f      	mov	r7, r1
 8005f70:	f7fa fdfa 	bl	8000b68 <__aeabi_d2iz>
 8005f74:	2200      	movs	r2, #0
 8005f76:	4683      	mov	fp, r0
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	4639      	mov	r1, r7
 8005f7e:	f7fa fdb5 	bl	8000aec <__aeabi_dcmplt>
 8005f82:	b148      	cbz	r0, 8005f98 <_dtoa_r+0x190>
 8005f84:	4658      	mov	r0, fp
 8005f86:	f7fa fad5 	bl	8000534 <__aeabi_i2d>
 8005f8a:	4632      	mov	r2, r6
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	f7fa fda3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f92:	b908      	cbnz	r0, 8005f98 <_dtoa_r+0x190>
 8005f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f98:	f1bb 0f16 	cmp.w	fp, #22
 8005f9c:	d857      	bhi.n	800604e <_dtoa_r+0x246>
 8005f9e:	4b5b      	ldr	r3, [pc, #364]	; (800610c <_dtoa_r+0x304>)
 8005fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	ec51 0b18 	vmov	r0, r1, d8
 8005fac:	f7fa fd9e 	bl	8000aec <__aeabi_dcmplt>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d04e      	beq.n	8006052 <_dtoa_r+0x24a>
 8005fb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005fb8:	2300      	movs	r3, #0
 8005fba:	930c      	str	r3, [sp, #48]	; 0x30
 8005fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fbe:	1b5b      	subs	r3, r3, r5
 8005fc0:	1e5a      	subs	r2, r3, #1
 8005fc2:	bf45      	ittet	mi
 8005fc4:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fc8:	9305      	strmi	r3, [sp, #20]
 8005fca:	2300      	movpl	r3, #0
 8005fcc:	2300      	movmi	r3, #0
 8005fce:	9206      	str	r2, [sp, #24]
 8005fd0:	bf54      	ite	pl
 8005fd2:	9305      	strpl	r3, [sp, #20]
 8005fd4:	9306      	strmi	r3, [sp, #24]
 8005fd6:	f1bb 0f00 	cmp.w	fp, #0
 8005fda:	db3c      	blt.n	8006056 <_dtoa_r+0x24e>
 8005fdc:	9b06      	ldr	r3, [sp, #24]
 8005fde:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005fe2:	445b      	add	r3, fp
 8005fe4:	9306      	str	r3, [sp, #24]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9308      	str	r3, [sp, #32]
 8005fea:	9b07      	ldr	r3, [sp, #28]
 8005fec:	2b09      	cmp	r3, #9
 8005fee:	d868      	bhi.n	80060c2 <_dtoa_r+0x2ba>
 8005ff0:	2b05      	cmp	r3, #5
 8005ff2:	bfc4      	itt	gt
 8005ff4:	3b04      	subgt	r3, #4
 8005ff6:	9307      	strgt	r3, [sp, #28]
 8005ff8:	9b07      	ldr	r3, [sp, #28]
 8005ffa:	f1a3 0302 	sub.w	r3, r3, #2
 8005ffe:	bfcc      	ite	gt
 8006000:	2500      	movgt	r5, #0
 8006002:	2501      	movle	r5, #1
 8006004:	2b03      	cmp	r3, #3
 8006006:	f200 8085 	bhi.w	8006114 <_dtoa_r+0x30c>
 800600a:	e8df f003 	tbb	[pc, r3]
 800600e:	3b2e      	.short	0x3b2e
 8006010:	5839      	.short	0x5839
 8006012:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006016:	441d      	add	r5, r3
 8006018:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800601c:	2b20      	cmp	r3, #32
 800601e:	bfc1      	itttt	gt
 8006020:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006024:	fa08 f803 	lslgt.w	r8, r8, r3
 8006028:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800602c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006030:	bfd6      	itet	le
 8006032:	f1c3 0320 	rsble	r3, r3, #32
 8006036:	ea48 0003 	orrgt.w	r0, r8, r3
 800603a:	fa06 f003 	lslle.w	r0, r6, r3
 800603e:	f7fa fa69 	bl	8000514 <__aeabi_ui2d>
 8006042:	2201      	movs	r2, #1
 8006044:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006048:	3d01      	subs	r5, #1
 800604a:	920e      	str	r2, [sp, #56]	; 0x38
 800604c:	e76f      	b.n	8005f2e <_dtoa_r+0x126>
 800604e:	2301      	movs	r3, #1
 8006050:	e7b3      	b.n	8005fba <_dtoa_r+0x1b2>
 8006052:	900c      	str	r0, [sp, #48]	; 0x30
 8006054:	e7b2      	b.n	8005fbc <_dtoa_r+0x1b4>
 8006056:	9b05      	ldr	r3, [sp, #20]
 8006058:	eba3 030b 	sub.w	r3, r3, fp
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	f1cb 0300 	rsb	r3, fp, #0
 8006062:	9308      	str	r3, [sp, #32]
 8006064:	2300      	movs	r3, #0
 8006066:	930b      	str	r3, [sp, #44]	; 0x2c
 8006068:	e7bf      	b.n	8005fea <_dtoa_r+0x1e2>
 800606a:	2300      	movs	r3, #0
 800606c:	9309      	str	r3, [sp, #36]	; 0x24
 800606e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	dc52      	bgt.n	800611a <_dtoa_r+0x312>
 8006074:	2301      	movs	r3, #1
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	461a      	mov	r2, r3
 800607c:	920a      	str	r2, [sp, #40]	; 0x28
 800607e:	e00b      	b.n	8006098 <_dtoa_r+0x290>
 8006080:	2301      	movs	r3, #1
 8006082:	e7f3      	b.n	800606c <_dtoa_r+0x264>
 8006084:	2300      	movs	r3, #0
 8006086:	9309      	str	r3, [sp, #36]	; 0x24
 8006088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608a:	445b      	add	r3, fp
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	3301      	adds	r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	9304      	str	r3, [sp, #16]
 8006094:	bfb8      	it	lt
 8006096:	2301      	movlt	r3, #1
 8006098:	69e0      	ldr	r0, [r4, #28]
 800609a:	2100      	movs	r1, #0
 800609c:	2204      	movs	r2, #4
 800609e:	f102 0614 	add.w	r6, r2, #20
 80060a2:	429e      	cmp	r6, r3
 80060a4:	d93d      	bls.n	8006122 <_dtoa_r+0x31a>
 80060a6:	6041      	str	r1, [r0, #4]
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fd9f 	bl	8006bec <_Balloc>
 80060ae:	9000      	str	r0, [sp, #0]
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d139      	bne.n	8006128 <_dtoa_r+0x320>
 80060b4:	4b16      	ldr	r3, [pc, #88]	; (8006110 <_dtoa_r+0x308>)
 80060b6:	4602      	mov	r2, r0
 80060b8:	f240 11af 	movw	r1, #431	; 0x1af
 80060bc:	e6bd      	b.n	8005e3a <_dtoa_r+0x32>
 80060be:	2301      	movs	r3, #1
 80060c0:	e7e1      	b.n	8006086 <_dtoa_r+0x27e>
 80060c2:	2501      	movs	r5, #1
 80060c4:	2300      	movs	r3, #0
 80060c6:	9307      	str	r3, [sp, #28]
 80060c8:	9509      	str	r5, [sp, #36]	; 0x24
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2312      	movs	r3, #18
 80060d6:	e7d1      	b.n	800607c <_dtoa_r+0x274>
 80060d8:	636f4361 	.word	0x636f4361
 80060dc:	3fd287a7 	.word	0x3fd287a7
 80060e0:	8b60c8b3 	.word	0x8b60c8b3
 80060e4:	3fc68a28 	.word	0x3fc68a28
 80060e8:	509f79fb 	.word	0x509f79fb
 80060ec:	3fd34413 	.word	0x3fd34413
 80060f0:	080094d6 	.word	0x080094d6
 80060f4:	080094ed 	.word	0x080094ed
 80060f8:	7ff00000 	.word	0x7ff00000
 80060fc:	080094d2 	.word	0x080094d2
 8006100:	080094c9 	.word	0x080094c9
 8006104:	080094a1 	.word	0x080094a1
 8006108:	3ff80000 	.word	0x3ff80000
 800610c:	080095d8 	.word	0x080095d8
 8006110:	08009545 	.word	0x08009545
 8006114:	2301      	movs	r3, #1
 8006116:	9309      	str	r3, [sp, #36]	; 0x24
 8006118:	e7d7      	b.n	80060ca <_dtoa_r+0x2c2>
 800611a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	e7ba      	b.n	8006098 <_dtoa_r+0x290>
 8006122:	3101      	adds	r1, #1
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	e7ba      	b.n	800609e <_dtoa_r+0x296>
 8006128:	69e3      	ldr	r3, [r4, #28]
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	2b0e      	cmp	r3, #14
 8006132:	f200 80a8 	bhi.w	8006286 <_dtoa_r+0x47e>
 8006136:	2d00      	cmp	r5, #0
 8006138:	f000 80a5 	beq.w	8006286 <_dtoa_r+0x47e>
 800613c:	f1bb 0f00 	cmp.w	fp, #0
 8006140:	dd38      	ble.n	80061b4 <_dtoa_r+0x3ac>
 8006142:	4bc0      	ldr	r3, [pc, #768]	; (8006444 <_dtoa_r+0x63c>)
 8006144:	f00b 020f 	and.w	r2, fp, #15
 8006148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006150:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006154:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006158:	d019      	beq.n	800618e <_dtoa_r+0x386>
 800615a:	4bbb      	ldr	r3, [pc, #748]	; (8006448 <_dtoa_r+0x640>)
 800615c:	ec51 0b18 	vmov	r0, r1, d8
 8006160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006164:	f7fa fb7a 	bl	800085c <__aeabi_ddiv>
 8006168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800616c:	f008 080f 	and.w	r8, r8, #15
 8006170:	2503      	movs	r5, #3
 8006172:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006448 <_dtoa_r+0x640>
 8006176:	f1b8 0f00 	cmp.w	r8, #0
 800617a:	d10a      	bne.n	8006192 <_dtoa_r+0x38a>
 800617c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006180:	4632      	mov	r2, r6
 8006182:	463b      	mov	r3, r7
 8006184:	f7fa fb6a 	bl	800085c <__aeabi_ddiv>
 8006188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618c:	e02b      	b.n	80061e6 <_dtoa_r+0x3de>
 800618e:	2502      	movs	r5, #2
 8006190:	e7ef      	b.n	8006172 <_dtoa_r+0x36a>
 8006192:	f018 0f01 	tst.w	r8, #1
 8006196:	d008      	beq.n	80061aa <_dtoa_r+0x3a2>
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80061a0:	f7fa fa32 	bl	8000608 <__aeabi_dmul>
 80061a4:	3501      	adds	r5, #1
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061ae:	f109 0908 	add.w	r9, r9, #8
 80061b2:	e7e0      	b.n	8006176 <_dtoa_r+0x36e>
 80061b4:	f000 809f 	beq.w	80062f6 <_dtoa_r+0x4ee>
 80061b8:	f1cb 0600 	rsb	r6, fp, #0
 80061bc:	4ba1      	ldr	r3, [pc, #644]	; (8006444 <_dtoa_r+0x63c>)
 80061be:	4fa2      	ldr	r7, [pc, #648]	; (8006448 <_dtoa_r+0x640>)
 80061c0:	f006 020f 	and.w	r2, r6, #15
 80061c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	ec51 0b18 	vmov	r0, r1, d8
 80061d0:	f7fa fa1a 	bl	8000608 <__aeabi_dmul>
 80061d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d8:	1136      	asrs	r6, r6, #4
 80061da:	2300      	movs	r3, #0
 80061dc:	2502      	movs	r5, #2
 80061de:	2e00      	cmp	r6, #0
 80061e0:	d17e      	bne.n	80062e0 <_dtoa_r+0x4d8>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1d0      	bne.n	8006188 <_dtoa_r+0x380>
 80061e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8084 	beq.w	80062fa <_dtoa_r+0x4f2>
 80061f2:	4b96      	ldr	r3, [pc, #600]	; (800644c <_dtoa_r+0x644>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	4640      	mov	r0, r8
 80061f8:	4649      	mov	r1, r9
 80061fa:	f7fa fc77 	bl	8000aec <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d07b      	beq.n	80062fa <_dtoa_r+0x4f2>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d078      	beq.n	80062fa <_dtoa_r+0x4f2>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	dd39      	ble.n	8006282 <_dtoa_r+0x47a>
 800620e:	4b90      	ldr	r3, [pc, #576]	; (8006450 <_dtoa_r+0x648>)
 8006210:	2200      	movs	r2, #0
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	f7fa f9f7 	bl	8000608 <__aeabi_dmul>
 800621a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621e:	9e01      	ldr	r6, [sp, #4]
 8006220:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006224:	3501      	adds	r5, #1
 8006226:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800622a:	4628      	mov	r0, r5
 800622c:	f7fa f982 	bl	8000534 <__aeabi_i2d>
 8006230:	4642      	mov	r2, r8
 8006232:	464b      	mov	r3, r9
 8006234:	f7fa f9e8 	bl	8000608 <__aeabi_dmul>
 8006238:	4b86      	ldr	r3, [pc, #536]	; (8006454 <_dtoa_r+0x64c>)
 800623a:	2200      	movs	r2, #0
 800623c:	f7fa f82e 	bl	800029c <__adddf3>
 8006240:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	2e00      	cmp	r6, #0
 800624c:	d158      	bne.n	8006300 <_dtoa_r+0x4f8>
 800624e:	4b82      	ldr	r3, [pc, #520]	; (8006458 <_dtoa_r+0x650>)
 8006250:	2200      	movs	r2, #0
 8006252:	4640      	mov	r0, r8
 8006254:	4649      	mov	r1, r9
 8006256:	f7fa f81f 	bl	8000298 <__aeabi_dsub>
 800625a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800625e:	4680      	mov	r8, r0
 8006260:	4689      	mov	r9, r1
 8006262:	f7fa fc61 	bl	8000b28 <__aeabi_dcmpgt>
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 8296 	bne.w	8006798 <_dtoa_r+0x990>
 800626c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006270:	4640      	mov	r0, r8
 8006272:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006276:	4649      	mov	r1, r9
 8006278:	f7fa fc38 	bl	8000aec <__aeabi_dcmplt>
 800627c:	2800      	cmp	r0, #0
 800627e:	f040 8289 	bne.w	8006794 <_dtoa_r+0x98c>
 8006282:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006286:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006288:	2b00      	cmp	r3, #0
 800628a:	f2c0 814e 	blt.w	800652a <_dtoa_r+0x722>
 800628e:	f1bb 0f0e 	cmp.w	fp, #14
 8006292:	f300 814a 	bgt.w	800652a <_dtoa_r+0x722>
 8006296:	4b6b      	ldr	r3, [pc, #428]	; (8006444 <_dtoa_r+0x63c>)
 8006298:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800629c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f280 80dc 	bge.w	8006460 <_dtoa_r+0x658>
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f300 80d8 	bgt.w	8006460 <_dtoa_r+0x658>
 80062b0:	f040 826f 	bne.w	8006792 <_dtoa_r+0x98a>
 80062b4:	4b68      	ldr	r3, [pc, #416]	; (8006458 <_dtoa_r+0x650>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	4640      	mov	r0, r8
 80062ba:	4649      	mov	r1, r9
 80062bc:	f7fa f9a4 	bl	8000608 <__aeabi_dmul>
 80062c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062c4:	f7fa fc26 	bl	8000b14 <__aeabi_dcmpge>
 80062c8:	9e04      	ldr	r6, [sp, #16]
 80062ca:	4637      	mov	r7, r6
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f040 8245 	bne.w	800675c <_dtoa_r+0x954>
 80062d2:	9d00      	ldr	r5, [sp, #0]
 80062d4:	2331      	movs	r3, #49	; 0x31
 80062d6:	f805 3b01 	strb.w	r3, [r5], #1
 80062da:	f10b 0b01 	add.w	fp, fp, #1
 80062de:	e241      	b.n	8006764 <_dtoa_r+0x95c>
 80062e0:	07f2      	lsls	r2, r6, #31
 80062e2:	d505      	bpl.n	80062f0 <_dtoa_r+0x4e8>
 80062e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e8:	f7fa f98e 	bl	8000608 <__aeabi_dmul>
 80062ec:	3501      	adds	r5, #1
 80062ee:	2301      	movs	r3, #1
 80062f0:	1076      	asrs	r6, r6, #1
 80062f2:	3708      	adds	r7, #8
 80062f4:	e773      	b.n	80061de <_dtoa_r+0x3d6>
 80062f6:	2502      	movs	r5, #2
 80062f8:	e775      	b.n	80061e6 <_dtoa_r+0x3de>
 80062fa:	9e04      	ldr	r6, [sp, #16]
 80062fc:	465f      	mov	r7, fp
 80062fe:	e792      	b.n	8006226 <_dtoa_r+0x41e>
 8006300:	9900      	ldr	r1, [sp, #0]
 8006302:	4b50      	ldr	r3, [pc, #320]	; (8006444 <_dtoa_r+0x63c>)
 8006304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006308:	4431      	add	r1, r6
 800630a:	9102      	str	r1, [sp, #8]
 800630c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800630e:	eeb0 9a47 	vmov.f32	s18, s14
 8006312:	eef0 9a67 	vmov.f32	s19, s15
 8006316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800631a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800631e:	2900      	cmp	r1, #0
 8006320:	d044      	beq.n	80063ac <_dtoa_r+0x5a4>
 8006322:	494e      	ldr	r1, [pc, #312]	; (800645c <_dtoa_r+0x654>)
 8006324:	2000      	movs	r0, #0
 8006326:	f7fa fa99 	bl	800085c <__aeabi_ddiv>
 800632a:	ec53 2b19 	vmov	r2, r3, d9
 800632e:	f7f9 ffb3 	bl	8000298 <__aeabi_dsub>
 8006332:	9d00      	ldr	r5, [sp, #0]
 8006334:	ec41 0b19 	vmov	d9, r0, r1
 8006338:	4649      	mov	r1, r9
 800633a:	4640      	mov	r0, r8
 800633c:	f7fa fc14 	bl	8000b68 <__aeabi_d2iz>
 8006340:	4606      	mov	r6, r0
 8006342:	f7fa f8f7 	bl	8000534 <__aeabi_i2d>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7f9 ffa3 	bl	8000298 <__aeabi_dsub>
 8006352:	3630      	adds	r6, #48	; 0x30
 8006354:	f805 6b01 	strb.w	r6, [r5], #1
 8006358:	ec53 2b19 	vmov	r2, r3, d9
 800635c:	4680      	mov	r8, r0
 800635e:	4689      	mov	r9, r1
 8006360:	f7fa fbc4 	bl	8000aec <__aeabi_dcmplt>
 8006364:	2800      	cmp	r0, #0
 8006366:	d164      	bne.n	8006432 <_dtoa_r+0x62a>
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	4937      	ldr	r1, [pc, #220]	; (800644c <_dtoa_r+0x644>)
 800636e:	2000      	movs	r0, #0
 8006370:	f7f9 ff92 	bl	8000298 <__aeabi_dsub>
 8006374:	ec53 2b19 	vmov	r2, r3, d9
 8006378:	f7fa fbb8 	bl	8000aec <__aeabi_dcmplt>
 800637c:	2800      	cmp	r0, #0
 800637e:	f040 80b6 	bne.w	80064ee <_dtoa_r+0x6e6>
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	429d      	cmp	r5, r3
 8006386:	f43f af7c 	beq.w	8006282 <_dtoa_r+0x47a>
 800638a:	4b31      	ldr	r3, [pc, #196]	; (8006450 <_dtoa_r+0x648>)
 800638c:	ec51 0b19 	vmov	r0, r1, d9
 8006390:	2200      	movs	r2, #0
 8006392:	f7fa f939 	bl	8000608 <__aeabi_dmul>
 8006396:	4b2e      	ldr	r3, [pc, #184]	; (8006450 <_dtoa_r+0x648>)
 8006398:	ec41 0b19 	vmov	d9, r0, r1
 800639c:	2200      	movs	r2, #0
 800639e:	4640      	mov	r0, r8
 80063a0:	4649      	mov	r1, r9
 80063a2:	f7fa f931 	bl	8000608 <__aeabi_dmul>
 80063a6:	4680      	mov	r8, r0
 80063a8:	4689      	mov	r9, r1
 80063aa:	e7c5      	b.n	8006338 <_dtoa_r+0x530>
 80063ac:	ec51 0b17 	vmov	r0, r1, d7
 80063b0:	f7fa f92a 	bl	8000608 <__aeabi_dmul>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	9d00      	ldr	r5, [sp, #0]
 80063b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80063ba:	ec41 0b19 	vmov	d9, r0, r1
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	f7fa fbd1 	bl	8000b68 <__aeabi_d2iz>
 80063c6:	4606      	mov	r6, r0
 80063c8:	f7fa f8b4 	bl	8000534 <__aeabi_i2d>
 80063cc:	3630      	adds	r6, #48	; 0x30
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7f9 ff5f 	bl	8000298 <__aeabi_dsub>
 80063da:	f805 6b01 	strb.w	r6, [r5], #1
 80063de:	9b02      	ldr	r3, [sp, #8]
 80063e0:	429d      	cmp	r5, r3
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	d124      	bne.n	8006436 <_dtoa_r+0x62e>
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <_dtoa_r+0x654>)
 80063ee:	ec51 0b19 	vmov	r0, r1, d9
 80063f2:	f7f9 ff53 	bl	800029c <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7fa fb93 	bl	8000b28 <__aeabi_dcmpgt>
 8006402:	2800      	cmp	r0, #0
 8006404:	d173      	bne.n	80064ee <_dtoa_r+0x6e6>
 8006406:	ec53 2b19 	vmov	r2, r3, d9
 800640a:	4914      	ldr	r1, [pc, #80]	; (800645c <_dtoa_r+0x654>)
 800640c:	2000      	movs	r0, #0
 800640e:	f7f9 ff43 	bl	8000298 <__aeabi_dsub>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	f7fa fb67 	bl	8000aec <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f43f af2f 	beq.w	8006282 <_dtoa_r+0x47a>
 8006424:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006426:	1e6b      	subs	r3, r5, #1
 8006428:	930f      	str	r3, [sp, #60]	; 0x3c
 800642a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800642e:	2b30      	cmp	r3, #48	; 0x30
 8006430:	d0f8      	beq.n	8006424 <_dtoa_r+0x61c>
 8006432:	46bb      	mov	fp, r7
 8006434:	e04a      	b.n	80064cc <_dtoa_r+0x6c4>
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <_dtoa_r+0x648>)
 8006438:	f7fa f8e6 	bl	8000608 <__aeabi_dmul>
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	e7bd      	b.n	80063be <_dtoa_r+0x5b6>
 8006442:	bf00      	nop
 8006444:	080095d8 	.word	0x080095d8
 8006448:	080095b0 	.word	0x080095b0
 800644c:	3ff00000 	.word	0x3ff00000
 8006450:	40240000 	.word	0x40240000
 8006454:	401c0000 	.word	0x401c0000
 8006458:	40140000 	.word	0x40140000
 800645c:	3fe00000 	.word	0x3fe00000
 8006460:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006464:	9d00      	ldr	r5, [sp, #0]
 8006466:	4642      	mov	r2, r8
 8006468:	464b      	mov	r3, r9
 800646a:	4630      	mov	r0, r6
 800646c:	4639      	mov	r1, r7
 800646e:	f7fa f9f5 	bl	800085c <__aeabi_ddiv>
 8006472:	f7fa fb79 	bl	8000b68 <__aeabi_d2iz>
 8006476:	9001      	str	r0, [sp, #4]
 8006478:	f7fa f85c 	bl	8000534 <__aeabi_i2d>
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	f7fa f8c2 	bl	8000608 <__aeabi_dmul>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4630      	mov	r0, r6
 800648a:	4639      	mov	r1, r7
 800648c:	f7f9 ff04 	bl	8000298 <__aeabi_dsub>
 8006490:	9e01      	ldr	r6, [sp, #4]
 8006492:	9f04      	ldr	r7, [sp, #16]
 8006494:	3630      	adds	r6, #48	; 0x30
 8006496:	f805 6b01 	strb.w	r6, [r5], #1
 800649a:	9e00      	ldr	r6, [sp, #0]
 800649c:	1bae      	subs	r6, r5, r6
 800649e:	42b7      	cmp	r7, r6
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	d134      	bne.n	8006510 <_dtoa_r+0x708>
 80064a6:	f7f9 fef9 	bl	800029c <__adddf3>
 80064aa:	4642      	mov	r2, r8
 80064ac:	464b      	mov	r3, r9
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	f7fa fb39 	bl	8000b28 <__aeabi_dcmpgt>
 80064b6:	b9c8      	cbnz	r0, 80064ec <_dtoa_r+0x6e4>
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c4:	b110      	cbz	r0, 80064cc <_dtoa_r+0x6c4>
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	07db      	lsls	r3, r3, #31
 80064ca:	d40f      	bmi.n	80064ec <_dtoa_r+0x6e4>
 80064cc:	4651      	mov	r1, sl
 80064ce:	4620      	mov	r0, r4
 80064d0:	f000 fbcc 	bl	8006c6c <_Bfree>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064d8:	702b      	strb	r3, [r5, #0]
 80064da:	f10b 0301 	add.w	r3, fp, #1
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f43f ace2 	beq.w	8005eac <_dtoa_r+0xa4>
 80064e8:	601d      	str	r5, [r3, #0]
 80064ea:	e4df      	b.n	8005eac <_dtoa_r+0xa4>
 80064ec:	465f      	mov	r7, fp
 80064ee:	462b      	mov	r3, r5
 80064f0:	461d      	mov	r5, r3
 80064f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064f6:	2a39      	cmp	r2, #57	; 0x39
 80064f8:	d106      	bne.n	8006508 <_dtoa_r+0x700>
 80064fa:	9a00      	ldr	r2, [sp, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1f7      	bne.n	80064f0 <_dtoa_r+0x6e8>
 8006500:	9900      	ldr	r1, [sp, #0]
 8006502:	2230      	movs	r2, #48	; 0x30
 8006504:	3701      	adds	r7, #1
 8006506:	700a      	strb	r2, [r1, #0]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	3201      	adds	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e790      	b.n	8006432 <_dtoa_r+0x62a>
 8006510:	4ba3      	ldr	r3, [pc, #652]	; (80067a0 <_dtoa_r+0x998>)
 8006512:	2200      	movs	r2, #0
 8006514:	f7fa f878 	bl	8000608 <__aeabi_dmul>
 8006518:	2200      	movs	r2, #0
 800651a:	2300      	movs	r3, #0
 800651c:	4606      	mov	r6, r0
 800651e:	460f      	mov	r7, r1
 8006520:	f7fa fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8006524:	2800      	cmp	r0, #0
 8006526:	d09e      	beq.n	8006466 <_dtoa_r+0x65e>
 8006528:	e7d0      	b.n	80064cc <_dtoa_r+0x6c4>
 800652a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652c:	2a00      	cmp	r2, #0
 800652e:	f000 80ca 	beq.w	80066c6 <_dtoa_r+0x8be>
 8006532:	9a07      	ldr	r2, [sp, #28]
 8006534:	2a01      	cmp	r2, #1
 8006536:	f300 80ad 	bgt.w	8006694 <_dtoa_r+0x88c>
 800653a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800653c:	2a00      	cmp	r2, #0
 800653e:	f000 80a5 	beq.w	800668c <_dtoa_r+0x884>
 8006542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006546:	9e08      	ldr	r6, [sp, #32]
 8006548:	9d05      	ldr	r5, [sp, #20]
 800654a:	9a05      	ldr	r2, [sp, #20]
 800654c:	441a      	add	r2, r3
 800654e:	9205      	str	r2, [sp, #20]
 8006550:	9a06      	ldr	r2, [sp, #24]
 8006552:	2101      	movs	r1, #1
 8006554:	441a      	add	r2, r3
 8006556:	4620      	mov	r0, r4
 8006558:	9206      	str	r2, [sp, #24]
 800655a:	f000 fc87 	bl	8006e6c <__i2b>
 800655e:	4607      	mov	r7, r0
 8006560:	b165      	cbz	r5, 800657c <_dtoa_r+0x774>
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd09      	ble.n	800657c <_dtoa_r+0x774>
 8006568:	42ab      	cmp	r3, r5
 800656a:	9a05      	ldr	r2, [sp, #20]
 800656c:	bfa8      	it	ge
 800656e:	462b      	movge	r3, r5
 8006570:	1ad2      	subs	r2, r2, r3
 8006572:	9205      	str	r2, [sp, #20]
 8006574:	9a06      	ldr	r2, [sp, #24]
 8006576:	1aed      	subs	r5, r5, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	9306      	str	r3, [sp, #24]
 800657c:	9b08      	ldr	r3, [sp, #32]
 800657e:	b1f3      	cbz	r3, 80065be <_dtoa_r+0x7b6>
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a3 	beq.w	80066ce <_dtoa_r+0x8c6>
 8006588:	2e00      	cmp	r6, #0
 800658a:	dd10      	ble.n	80065ae <_dtoa_r+0x7a6>
 800658c:	4639      	mov	r1, r7
 800658e:	4632      	mov	r2, r6
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fd2b 	bl	8006fec <__pow5mult>
 8006596:	4652      	mov	r2, sl
 8006598:	4601      	mov	r1, r0
 800659a:	4607      	mov	r7, r0
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fc7b 	bl	8006e98 <__multiply>
 80065a2:	4651      	mov	r1, sl
 80065a4:	4680      	mov	r8, r0
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fb60 	bl	8006c6c <_Bfree>
 80065ac:	46c2      	mov	sl, r8
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	1b9a      	subs	r2, r3, r6
 80065b2:	d004      	beq.n	80065be <_dtoa_r+0x7b6>
 80065b4:	4651      	mov	r1, sl
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fd18 	bl	8006fec <__pow5mult>
 80065bc:	4682      	mov	sl, r0
 80065be:	2101      	movs	r1, #1
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fc53 	bl	8006e6c <__i2b>
 80065c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	4606      	mov	r6, r0
 80065cc:	f340 8081 	ble.w	80066d2 <_dtoa_r+0x8ca>
 80065d0:	461a      	mov	r2, r3
 80065d2:	4601      	mov	r1, r0
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fd09 	bl	8006fec <__pow5mult>
 80065da:	9b07      	ldr	r3, [sp, #28]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	4606      	mov	r6, r0
 80065e0:	dd7a      	ble.n	80066d8 <_dtoa_r+0x8d0>
 80065e2:	f04f 0800 	mov.w	r8, #0
 80065e6:	6933      	ldr	r3, [r6, #16]
 80065e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065ec:	6918      	ldr	r0, [r3, #16]
 80065ee:	f000 fbef 	bl	8006dd0 <__hi0bits>
 80065f2:	f1c0 0020 	rsb	r0, r0, #32
 80065f6:	9b06      	ldr	r3, [sp, #24]
 80065f8:	4418      	add	r0, r3
 80065fa:	f010 001f 	ands.w	r0, r0, #31
 80065fe:	f000 8094 	beq.w	800672a <_dtoa_r+0x922>
 8006602:	f1c0 0320 	rsb	r3, r0, #32
 8006606:	2b04      	cmp	r3, #4
 8006608:	f340 8085 	ble.w	8006716 <_dtoa_r+0x90e>
 800660c:	9b05      	ldr	r3, [sp, #20]
 800660e:	f1c0 001c 	rsb	r0, r0, #28
 8006612:	4403      	add	r3, r0
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	9b06      	ldr	r3, [sp, #24]
 8006618:	4403      	add	r3, r0
 800661a:	4405      	add	r5, r0
 800661c:	9306      	str	r3, [sp, #24]
 800661e:	9b05      	ldr	r3, [sp, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd05      	ble.n	8006630 <_dtoa_r+0x828>
 8006624:	4651      	mov	r1, sl
 8006626:	461a      	mov	r2, r3
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fd39 	bl	80070a0 <__lshift>
 800662e:	4682      	mov	sl, r0
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dd05      	ble.n	8006642 <_dtoa_r+0x83a>
 8006636:	4631      	mov	r1, r6
 8006638:	461a      	mov	r2, r3
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fd30 	bl	80070a0 <__lshift>
 8006640:	4606      	mov	r6, r0
 8006642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006644:	2b00      	cmp	r3, #0
 8006646:	d072      	beq.n	800672e <_dtoa_r+0x926>
 8006648:	4631      	mov	r1, r6
 800664a:	4650      	mov	r0, sl
 800664c:	f000 fd94 	bl	8007178 <__mcmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	da6c      	bge.n	800672e <_dtoa_r+0x926>
 8006654:	2300      	movs	r3, #0
 8006656:	4651      	mov	r1, sl
 8006658:	220a      	movs	r2, #10
 800665a:	4620      	mov	r0, r4
 800665c:	f000 fb28 	bl	8006cb0 <__multadd>
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006666:	4682      	mov	sl, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 81b0 	beq.w	80069ce <_dtoa_r+0xbc6>
 800666e:	2300      	movs	r3, #0
 8006670:	4639      	mov	r1, r7
 8006672:	220a      	movs	r2, #10
 8006674:	4620      	mov	r0, r4
 8006676:	f000 fb1b 	bl	8006cb0 <__multadd>
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	4607      	mov	r7, r0
 8006680:	f300 8096 	bgt.w	80067b0 <_dtoa_r+0x9a8>
 8006684:	9b07      	ldr	r3, [sp, #28]
 8006686:	2b02      	cmp	r3, #2
 8006688:	dc59      	bgt.n	800673e <_dtoa_r+0x936>
 800668a:	e091      	b.n	80067b0 <_dtoa_r+0x9a8>
 800668c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800668e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006692:	e758      	b.n	8006546 <_dtoa_r+0x73e>
 8006694:	9b04      	ldr	r3, [sp, #16]
 8006696:	1e5e      	subs	r6, r3, #1
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	42b3      	cmp	r3, r6
 800669c:	bfbf      	itttt	lt
 800669e:	9b08      	ldrlt	r3, [sp, #32]
 80066a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80066a2:	9608      	strlt	r6, [sp, #32]
 80066a4:	1af3      	sublt	r3, r6, r3
 80066a6:	bfb4      	ite	lt
 80066a8:	18d2      	addlt	r2, r2, r3
 80066aa:	1b9e      	subge	r6, r3, r6
 80066ac:	9b04      	ldr	r3, [sp, #16]
 80066ae:	bfbc      	itt	lt
 80066b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80066b2:	2600      	movlt	r6, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bfb7      	itett	lt
 80066b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80066bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80066c0:	1a9d      	sublt	r5, r3, r2
 80066c2:	2300      	movlt	r3, #0
 80066c4:	e741      	b.n	800654a <_dtoa_r+0x742>
 80066c6:	9e08      	ldr	r6, [sp, #32]
 80066c8:	9d05      	ldr	r5, [sp, #20]
 80066ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066cc:	e748      	b.n	8006560 <_dtoa_r+0x758>
 80066ce:	9a08      	ldr	r2, [sp, #32]
 80066d0:	e770      	b.n	80065b4 <_dtoa_r+0x7ac>
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	dc19      	bgt.n	800670c <_dtoa_r+0x904>
 80066d8:	9b02      	ldr	r3, [sp, #8]
 80066da:	b9bb      	cbnz	r3, 800670c <_dtoa_r+0x904>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066e2:	b99b      	cbnz	r3, 800670c <_dtoa_r+0x904>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066ea:	0d1b      	lsrs	r3, r3, #20
 80066ec:	051b      	lsls	r3, r3, #20
 80066ee:	b183      	cbz	r3, 8006712 <_dtoa_r+0x90a>
 80066f0:	9b05      	ldr	r3, [sp, #20]
 80066f2:	3301      	adds	r3, #1
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	3301      	adds	r3, #1
 80066fa:	9306      	str	r3, [sp, #24]
 80066fc:	f04f 0801 	mov.w	r8, #1
 8006700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006702:	2b00      	cmp	r3, #0
 8006704:	f47f af6f 	bne.w	80065e6 <_dtoa_r+0x7de>
 8006708:	2001      	movs	r0, #1
 800670a:	e774      	b.n	80065f6 <_dtoa_r+0x7ee>
 800670c:	f04f 0800 	mov.w	r8, #0
 8006710:	e7f6      	b.n	8006700 <_dtoa_r+0x8f8>
 8006712:	4698      	mov	r8, r3
 8006714:	e7f4      	b.n	8006700 <_dtoa_r+0x8f8>
 8006716:	d082      	beq.n	800661e <_dtoa_r+0x816>
 8006718:	9a05      	ldr	r2, [sp, #20]
 800671a:	331c      	adds	r3, #28
 800671c:	441a      	add	r2, r3
 800671e:	9205      	str	r2, [sp, #20]
 8006720:	9a06      	ldr	r2, [sp, #24]
 8006722:	441a      	add	r2, r3
 8006724:	441d      	add	r5, r3
 8006726:	9206      	str	r2, [sp, #24]
 8006728:	e779      	b.n	800661e <_dtoa_r+0x816>
 800672a:	4603      	mov	r3, r0
 800672c:	e7f4      	b.n	8006718 <_dtoa_r+0x910>
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dc37      	bgt.n	80067a4 <_dtoa_r+0x99c>
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	2b02      	cmp	r3, #2
 8006738:	dd34      	ble.n	80067a4 <_dtoa_r+0x99c>
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	9b01      	ldr	r3, [sp, #4]
 8006740:	b963      	cbnz	r3, 800675c <_dtoa_r+0x954>
 8006742:	4631      	mov	r1, r6
 8006744:	2205      	movs	r2, #5
 8006746:	4620      	mov	r0, r4
 8006748:	f000 fab2 	bl	8006cb0 <__multadd>
 800674c:	4601      	mov	r1, r0
 800674e:	4606      	mov	r6, r0
 8006750:	4650      	mov	r0, sl
 8006752:	f000 fd11 	bl	8007178 <__mcmp>
 8006756:	2800      	cmp	r0, #0
 8006758:	f73f adbb 	bgt.w	80062d2 <_dtoa_r+0x4ca>
 800675c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675e:	9d00      	ldr	r5, [sp, #0]
 8006760:	ea6f 0b03 	mvn.w	fp, r3
 8006764:	f04f 0800 	mov.w	r8, #0
 8006768:	4631      	mov	r1, r6
 800676a:	4620      	mov	r0, r4
 800676c:	f000 fa7e 	bl	8006c6c <_Bfree>
 8006770:	2f00      	cmp	r7, #0
 8006772:	f43f aeab 	beq.w	80064cc <_dtoa_r+0x6c4>
 8006776:	f1b8 0f00 	cmp.w	r8, #0
 800677a:	d005      	beq.n	8006788 <_dtoa_r+0x980>
 800677c:	45b8      	cmp	r8, r7
 800677e:	d003      	beq.n	8006788 <_dtoa_r+0x980>
 8006780:	4641      	mov	r1, r8
 8006782:	4620      	mov	r0, r4
 8006784:	f000 fa72 	bl	8006c6c <_Bfree>
 8006788:	4639      	mov	r1, r7
 800678a:	4620      	mov	r0, r4
 800678c:	f000 fa6e 	bl	8006c6c <_Bfree>
 8006790:	e69c      	b.n	80064cc <_dtoa_r+0x6c4>
 8006792:	2600      	movs	r6, #0
 8006794:	4637      	mov	r7, r6
 8006796:	e7e1      	b.n	800675c <_dtoa_r+0x954>
 8006798:	46bb      	mov	fp, r7
 800679a:	4637      	mov	r7, r6
 800679c:	e599      	b.n	80062d2 <_dtoa_r+0x4ca>
 800679e:	bf00      	nop
 80067a0:	40240000 	.word	0x40240000
 80067a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80c8 	beq.w	800693c <_dtoa_r+0xb34>
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	dd05      	ble.n	80067c0 <_dtoa_r+0x9b8>
 80067b4:	4639      	mov	r1, r7
 80067b6:	462a      	mov	r2, r5
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fc71 	bl	80070a0 <__lshift>
 80067be:	4607      	mov	r7, r0
 80067c0:	f1b8 0f00 	cmp.w	r8, #0
 80067c4:	d05b      	beq.n	800687e <_dtoa_r+0xa76>
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fa0f 	bl	8006bec <_Balloc>
 80067ce:	4605      	mov	r5, r0
 80067d0:	b928      	cbnz	r0, 80067de <_dtoa_r+0x9d6>
 80067d2:	4b83      	ldr	r3, [pc, #524]	; (80069e0 <_dtoa_r+0xbd8>)
 80067d4:	4602      	mov	r2, r0
 80067d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80067da:	f7ff bb2e 	b.w	8005e3a <_dtoa_r+0x32>
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	3202      	adds	r2, #2
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	f107 010c 	add.w	r1, r7, #12
 80067e8:	300c      	adds	r0, #12
 80067ea:	f002 f95f 	bl	8008aac <memcpy>
 80067ee:	2201      	movs	r2, #1
 80067f0:	4629      	mov	r1, r5
 80067f2:	4620      	mov	r0, r4
 80067f4:	f000 fc54 	bl	80070a0 <__lshift>
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006802:	4413      	add	r3, r2
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	9b02      	ldr	r3, [sp, #8]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	46b8      	mov	r8, r7
 800680e:	9306      	str	r3, [sp, #24]
 8006810:	4607      	mov	r7, r0
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	4631      	mov	r1, r6
 8006816:	3b01      	subs	r3, #1
 8006818:	4650      	mov	r0, sl
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	f7ff fa6c 	bl	8005cf8 <quorem>
 8006820:	4641      	mov	r1, r8
 8006822:	9002      	str	r0, [sp, #8]
 8006824:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006828:	4650      	mov	r0, sl
 800682a:	f000 fca5 	bl	8007178 <__mcmp>
 800682e:	463a      	mov	r2, r7
 8006830:	9005      	str	r0, [sp, #20]
 8006832:	4631      	mov	r1, r6
 8006834:	4620      	mov	r0, r4
 8006836:	f000 fcbb 	bl	80071b0 <__mdiff>
 800683a:	68c2      	ldr	r2, [r0, #12]
 800683c:	4605      	mov	r5, r0
 800683e:	bb02      	cbnz	r2, 8006882 <_dtoa_r+0xa7a>
 8006840:	4601      	mov	r1, r0
 8006842:	4650      	mov	r0, sl
 8006844:	f000 fc98 	bl	8007178 <__mcmp>
 8006848:	4602      	mov	r2, r0
 800684a:	4629      	mov	r1, r5
 800684c:	4620      	mov	r0, r4
 800684e:	9209      	str	r2, [sp, #36]	; 0x24
 8006850:	f000 fa0c 	bl	8006c6c <_Bfree>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006858:	9d04      	ldr	r5, [sp, #16]
 800685a:	ea43 0102 	orr.w	r1, r3, r2
 800685e:	9b06      	ldr	r3, [sp, #24]
 8006860:	4319      	orrs	r1, r3
 8006862:	d110      	bne.n	8006886 <_dtoa_r+0xa7e>
 8006864:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006868:	d029      	beq.n	80068be <_dtoa_r+0xab6>
 800686a:	9b05      	ldr	r3, [sp, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dd02      	ble.n	8006876 <_dtoa_r+0xa6e>
 8006870:	9b02      	ldr	r3, [sp, #8]
 8006872:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	f883 9000 	strb.w	r9, [r3]
 800687c:	e774      	b.n	8006768 <_dtoa_r+0x960>
 800687e:	4638      	mov	r0, r7
 8006880:	e7ba      	b.n	80067f8 <_dtoa_r+0x9f0>
 8006882:	2201      	movs	r2, #1
 8006884:	e7e1      	b.n	800684a <_dtoa_r+0xa42>
 8006886:	9b05      	ldr	r3, [sp, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db04      	blt.n	8006896 <_dtoa_r+0xa8e>
 800688c:	9907      	ldr	r1, [sp, #28]
 800688e:	430b      	orrs	r3, r1
 8006890:	9906      	ldr	r1, [sp, #24]
 8006892:	430b      	orrs	r3, r1
 8006894:	d120      	bne.n	80068d8 <_dtoa_r+0xad0>
 8006896:	2a00      	cmp	r2, #0
 8006898:	dded      	ble.n	8006876 <_dtoa_r+0xa6e>
 800689a:	4651      	mov	r1, sl
 800689c:	2201      	movs	r2, #1
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fbfe 	bl	80070a0 <__lshift>
 80068a4:	4631      	mov	r1, r6
 80068a6:	4682      	mov	sl, r0
 80068a8:	f000 fc66 	bl	8007178 <__mcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	dc03      	bgt.n	80068b8 <_dtoa_r+0xab0>
 80068b0:	d1e1      	bne.n	8006876 <_dtoa_r+0xa6e>
 80068b2:	f019 0f01 	tst.w	r9, #1
 80068b6:	d0de      	beq.n	8006876 <_dtoa_r+0xa6e>
 80068b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068bc:	d1d8      	bne.n	8006870 <_dtoa_r+0xa68>
 80068be:	9a01      	ldr	r2, [sp, #4]
 80068c0:	2339      	movs	r3, #57	; 0x39
 80068c2:	7013      	strb	r3, [r2, #0]
 80068c4:	462b      	mov	r3, r5
 80068c6:	461d      	mov	r5, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068ce:	2a39      	cmp	r2, #57	; 0x39
 80068d0:	d06c      	beq.n	80069ac <_dtoa_r+0xba4>
 80068d2:	3201      	adds	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	e747      	b.n	8006768 <_dtoa_r+0x960>
 80068d8:	2a00      	cmp	r2, #0
 80068da:	dd07      	ble.n	80068ec <_dtoa_r+0xae4>
 80068dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80068e0:	d0ed      	beq.n	80068be <_dtoa_r+0xab6>
 80068e2:	9a01      	ldr	r2, [sp, #4]
 80068e4:	f109 0301 	add.w	r3, r9, #1
 80068e8:	7013      	strb	r3, [r2, #0]
 80068ea:	e73d      	b.n	8006768 <_dtoa_r+0x960>
 80068ec:	9b04      	ldr	r3, [sp, #16]
 80068ee:	9a08      	ldr	r2, [sp, #32]
 80068f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d043      	beq.n	8006980 <_dtoa_r+0xb78>
 80068f8:	4651      	mov	r1, sl
 80068fa:	2300      	movs	r3, #0
 80068fc:	220a      	movs	r2, #10
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f9d6 	bl	8006cb0 <__multadd>
 8006904:	45b8      	cmp	r8, r7
 8006906:	4682      	mov	sl, r0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	f04f 020a 	mov.w	r2, #10
 8006910:	4641      	mov	r1, r8
 8006912:	4620      	mov	r0, r4
 8006914:	d107      	bne.n	8006926 <_dtoa_r+0xb1e>
 8006916:	f000 f9cb 	bl	8006cb0 <__multadd>
 800691a:	4680      	mov	r8, r0
 800691c:	4607      	mov	r7, r0
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	3301      	adds	r3, #1
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	e775      	b.n	8006812 <_dtoa_r+0xa0a>
 8006926:	f000 f9c3 	bl	8006cb0 <__multadd>
 800692a:	4639      	mov	r1, r7
 800692c:	4680      	mov	r8, r0
 800692e:	2300      	movs	r3, #0
 8006930:	220a      	movs	r2, #10
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f9bc 	bl	8006cb0 <__multadd>
 8006938:	4607      	mov	r7, r0
 800693a:	e7f0      	b.n	800691e <_dtoa_r+0xb16>
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	9d00      	ldr	r5, [sp, #0]
 8006942:	4631      	mov	r1, r6
 8006944:	4650      	mov	r0, sl
 8006946:	f7ff f9d7 	bl	8005cf8 <quorem>
 800694a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800694e:	9b00      	ldr	r3, [sp, #0]
 8006950:	f805 9b01 	strb.w	r9, [r5], #1
 8006954:	1aea      	subs	r2, r5, r3
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	4293      	cmp	r3, r2
 800695a:	dd07      	ble.n	800696c <_dtoa_r+0xb64>
 800695c:	4651      	mov	r1, sl
 800695e:	2300      	movs	r3, #0
 8006960:	220a      	movs	r2, #10
 8006962:	4620      	mov	r0, r4
 8006964:	f000 f9a4 	bl	8006cb0 <__multadd>
 8006968:	4682      	mov	sl, r0
 800696a:	e7ea      	b.n	8006942 <_dtoa_r+0xb3a>
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfc8      	it	gt
 8006972:	461d      	movgt	r5, r3
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	bfd8      	it	le
 8006978:	2501      	movle	r5, #1
 800697a:	441d      	add	r5, r3
 800697c:	f04f 0800 	mov.w	r8, #0
 8006980:	4651      	mov	r1, sl
 8006982:	2201      	movs	r2, #1
 8006984:	4620      	mov	r0, r4
 8006986:	f000 fb8b 	bl	80070a0 <__lshift>
 800698a:	4631      	mov	r1, r6
 800698c:	4682      	mov	sl, r0
 800698e:	f000 fbf3 	bl	8007178 <__mcmp>
 8006992:	2800      	cmp	r0, #0
 8006994:	dc96      	bgt.n	80068c4 <_dtoa_r+0xabc>
 8006996:	d102      	bne.n	800699e <_dtoa_r+0xb96>
 8006998:	f019 0f01 	tst.w	r9, #1
 800699c:	d192      	bne.n	80068c4 <_dtoa_r+0xabc>
 800699e:	462b      	mov	r3, r5
 80069a0:	461d      	mov	r5, r3
 80069a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069a6:	2a30      	cmp	r2, #48	; 0x30
 80069a8:	d0fa      	beq.n	80069a0 <_dtoa_r+0xb98>
 80069aa:	e6dd      	b.n	8006768 <_dtoa_r+0x960>
 80069ac:	9a00      	ldr	r2, [sp, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d189      	bne.n	80068c6 <_dtoa_r+0xabe>
 80069b2:	f10b 0b01 	add.w	fp, fp, #1
 80069b6:	2331      	movs	r3, #49	; 0x31
 80069b8:	e796      	b.n	80068e8 <_dtoa_r+0xae0>
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <_dtoa_r+0xbdc>)
 80069bc:	f7ff ba99 	b.w	8005ef2 <_dtoa_r+0xea>
 80069c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f47f aa6d 	bne.w	8005ea2 <_dtoa_r+0x9a>
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <_dtoa_r+0xbe0>)
 80069ca:	f7ff ba92 	b.w	8005ef2 <_dtoa_r+0xea>
 80069ce:	9b01      	ldr	r3, [sp, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dcb5      	bgt.n	8006940 <_dtoa_r+0xb38>
 80069d4:	9b07      	ldr	r3, [sp, #28]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	f73f aeb1 	bgt.w	800673e <_dtoa_r+0x936>
 80069dc:	e7b0      	b.n	8006940 <_dtoa_r+0xb38>
 80069de:	bf00      	nop
 80069e0:	08009545 	.word	0x08009545
 80069e4:	080094a0 	.word	0x080094a0
 80069e8:	080094c9 	.word	0x080094c9

080069ec <_free_r>:
 80069ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d044      	beq.n	8006a7c <_free_r+0x90>
 80069f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f6:	9001      	str	r0, [sp, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f1a1 0404 	sub.w	r4, r1, #4
 80069fe:	bfb8      	it	lt
 8006a00:	18e4      	addlt	r4, r4, r3
 8006a02:	f000 f8e7 	bl	8006bd4 <__malloc_lock>
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <_free_r+0x94>)
 8006a08:	9801      	ldr	r0, [sp, #4]
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x30>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	b003      	add	sp, #12
 8006a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a18:	f000 b8e2 	b.w	8006be0 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x46>
 8006a20:	6825      	ldr	r5, [r4, #0]
 8006a22:	1961      	adds	r1, r4, r5
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1949      	addeq	r1, r1, r5
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x22>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x50>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x46>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1855      	adds	r5, r2, r1
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x70>
 8006a44:	6824      	ldr	r4, [r4, #0]
 8006a46:	4421      	add	r1, r4
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	42a3      	cmp	r3, r4
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x26>
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	440c      	add	r4, r1
 8006a58:	6014      	str	r4, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x26>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x78>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x26>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1949      	addeq	r1, r1, r5
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x26>
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bd30      	pop	{r4, r5, pc}
 8006a80:	20000548 	.word	0x20000548

08006a84 <malloc>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <malloc+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f000 b823 	b.w	8006ad4 <_malloc_r>
 8006a8e:	bf00      	nop
 8006a90:	20000064 	.word	0x20000064

08006a94 <sbrk_aligned>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4e0e      	ldr	r6, [pc, #56]	; (8006ad0 <sbrk_aligned+0x3c>)
 8006a98:	460c      	mov	r4, r1
 8006a9a:	6831      	ldr	r1, [r6, #0]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b911      	cbnz	r1, 8006aa6 <sbrk_aligned+0x12>
 8006aa0:	f001 fff4 	bl	8008a8c <_sbrk_r>
 8006aa4:	6030      	str	r0, [r6, #0]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f001 ffef 	bl	8008a8c <_sbrk_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d00a      	beq.n	8006ac8 <sbrk_aligned+0x34>
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d007      	beq.n	8006acc <sbrk_aligned+0x38>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f001 ffe4 	bl	8008a8c <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d101      	bne.n	8006acc <sbrk_aligned+0x38>
 8006ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8006acc:	4620      	mov	r0, r4
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	2000054c 	.word	0x2000054c

08006ad4 <_malloc_r>:
 8006ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad8:	1ccd      	adds	r5, r1, #3
 8006ada:	f025 0503 	bic.w	r5, r5, #3
 8006ade:	3508      	adds	r5, #8
 8006ae0:	2d0c      	cmp	r5, #12
 8006ae2:	bf38      	it	cc
 8006ae4:	250c      	movcc	r5, #12
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	4607      	mov	r7, r0
 8006aea:	db01      	blt.n	8006af0 <_malloc_r+0x1c>
 8006aec:	42a9      	cmp	r1, r5
 8006aee:	d905      	bls.n	8006afc <_malloc_r+0x28>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	2600      	movs	r6, #0
 8006af6:	4630      	mov	r0, r6
 8006af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006bd0 <_malloc_r+0xfc>
 8006b00:	f000 f868 	bl	8006bd4 <__malloc_lock>
 8006b04:	f8d8 3000 	ldr.w	r3, [r8]
 8006b08:	461c      	mov	r4, r3
 8006b0a:	bb5c      	cbnz	r4, 8006b64 <_malloc_r+0x90>
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4638      	mov	r0, r7
 8006b10:	f7ff ffc0 	bl	8006a94 <sbrk_aligned>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	4604      	mov	r4, r0
 8006b18:	d155      	bne.n	8006bc6 <_malloc_r+0xf2>
 8006b1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006b1e:	4626      	mov	r6, r4
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d145      	bne.n	8006bb0 <_malloc_r+0xdc>
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d048      	beq.n	8006bba <_malloc_r+0xe6>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	eb04 0903 	add.w	r9, r4, r3
 8006b32:	f001 ffab 	bl	8008a8c <_sbrk_r>
 8006b36:	4581      	cmp	r9, r0
 8006b38:	d13f      	bne.n	8006bba <_malloc_r+0xe6>
 8006b3a:	6821      	ldr	r1, [r4, #0]
 8006b3c:	1a6d      	subs	r5, r5, r1
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4638      	mov	r0, r7
 8006b42:	f7ff ffa7 	bl	8006a94 <sbrk_aligned>
 8006b46:	3001      	adds	r0, #1
 8006b48:	d037      	beq.n	8006bba <_malloc_r+0xe6>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	442b      	add	r3, r5
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	f8d8 3000 	ldr.w	r3, [r8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d038      	beq.n	8006bca <_malloc_r+0xf6>
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	42a2      	cmp	r2, r4
 8006b5c:	d12b      	bne.n	8006bb6 <_malloc_r+0xe2>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	e00f      	b.n	8006b84 <_malloc_r+0xb0>
 8006b64:	6822      	ldr	r2, [r4, #0]
 8006b66:	1b52      	subs	r2, r2, r5
 8006b68:	d41f      	bmi.n	8006baa <_malloc_r+0xd6>
 8006b6a:	2a0b      	cmp	r2, #11
 8006b6c:	d917      	bls.n	8006b9e <_malloc_r+0xca>
 8006b6e:	1961      	adds	r1, r4, r5
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	6025      	str	r5, [r4, #0]
 8006b74:	bf18      	it	ne
 8006b76:	6059      	strne	r1, [r3, #4]
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	bf08      	it	eq
 8006b7c:	f8c8 1000 	streq.w	r1, [r8]
 8006b80:	5162      	str	r2, [r4, r5]
 8006b82:	604b      	str	r3, [r1, #4]
 8006b84:	4638      	mov	r0, r7
 8006b86:	f104 060b 	add.w	r6, r4, #11
 8006b8a:	f000 f829 	bl	8006be0 <__malloc_unlock>
 8006b8e:	f026 0607 	bic.w	r6, r6, #7
 8006b92:	1d23      	adds	r3, r4, #4
 8006b94:	1af2      	subs	r2, r6, r3
 8006b96:	d0ae      	beq.n	8006af6 <_malloc_r+0x22>
 8006b98:	1b9b      	subs	r3, r3, r6
 8006b9a:	50a3      	str	r3, [r4, r2]
 8006b9c:	e7ab      	b.n	8006af6 <_malloc_r+0x22>
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	6862      	ldr	r2, [r4, #4]
 8006ba2:	d1dd      	bne.n	8006b60 <_malloc_r+0x8c>
 8006ba4:	f8c8 2000 	str.w	r2, [r8]
 8006ba8:	e7ec      	b.n	8006b84 <_malloc_r+0xb0>
 8006baa:	4623      	mov	r3, r4
 8006bac:	6864      	ldr	r4, [r4, #4]
 8006bae:	e7ac      	b.n	8006b0a <_malloc_r+0x36>
 8006bb0:	4634      	mov	r4, r6
 8006bb2:	6876      	ldr	r6, [r6, #4]
 8006bb4:	e7b4      	b.n	8006b20 <_malloc_r+0x4c>
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	e7cc      	b.n	8006b54 <_malloc_r+0x80>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f000 f80e 	bl	8006be0 <__malloc_unlock>
 8006bc4:	e797      	b.n	8006af6 <_malloc_r+0x22>
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	e7dc      	b.n	8006b84 <_malloc_r+0xb0>
 8006bca:	605b      	str	r3, [r3, #4]
 8006bcc:	deff      	udf	#255	; 0xff
 8006bce:	bf00      	nop
 8006bd0:	20000548 	.word	0x20000548

08006bd4 <__malloc_lock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	; (8006bdc <__malloc_lock+0x8>)
 8006bd6:	f7ff b886 	b.w	8005ce6 <__retarget_lock_acquire_recursive>
 8006bda:	bf00      	nop
 8006bdc:	20000544 	.word	0x20000544

08006be0 <__malloc_unlock>:
 8006be0:	4801      	ldr	r0, [pc, #4]	; (8006be8 <__malloc_unlock+0x8>)
 8006be2:	f7ff b881 	b.w	8005ce8 <__retarget_lock_release_recursive>
 8006be6:	bf00      	nop
 8006be8:	20000544 	.word	0x20000544

08006bec <_Balloc>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	69c6      	ldr	r6, [r0, #28]
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	b976      	cbnz	r6, 8006c14 <_Balloc+0x28>
 8006bf6:	2010      	movs	r0, #16
 8006bf8:	f7ff ff44 	bl	8006a84 <malloc>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	61e0      	str	r0, [r4, #28]
 8006c00:	b920      	cbnz	r0, 8006c0c <_Balloc+0x20>
 8006c02:	4b18      	ldr	r3, [pc, #96]	; (8006c64 <_Balloc+0x78>)
 8006c04:	4818      	ldr	r0, [pc, #96]	; (8006c68 <_Balloc+0x7c>)
 8006c06:	216b      	movs	r1, #107	; 0x6b
 8006c08:	f001 ff66 	bl	8008ad8 <__assert_func>
 8006c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c10:	6006      	str	r6, [r0, #0]
 8006c12:	60c6      	str	r6, [r0, #12]
 8006c14:	69e6      	ldr	r6, [r4, #28]
 8006c16:	68f3      	ldr	r3, [r6, #12]
 8006c18:	b183      	cbz	r3, 8006c3c <_Balloc+0x50>
 8006c1a:	69e3      	ldr	r3, [r4, #28]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c22:	b9b8      	cbnz	r0, 8006c54 <_Balloc+0x68>
 8006c24:	2101      	movs	r1, #1
 8006c26:	fa01 f605 	lsl.w	r6, r1, r5
 8006c2a:	1d72      	adds	r2, r6, #5
 8006c2c:	0092      	lsls	r2, r2, #2
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f001 ff70 	bl	8008b14 <_calloc_r>
 8006c34:	b160      	cbz	r0, 8006c50 <_Balloc+0x64>
 8006c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c3a:	e00e      	b.n	8006c5a <_Balloc+0x6e>
 8006c3c:	2221      	movs	r2, #33	; 0x21
 8006c3e:	2104      	movs	r1, #4
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 ff67 	bl	8008b14 <_calloc_r>
 8006c46:	69e3      	ldr	r3, [r4, #28]
 8006c48:	60f0      	str	r0, [r6, #12]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e4      	bne.n	8006c1a <_Balloc+0x2e>
 8006c50:	2000      	movs	r0, #0
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	6802      	ldr	r2, [r0, #0]
 8006c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c60:	e7f7      	b.n	8006c52 <_Balloc+0x66>
 8006c62:	bf00      	nop
 8006c64:	080094d6 	.word	0x080094d6
 8006c68:	08009556 	.word	0x08009556

08006c6c <_Bfree>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	69c6      	ldr	r6, [r0, #28]
 8006c70:	4605      	mov	r5, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	b976      	cbnz	r6, 8006c94 <_Bfree+0x28>
 8006c76:	2010      	movs	r0, #16
 8006c78:	f7ff ff04 	bl	8006a84 <malloc>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	61e8      	str	r0, [r5, #28]
 8006c80:	b920      	cbnz	r0, 8006c8c <_Bfree+0x20>
 8006c82:	4b09      	ldr	r3, [pc, #36]	; (8006ca8 <_Bfree+0x3c>)
 8006c84:	4809      	ldr	r0, [pc, #36]	; (8006cac <_Bfree+0x40>)
 8006c86:	218f      	movs	r1, #143	; 0x8f
 8006c88:	f001 ff26 	bl	8008ad8 <__assert_func>
 8006c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c90:	6006      	str	r6, [r0, #0]
 8006c92:	60c6      	str	r6, [r0, #12]
 8006c94:	b13c      	cbz	r4, 8006ca6 <_Bfree+0x3a>
 8006c96:	69eb      	ldr	r3, [r5, #28]
 8006c98:	6862      	ldr	r2, [r4, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ca0:	6021      	str	r1, [r4, #0]
 8006ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	080094d6 	.word	0x080094d6
 8006cac:	08009556 	.word	0x08009556

08006cb0 <__multadd>:
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	690d      	ldr	r5, [r1, #16]
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	461e      	mov	r6, r3
 8006cbc:	f101 0c14 	add.w	ip, r1, #20
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006cc6:	b299      	uxth	r1, r3
 8006cc8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ccc:	0c1e      	lsrs	r6, r3, #16
 8006cce:	0c0b      	lsrs	r3, r1, #16
 8006cd0:	fb02 3306 	mla	r3, r2, r6, r3
 8006cd4:	b289      	uxth	r1, r1
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cdc:	4285      	cmp	r5, r0
 8006cde:	f84c 1b04 	str.w	r1, [ip], #4
 8006ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ce6:	dcec      	bgt.n	8006cc2 <__multadd+0x12>
 8006ce8:	b30e      	cbz	r6, 8006d2e <__multadd+0x7e>
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dc19      	bgt.n	8006d24 <__multadd+0x74>
 8006cf0:	6861      	ldr	r1, [r4, #4]
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	3101      	adds	r1, #1
 8006cf6:	f7ff ff79 	bl	8006bec <_Balloc>
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	b928      	cbnz	r0, 8006d0a <__multadd+0x5a>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <__multadd+0x84>)
 8006d02:	480d      	ldr	r0, [pc, #52]	; (8006d38 <__multadd+0x88>)
 8006d04:	21ba      	movs	r1, #186	; 0xba
 8006d06:	f001 fee7 	bl	8008ad8 <__assert_func>
 8006d0a:	6922      	ldr	r2, [r4, #16]
 8006d0c:	3202      	adds	r2, #2
 8006d0e:	f104 010c 	add.w	r1, r4, #12
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	300c      	adds	r0, #12
 8006d16:	f001 fec9 	bl	8008aac <memcpy>
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f7ff ffa5 	bl	8006c6c <_Bfree>
 8006d22:	4644      	mov	r4, r8
 8006d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d28:	3501      	adds	r5, #1
 8006d2a:	615e      	str	r6, [r3, #20]
 8006d2c:	6125      	str	r5, [r4, #16]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	08009545 	.word	0x08009545
 8006d38:	08009556 	.word	0x08009556

08006d3c <__s2b>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	460c      	mov	r4, r1
 8006d42:	4615      	mov	r5, r2
 8006d44:	461f      	mov	r7, r3
 8006d46:	2209      	movs	r2, #9
 8006d48:	3308      	adds	r3, #8
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d50:	2100      	movs	r1, #0
 8006d52:	2201      	movs	r2, #1
 8006d54:	429a      	cmp	r2, r3
 8006d56:	db09      	blt.n	8006d6c <__s2b+0x30>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff ff47 	bl	8006bec <_Balloc>
 8006d5e:	b940      	cbnz	r0, 8006d72 <__s2b+0x36>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <__s2b+0x8c>)
 8006d64:	4819      	ldr	r0, [pc, #100]	; (8006dcc <__s2b+0x90>)
 8006d66:	21d3      	movs	r1, #211	; 0xd3
 8006d68:	f001 feb6 	bl	8008ad8 <__assert_func>
 8006d6c:	0052      	lsls	r2, r2, #1
 8006d6e:	3101      	adds	r1, #1
 8006d70:	e7f0      	b.n	8006d54 <__s2b+0x18>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	6143      	str	r3, [r0, #20]
 8006d76:	2d09      	cmp	r5, #9
 8006d78:	f04f 0301 	mov.w	r3, #1
 8006d7c:	6103      	str	r3, [r0, #16]
 8006d7e:	dd16      	ble.n	8006dae <__s2b+0x72>
 8006d80:	f104 0909 	add.w	r9, r4, #9
 8006d84:	46c8      	mov	r8, r9
 8006d86:	442c      	add	r4, r5
 8006d88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d8c:	4601      	mov	r1, r0
 8006d8e:	3b30      	subs	r3, #48	; 0x30
 8006d90:	220a      	movs	r2, #10
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7ff ff8c 	bl	8006cb0 <__multadd>
 8006d98:	45a0      	cmp	r8, r4
 8006d9a:	d1f5      	bne.n	8006d88 <__s2b+0x4c>
 8006d9c:	f1a5 0408 	sub.w	r4, r5, #8
 8006da0:	444c      	add	r4, r9
 8006da2:	1b2d      	subs	r5, r5, r4
 8006da4:	1963      	adds	r3, r4, r5
 8006da6:	42bb      	cmp	r3, r7
 8006da8:	db04      	blt.n	8006db4 <__s2b+0x78>
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	340a      	adds	r4, #10
 8006db0:	2509      	movs	r5, #9
 8006db2:	e7f6      	b.n	8006da2 <__s2b+0x66>
 8006db4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006db8:	4601      	mov	r1, r0
 8006dba:	3b30      	subs	r3, #48	; 0x30
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f7ff ff76 	bl	8006cb0 <__multadd>
 8006dc4:	e7ee      	b.n	8006da4 <__s2b+0x68>
 8006dc6:	bf00      	nop
 8006dc8:	08009545 	.word	0x08009545
 8006dcc:	08009556 	.word	0x08009556

08006dd0 <__hi0bits>:
 8006dd0:	0c03      	lsrs	r3, r0, #16
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	b9d3      	cbnz	r3, 8006e0c <__hi0bits+0x3c>
 8006dd6:	0400      	lsls	r0, r0, #16
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dde:	bf04      	itt	eq
 8006de0:	0200      	lsleq	r0, r0, #8
 8006de2:	3308      	addeq	r3, #8
 8006de4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006de8:	bf04      	itt	eq
 8006dea:	0100      	lsleq	r0, r0, #4
 8006dec:	3304      	addeq	r3, #4
 8006dee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006df2:	bf04      	itt	eq
 8006df4:	0080      	lsleq	r0, r0, #2
 8006df6:	3302      	addeq	r3, #2
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	db05      	blt.n	8006e08 <__hi0bits+0x38>
 8006dfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006e00:	f103 0301 	add.w	r3, r3, #1
 8006e04:	bf08      	it	eq
 8006e06:	2320      	moveq	r3, #32
 8006e08:	4618      	mov	r0, r3
 8006e0a:	4770      	bx	lr
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e7e4      	b.n	8006dda <__hi0bits+0xa>

08006e10 <__lo0bits>:
 8006e10:	6803      	ldr	r3, [r0, #0]
 8006e12:	f013 0207 	ands.w	r2, r3, #7
 8006e16:	d00c      	beq.n	8006e32 <__lo0bits+0x22>
 8006e18:	07d9      	lsls	r1, r3, #31
 8006e1a:	d422      	bmi.n	8006e62 <__lo0bits+0x52>
 8006e1c:	079a      	lsls	r2, r3, #30
 8006e1e:	bf49      	itett	mi
 8006e20:	085b      	lsrmi	r3, r3, #1
 8006e22:	089b      	lsrpl	r3, r3, #2
 8006e24:	6003      	strmi	r3, [r0, #0]
 8006e26:	2201      	movmi	r2, #1
 8006e28:	bf5c      	itt	pl
 8006e2a:	6003      	strpl	r3, [r0, #0]
 8006e2c:	2202      	movpl	r2, #2
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4770      	bx	lr
 8006e32:	b299      	uxth	r1, r3
 8006e34:	b909      	cbnz	r1, 8006e3a <__lo0bits+0x2a>
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	2210      	movs	r2, #16
 8006e3a:	b2d9      	uxtb	r1, r3
 8006e3c:	b909      	cbnz	r1, 8006e42 <__lo0bits+0x32>
 8006e3e:	3208      	adds	r2, #8
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	0719      	lsls	r1, r3, #28
 8006e44:	bf04      	itt	eq
 8006e46:	091b      	lsreq	r3, r3, #4
 8006e48:	3204      	addeq	r2, #4
 8006e4a:	0799      	lsls	r1, r3, #30
 8006e4c:	bf04      	itt	eq
 8006e4e:	089b      	lsreq	r3, r3, #2
 8006e50:	3202      	addeq	r2, #2
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d403      	bmi.n	8006e5e <__lo0bits+0x4e>
 8006e56:	085b      	lsrs	r3, r3, #1
 8006e58:	f102 0201 	add.w	r2, r2, #1
 8006e5c:	d003      	beq.n	8006e66 <__lo0bits+0x56>
 8006e5e:	6003      	str	r3, [r0, #0]
 8006e60:	e7e5      	b.n	8006e2e <__lo0bits+0x1e>
 8006e62:	2200      	movs	r2, #0
 8006e64:	e7e3      	b.n	8006e2e <__lo0bits+0x1e>
 8006e66:	2220      	movs	r2, #32
 8006e68:	e7e1      	b.n	8006e2e <__lo0bits+0x1e>
	...

08006e6c <__i2b>:
 8006e6c:	b510      	push	{r4, lr}
 8006e6e:	460c      	mov	r4, r1
 8006e70:	2101      	movs	r1, #1
 8006e72:	f7ff febb 	bl	8006bec <_Balloc>
 8006e76:	4602      	mov	r2, r0
 8006e78:	b928      	cbnz	r0, 8006e86 <__i2b+0x1a>
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <__i2b+0x24>)
 8006e7c:	4805      	ldr	r0, [pc, #20]	; (8006e94 <__i2b+0x28>)
 8006e7e:	f240 1145 	movw	r1, #325	; 0x145
 8006e82:	f001 fe29 	bl	8008ad8 <__assert_func>
 8006e86:	2301      	movs	r3, #1
 8006e88:	6144      	str	r4, [r0, #20]
 8006e8a:	6103      	str	r3, [r0, #16]
 8006e8c:	bd10      	pop	{r4, pc}
 8006e8e:	bf00      	nop
 8006e90:	08009545 	.word	0x08009545
 8006e94:	08009556 	.word	0x08009556

08006e98 <__multiply>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	4691      	mov	r9, r2
 8006e9e:	690a      	ldr	r2, [r1, #16]
 8006ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	bfb8      	it	lt
 8006ea8:	460b      	movlt	r3, r1
 8006eaa:	460c      	mov	r4, r1
 8006eac:	bfbc      	itt	lt
 8006eae:	464c      	movlt	r4, r9
 8006eb0:	4699      	movlt	r9, r3
 8006eb2:	6927      	ldr	r7, [r4, #16]
 8006eb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006eb8:	68a3      	ldr	r3, [r4, #8]
 8006eba:	6861      	ldr	r1, [r4, #4]
 8006ebc:	eb07 060a 	add.w	r6, r7, sl
 8006ec0:	42b3      	cmp	r3, r6
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	bfb8      	it	lt
 8006ec6:	3101      	addlt	r1, #1
 8006ec8:	f7ff fe90 	bl	8006bec <_Balloc>
 8006ecc:	b930      	cbnz	r0, 8006edc <__multiply+0x44>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b44      	ldr	r3, [pc, #272]	; (8006fe4 <__multiply+0x14c>)
 8006ed2:	4845      	ldr	r0, [pc, #276]	; (8006fe8 <__multiply+0x150>)
 8006ed4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ed8:	f001 fdfe 	bl	8008ad8 <__assert_func>
 8006edc:	f100 0514 	add.w	r5, r0, #20
 8006ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ee4:	462b      	mov	r3, r5
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	4543      	cmp	r3, r8
 8006eea:	d321      	bcc.n	8006f30 <__multiply+0x98>
 8006eec:	f104 0314 	add.w	r3, r4, #20
 8006ef0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ef4:	f109 0314 	add.w	r3, r9, #20
 8006ef8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006efc:	9202      	str	r2, [sp, #8]
 8006efe:	1b3a      	subs	r2, r7, r4
 8006f00:	3a15      	subs	r2, #21
 8006f02:	f022 0203 	bic.w	r2, r2, #3
 8006f06:	3204      	adds	r2, #4
 8006f08:	f104 0115 	add.w	r1, r4, #21
 8006f0c:	428f      	cmp	r7, r1
 8006f0e:	bf38      	it	cc
 8006f10:	2204      	movcc	r2, #4
 8006f12:	9201      	str	r2, [sp, #4]
 8006f14:	9a02      	ldr	r2, [sp, #8]
 8006f16:	9303      	str	r3, [sp, #12]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d80c      	bhi.n	8006f36 <__multiply+0x9e>
 8006f1c:	2e00      	cmp	r6, #0
 8006f1e:	dd03      	ble.n	8006f28 <__multiply+0x90>
 8006f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d05b      	beq.n	8006fe0 <__multiply+0x148>
 8006f28:	6106      	str	r6, [r0, #16]
 8006f2a:	b005      	add	sp, #20
 8006f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	f843 2b04 	str.w	r2, [r3], #4
 8006f34:	e7d8      	b.n	8006ee8 <__multiply+0x50>
 8006f36:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	d024      	beq.n	8006f8a <__multiply+0xf2>
 8006f40:	f104 0e14 	add.w	lr, r4, #20
 8006f44:	46a9      	mov	r9, r5
 8006f46:	f04f 0c00 	mov.w	ip, #0
 8006f4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8006f52:	fa1f fb82 	uxth.w	fp, r2
 8006f56:	b289      	uxth	r1, r1
 8006f58:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f60:	f8d9 2000 	ldr.w	r2, [r9]
 8006f64:	4461      	add	r1, ip
 8006f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f72:	b289      	uxth	r1, r1
 8006f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f78:	4577      	cmp	r7, lr
 8006f7a:	f849 1b04 	str.w	r1, [r9], #4
 8006f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f82:	d8e2      	bhi.n	8006f4a <__multiply+0xb2>
 8006f84:	9a01      	ldr	r2, [sp, #4]
 8006f86:	f845 c002 	str.w	ip, [r5, r2]
 8006f8a:	9a03      	ldr	r2, [sp, #12]
 8006f8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f90:	3304      	adds	r3, #4
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	d021      	beq.n	8006fdc <__multiply+0x144>
 8006f98:	6829      	ldr	r1, [r5, #0]
 8006f9a:	f104 0c14 	add.w	ip, r4, #20
 8006f9e:	46ae      	mov	lr, r5
 8006fa0:	f04f 0a00 	mov.w	sl, #0
 8006fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8006fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fac:	fb09 220b 	mla	r2, r9, fp, r2
 8006fb0:	4452      	add	r2, sl
 8006fb2:	b289      	uxth	r1, r1
 8006fb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8006fbc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006fc0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fc4:	f8be 1000 	ldrh.w	r1, [lr]
 8006fc8:	fb09 110a 	mla	r1, r9, sl, r1
 8006fcc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006fd0:	4567      	cmp	r7, ip
 8006fd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fd6:	d8e5      	bhi.n	8006fa4 <__multiply+0x10c>
 8006fd8:	9a01      	ldr	r2, [sp, #4]
 8006fda:	50a9      	str	r1, [r5, r2]
 8006fdc:	3504      	adds	r5, #4
 8006fde:	e799      	b.n	8006f14 <__multiply+0x7c>
 8006fe0:	3e01      	subs	r6, #1
 8006fe2:	e79b      	b.n	8006f1c <__multiply+0x84>
 8006fe4:	08009545 	.word	0x08009545
 8006fe8:	08009556 	.word	0x08009556

08006fec <__pow5mult>:
 8006fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff0:	4615      	mov	r5, r2
 8006ff2:	f012 0203 	ands.w	r2, r2, #3
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	d007      	beq.n	800700c <__pow5mult+0x20>
 8006ffc:	4c25      	ldr	r4, [pc, #148]	; (8007094 <__pow5mult+0xa8>)
 8006ffe:	3a01      	subs	r2, #1
 8007000:	2300      	movs	r3, #0
 8007002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007006:	f7ff fe53 	bl	8006cb0 <__multadd>
 800700a:	4607      	mov	r7, r0
 800700c:	10ad      	asrs	r5, r5, #2
 800700e:	d03d      	beq.n	800708c <__pow5mult+0xa0>
 8007010:	69f4      	ldr	r4, [r6, #28]
 8007012:	b97c      	cbnz	r4, 8007034 <__pow5mult+0x48>
 8007014:	2010      	movs	r0, #16
 8007016:	f7ff fd35 	bl	8006a84 <malloc>
 800701a:	4602      	mov	r2, r0
 800701c:	61f0      	str	r0, [r6, #28]
 800701e:	b928      	cbnz	r0, 800702c <__pow5mult+0x40>
 8007020:	4b1d      	ldr	r3, [pc, #116]	; (8007098 <__pow5mult+0xac>)
 8007022:	481e      	ldr	r0, [pc, #120]	; (800709c <__pow5mult+0xb0>)
 8007024:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007028:	f001 fd56 	bl	8008ad8 <__assert_func>
 800702c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007030:	6004      	str	r4, [r0, #0]
 8007032:	60c4      	str	r4, [r0, #12]
 8007034:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800703c:	b94c      	cbnz	r4, 8007052 <__pow5mult+0x66>
 800703e:	f240 2171 	movw	r1, #625	; 0x271
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ff12 	bl	8006e6c <__i2b>
 8007048:	2300      	movs	r3, #0
 800704a:	f8c8 0008 	str.w	r0, [r8, #8]
 800704e:	4604      	mov	r4, r0
 8007050:	6003      	str	r3, [r0, #0]
 8007052:	f04f 0900 	mov.w	r9, #0
 8007056:	07eb      	lsls	r3, r5, #31
 8007058:	d50a      	bpl.n	8007070 <__pow5mult+0x84>
 800705a:	4639      	mov	r1, r7
 800705c:	4622      	mov	r2, r4
 800705e:	4630      	mov	r0, r6
 8007060:	f7ff ff1a 	bl	8006e98 <__multiply>
 8007064:	4639      	mov	r1, r7
 8007066:	4680      	mov	r8, r0
 8007068:	4630      	mov	r0, r6
 800706a:	f7ff fdff 	bl	8006c6c <_Bfree>
 800706e:	4647      	mov	r7, r8
 8007070:	106d      	asrs	r5, r5, #1
 8007072:	d00b      	beq.n	800708c <__pow5mult+0xa0>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	b938      	cbnz	r0, 8007088 <__pow5mult+0x9c>
 8007078:	4622      	mov	r2, r4
 800707a:	4621      	mov	r1, r4
 800707c:	4630      	mov	r0, r6
 800707e:	f7ff ff0b 	bl	8006e98 <__multiply>
 8007082:	6020      	str	r0, [r4, #0]
 8007084:	f8c0 9000 	str.w	r9, [r0]
 8007088:	4604      	mov	r4, r0
 800708a:	e7e4      	b.n	8007056 <__pow5mult+0x6a>
 800708c:	4638      	mov	r0, r7
 800708e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007092:	bf00      	nop
 8007094:	080096a0 	.word	0x080096a0
 8007098:	080094d6 	.word	0x080094d6
 800709c:	08009556 	.word	0x08009556

080070a0 <__lshift>:
 80070a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a4:	460c      	mov	r4, r1
 80070a6:	6849      	ldr	r1, [r1, #4]
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	4607      	mov	r7, r0
 80070b2:	4691      	mov	r9, r2
 80070b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070b8:	f108 0601 	add.w	r6, r8, #1
 80070bc:	42b3      	cmp	r3, r6
 80070be:	db0b      	blt.n	80070d8 <__lshift+0x38>
 80070c0:	4638      	mov	r0, r7
 80070c2:	f7ff fd93 	bl	8006bec <_Balloc>
 80070c6:	4605      	mov	r5, r0
 80070c8:	b948      	cbnz	r0, 80070de <__lshift+0x3e>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b28      	ldr	r3, [pc, #160]	; (8007170 <__lshift+0xd0>)
 80070ce:	4829      	ldr	r0, [pc, #164]	; (8007174 <__lshift+0xd4>)
 80070d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80070d4:	f001 fd00 	bl	8008ad8 <__assert_func>
 80070d8:	3101      	adds	r1, #1
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	e7ee      	b.n	80070bc <__lshift+0x1c>
 80070de:	2300      	movs	r3, #0
 80070e0:	f100 0114 	add.w	r1, r0, #20
 80070e4:	f100 0210 	add.w	r2, r0, #16
 80070e8:	4618      	mov	r0, r3
 80070ea:	4553      	cmp	r3, sl
 80070ec:	db33      	blt.n	8007156 <__lshift+0xb6>
 80070ee:	6920      	ldr	r0, [r4, #16]
 80070f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070f4:	f104 0314 	add.w	r3, r4, #20
 80070f8:	f019 091f 	ands.w	r9, r9, #31
 80070fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007104:	d02b      	beq.n	800715e <__lshift+0xbe>
 8007106:	f1c9 0e20 	rsb	lr, r9, #32
 800710a:	468a      	mov	sl, r1
 800710c:	2200      	movs	r2, #0
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	fa00 f009 	lsl.w	r0, r0, r9
 8007114:	4310      	orrs	r0, r2
 8007116:	f84a 0b04 	str.w	r0, [sl], #4
 800711a:	f853 2b04 	ldr.w	r2, [r3], #4
 800711e:	459c      	cmp	ip, r3
 8007120:	fa22 f20e 	lsr.w	r2, r2, lr
 8007124:	d8f3      	bhi.n	800710e <__lshift+0x6e>
 8007126:	ebac 0304 	sub.w	r3, ip, r4
 800712a:	3b15      	subs	r3, #21
 800712c:	f023 0303 	bic.w	r3, r3, #3
 8007130:	3304      	adds	r3, #4
 8007132:	f104 0015 	add.w	r0, r4, #21
 8007136:	4584      	cmp	ip, r0
 8007138:	bf38      	it	cc
 800713a:	2304      	movcc	r3, #4
 800713c:	50ca      	str	r2, [r1, r3]
 800713e:	b10a      	cbz	r2, 8007144 <__lshift+0xa4>
 8007140:	f108 0602 	add.w	r6, r8, #2
 8007144:	3e01      	subs	r6, #1
 8007146:	4638      	mov	r0, r7
 8007148:	612e      	str	r6, [r5, #16]
 800714a:	4621      	mov	r1, r4
 800714c:	f7ff fd8e 	bl	8006c6c <_Bfree>
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007156:	f842 0f04 	str.w	r0, [r2, #4]!
 800715a:	3301      	adds	r3, #1
 800715c:	e7c5      	b.n	80070ea <__lshift+0x4a>
 800715e:	3904      	subs	r1, #4
 8007160:	f853 2b04 	ldr.w	r2, [r3], #4
 8007164:	f841 2f04 	str.w	r2, [r1, #4]!
 8007168:	459c      	cmp	ip, r3
 800716a:	d8f9      	bhi.n	8007160 <__lshift+0xc0>
 800716c:	e7ea      	b.n	8007144 <__lshift+0xa4>
 800716e:	bf00      	nop
 8007170:	08009545 	.word	0x08009545
 8007174:	08009556 	.word	0x08009556

08007178 <__mcmp>:
 8007178:	b530      	push	{r4, r5, lr}
 800717a:	6902      	ldr	r2, [r0, #16]
 800717c:	690c      	ldr	r4, [r1, #16]
 800717e:	1b12      	subs	r2, r2, r4
 8007180:	d10e      	bne.n	80071a0 <__mcmp+0x28>
 8007182:	f100 0314 	add.w	r3, r0, #20
 8007186:	3114      	adds	r1, #20
 8007188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800718c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007198:	42a5      	cmp	r5, r4
 800719a:	d003      	beq.n	80071a4 <__mcmp+0x2c>
 800719c:	d305      	bcc.n	80071aa <__mcmp+0x32>
 800719e:	2201      	movs	r2, #1
 80071a0:	4610      	mov	r0, r2
 80071a2:	bd30      	pop	{r4, r5, pc}
 80071a4:	4283      	cmp	r3, r0
 80071a6:	d3f3      	bcc.n	8007190 <__mcmp+0x18>
 80071a8:	e7fa      	b.n	80071a0 <__mcmp+0x28>
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	e7f7      	b.n	80071a0 <__mcmp+0x28>

080071b0 <__mdiff>:
 80071b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	460c      	mov	r4, r1
 80071b6:	4606      	mov	r6, r0
 80071b8:	4611      	mov	r1, r2
 80071ba:	4620      	mov	r0, r4
 80071bc:	4690      	mov	r8, r2
 80071be:	f7ff ffdb 	bl	8007178 <__mcmp>
 80071c2:	1e05      	subs	r5, r0, #0
 80071c4:	d110      	bne.n	80071e8 <__mdiff+0x38>
 80071c6:	4629      	mov	r1, r5
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7ff fd0f 	bl	8006bec <_Balloc>
 80071ce:	b930      	cbnz	r0, 80071de <__mdiff+0x2e>
 80071d0:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <__mdiff+0x10c>)
 80071d2:	4602      	mov	r2, r0
 80071d4:	f240 2137 	movw	r1, #567	; 0x237
 80071d8:	4839      	ldr	r0, [pc, #228]	; (80072c0 <__mdiff+0x110>)
 80071da:	f001 fc7d 	bl	8008ad8 <__assert_func>
 80071de:	2301      	movs	r3, #1
 80071e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e8:	bfa4      	itt	ge
 80071ea:	4643      	movge	r3, r8
 80071ec:	46a0      	movge	r8, r4
 80071ee:	4630      	mov	r0, r6
 80071f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071f4:	bfa6      	itte	ge
 80071f6:	461c      	movge	r4, r3
 80071f8:	2500      	movge	r5, #0
 80071fa:	2501      	movlt	r5, #1
 80071fc:	f7ff fcf6 	bl	8006bec <_Balloc>
 8007200:	b920      	cbnz	r0, 800720c <__mdiff+0x5c>
 8007202:	4b2e      	ldr	r3, [pc, #184]	; (80072bc <__mdiff+0x10c>)
 8007204:	4602      	mov	r2, r0
 8007206:	f240 2145 	movw	r1, #581	; 0x245
 800720a:	e7e5      	b.n	80071d8 <__mdiff+0x28>
 800720c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007210:	6926      	ldr	r6, [r4, #16]
 8007212:	60c5      	str	r5, [r0, #12]
 8007214:	f104 0914 	add.w	r9, r4, #20
 8007218:	f108 0514 	add.w	r5, r8, #20
 800721c:	f100 0e14 	add.w	lr, r0, #20
 8007220:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007228:	f108 0210 	add.w	r2, r8, #16
 800722c:	46f2      	mov	sl, lr
 800722e:	2100      	movs	r1, #0
 8007230:	f859 3b04 	ldr.w	r3, [r9], #4
 8007234:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007238:	fa11 f88b 	uxtah	r8, r1, fp
 800723c:	b299      	uxth	r1, r3
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	eba8 0801 	sub.w	r8, r8, r1
 8007244:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007248:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800724c:	fa1f f888 	uxth.w	r8, r8
 8007250:	1419      	asrs	r1, r3, #16
 8007252:	454e      	cmp	r6, r9
 8007254:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007258:	f84a 3b04 	str.w	r3, [sl], #4
 800725c:	d8e8      	bhi.n	8007230 <__mdiff+0x80>
 800725e:	1b33      	subs	r3, r6, r4
 8007260:	3b15      	subs	r3, #21
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	3304      	adds	r3, #4
 8007268:	3415      	adds	r4, #21
 800726a:	42a6      	cmp	r6, r4
 800726c:	bf38      	it	cc
 800726e:	2304      	movcc	r3, #4
 8007270:	441d      	add	r5, r3
 8007272:	4473      	add	r3, lr
 8007274:	469e      	mov	lr, r3
 8007276:	462e      	mov	r6, r5
 8007278:	4566      	cmp	r6, ip
 800727a:	d30e      	bcc.n	800729a <__mdiff+0xea>
 800727c:	f10c 0203 	add.w	r2, ip, #3
 8007280:	1b52      	subs	r2, r2, r5
 8007282:	f022 0203 	bic.w	r2, r2, #3
 8007286:	3d03      	subs	r5, #3
 8007288:	45ac      	cmp	ip, r5
 800728a:	bf38      	it	cc
 800728c:	2200      	movcc	r2, #0
 800728e:	4413      	add	r3, r2
 8007290:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007294:	b17a      	cbz	r2, 80072b6 <__mdiff+0x106>
 8007296:	6107      	str	r7, [r0, #16]
 8007298:	e7a4      	b.n	80071e4 <__mdiff+0x34>
 800729a:	f856 8b04 	ldr.w	r8, [r6], #4
 800729e:	fa11 f288 	uxtah	r2, r1, r8
 80072a2:	1414      	asrs	r4, r2, #16
 80072a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072a8:	b292      	uxth	r2, r2
 80072aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072ae:	f84e 2b04 	str.w	r2, [lr], #4
 80072b2:	1421      	asrs	r1, r4, #16
 80072b4:	e7e0      	b.n	8007278 <__mdiff+0xc8>
 80072b6:	3f01      	subs	r7, #1
 80072b8:	e7ea      	b.n	8007290 <__mdiff+0xe0>
 80072ba:	bf00      	nop
 80072bc:	08009545 	.word	0x08009545
 80072c0:	08009556 	.word	0x08009556

080072c4 <__ulp>:
 80072c4:	b082      	sub	sp, #8
 80072c6:	ed8d 0b00 	vstr	d0, [sp]
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <__ulp+0x48>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dc08      	bgt.n	80072ea <__ulp+0x26>
 80072d8:	425b      	negs	r3, r3
 80072da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80072de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072e2:	da04      	bge.n	80072ee <__ulp+0x2a>
 80072e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80072e8:	4113      	asrs	r3, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	e008      	b.n	8007300 <__ulp+0x3c>
 80072ee:	f1a2 0314 	sub.w	r3, r2, #20
 80072f2:	2b1e      	cmp	r3, #30
 80072f4:	bfda      	itte	le
 80072f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80072fa:	40da      	lsrle	r2, r3
 80072fc:	2201      	movgt	r2, #1
 80072fe:	2300      	movs	r3, #0
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	ec41 0b10 	vmov	d0, r0, r1
 8007308:	b002      	add	sp, #8
 800730a:	4770      	bx	lr
 800730c:	7ff00000 	.word	0x7ff00000

08007310 <__b2d>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	6906      	ldr	r6, [r0, #16]
 8007316:	f100 0814 	add.w	r8, r0, #20
 800731a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800731e:	1f37      	subs	r7, r6, #4
 8007320:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007324:	4610      	mov	r0, r2
 8007326:	f7ff fd53 	bl	8006dd0 <__hi0bits>
 800732a:	f1c0 0320 	rsb	r3, r0, #32
 800732e:	280a      	cmp	r0, #10
 8007330:	600b      	str	r3, [r1, #0]
 8007332:	491b      	ldr	r1, [pc, #108]	; (80073a0 <__b2d+0x90>)
 8007334:	dc15      	bgt.n	8007362 <__b2d+0x52>
 8007336:	f1c0 0c0b 	rsb	ip, r0, #11
 800733a:	fa22 f30c 	lsr.w	r3, r2, ip
 800733e:	45b8      	cmp	r8, r7
 8007340:	ea43 0501 	orr.w	r5, r3, r1
 8007344:	bf34      	ite	cc
 8007346:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800734a:	2300      	movcs	r3, #0
 800734c:	3015      	adds	r0, #21
 800734e:	fa02 f000 	lsl.w	r0, r2, r0
 8007352:	fa23 f30c 	lsr.w	r3, r3, ip
 8007356:	4303      	orrs	r3, r0
 8007358:	461c      	mov	r4, r3
 800735a:	ec45 4b10 	vmov	d0, r4, r5
 800735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007362:	45b8      	cmp	r8, r7
 8007364:	bf3a      	itte	cc
 8007366:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800736a:	f1a6 0708 	subcc.w	r7, r6, #8
 800736e:	2300      	movcs	r3, #0
 8007370:	380b      	subs	r0, #11
 8007372:	d012      	beq.n	800739a <__b2d+0x8a>
 8007374:	f1c0 0120 	rsb	r1, r0, #32
 8007378:	fa23 f401 	lsr.w	r4, r3, r1
 800737c:	4082      	lsls	r2, r0
 800737e:	4322      	orrs	r2, r4
 8007380:	4547      	cmp	r7, r8
 8007382:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007386:	bf8c      	ite	hi
 8007388:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800738c:	2200      	movls	r2, #0
 800738e:	4083      	lsls	r3, r0
 8007390:	40ca      	lsrs	r2, r1
 8007392:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007396:	4313      	orrs	r3, r2
 8007398:	e7de      	b.n	8007358 <__b2d+0x48>
 800739a:	ea42 0501 	orr.w	r5, r2, r1
 800739e:	e7db      	b.n	8007358 <__b2d+0x48>
 80073a0:	3ff00000 	.word	0x3ff00000

080073a4 <__d2b>:
 80073a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073a8:	460f      	mov	r7, r1
 80073aa:	2101      	movs	r1, #1
 80073ac:	ec59 8b10 	vmov	r8, r9, d0
 80073b0:	4616      	mov	r6, r2
 80073b2:	f7ff fc1b 	bl	8006bec <_Balloc>
 80073b6:	4604      	mov	r4, r0
 80073b8:	b930      	cbnz	r0, 80073c8 <__d2b+0x24>
 80073ba:	4602      	mov	r2, r0
 80073bc:	4b24      	ldr	r3, [pc, #144]	; (8007450 <__d2b+0xac>)
 80073be:	4825      	ldr	r0, [pc, #148]	; (8007454 <__d2b+0xb0>)
 80073c0:	f240 310f 	movw	r1, #783	; 0x30f
 80073c4:	f001 fb88 	bl	8008ad8 <__assert_func>
 80073c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073d0:	bb2d      	cbnz	r5, 800741e <__d2b+0x7a>
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	f1b8 0300 	subs.w	r3, r8, #0
 80073d8:	d026      	beq.n	8007428 <__d2b+0x84>
 80073da:	4668      	mov	r0, sp
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	f7ff fd17 	bl	8006e10 <__lo0bits>
 80073e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073e6:	b1e8      	cbz	r0, 8007424 <__d2b+0x80>
 80073e8:	f1c0 0320 	rsb	r3, r0, #32
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	430b      	orrs	r3, r1
 80073f2:	40c2      	lsrs	r2, r0
 80073f4:	6163      	str	r3, [r4, #20]
 80073f6:	9201      	str	r2, [sp, #4]
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	61a3      	str	r3, [r4, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bf14      	ite	ne
 8007400:	2202      	movne	r2, #2
 8007402:	2201      	moveq	r2, #1
 8007404:	6122      	str	r2, [r4, #16]
 8007406:	b1bd      	cbz	r5, 8007438 <__d2b+0x94>
 8007408:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800740c:	4405      	add	r5, r0
 800740e:	603d      	str	r5, [r7, #0]
 8007410:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007414:	6030      	str	r0, [r6, #0]
 8007416:	4620      	mov	r0, r4
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007422:	e7d6      	b.n	80073d2 <__d2b+0x2e>
 8007424:	6161      	str	r1, [r4, #20]
 8007426:	e7e7      	b.n	80073f8 <__d2b+0x54>
 8007428:	a801      	add	r0, sp, #4
 800742a:	f7ff fcf1 	bl	8006e10 <__lo0bits>
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	3020      	adds	r0, #32
 8007434:	2201      	movs	r2, #1
 8007436:	e7e5      	b.n	8007404 <__d2b+0x60>
 8007438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800743c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007440:	6038      	str	r0, [r7, #0]
 8007442:	6918      	ldr	r0, [r3, #16]
 8007444:	f7ff fcc4 	bl	8006dd0 <__hi0bits>
 8007448:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800744c:	e7e2      	b.n	8007414 <__d2b+0x70>
 800744e:	bf00      	nop
 8007450:	08009545 	.word	0x08009545
 8007454:	08009556 	.word	0x08009556

08007458 <__ratio>:
 8007458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	4688      	mov	r8, r1
 800745e:	4669      	mov	r1, sp
 8007460:	4681      	mov	r9, r0
 8007462:	f7ff ff55 	bl	8007310 <__b2d>
 8007466:	a901      	add	r1, sp, #4
 8007468:	4640      	mov	r0, r8
 800746a:	ec55 4b10 	vmov	r4, r5, d0
 800746e:	f7ff ff4f 	bl	8007310 <__b2d>
 8007472:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007476:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800747a:	eba3 0c02 	sub.w	ip, r3, r2
 800747e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007482:	1a9b      	subs	r3, r3, r2
 8007484:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007488:	ec51 0b10 	vmov	r0, r1, d0
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfd6      	itet	le
 8007490:	460a      	movle	r2, r1
 8007492:	462a      	movgt	r2, r5
 8007494:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007498:	468b      	mov	fp, r1
 800749a:	462f      	mov	r7, r5
 800749c:	bfd4      	ite	le
 800749e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80074a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074a6:	4620      	mov	r0, r4
 80074a8:	ee10 2a10 	vmov	r2, s0
 80074ac:	465b      	mov	r3, fp
 80074ae:	4639      	mov	r1, r7
 80074b0:	f7f9 f9d4 	bl	800085c <__aeabi_ddiv>
 80074b4:	ec41 0b10 	vmov	d0, r0, r1
 80074b8:	b003      	add	sp, #12
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074be <__copybits>:
 80074be:	3901      	subs	r1, #1
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	1149      	asrs	r1, r1, #5
 80074c4:	6914      	ldr	r4, [r2, #16]
 80074c6:	3101      	adds	r1, #1
 80074c8:	f102 0314 	add.w	r3, r2, #20
 80074cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074d4:	1f05      	subs	r5, r0, #4
 80074d6:	42a3      	cmp	r3, r4
 80074d8:	d30c      	bcc.n	80074f4 <__copybits+0x36>
 80074da:	1aa3      	subs	r3, r4, r2
 80074dc:	3b11      	subs	r3, #17
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	3211      	adds	r2, #17
 80074e4:	42a2      	cmp	r2, r4
 80074e6:	bf88      	it	hi
 80074e8:	2300      	movhi	r3, #0
 80074ea:	4418      	add	r0, r3
 80074ec:	2300      	movs	r3, #0
 80074ee:	4288      	cmp	r0, r1
 80074f0:	d305      	bcc.n	80074fe <__copybits+0x40>
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80074f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80074fc:	e7eb      	b.n	80074d6 <__copybits+0x18>
 80074fe:	f840 3b04 	str.w	r3, [r0], #4
 8007502:	e7f4      	b.n	80074ee <__copybits+0x30>

08007504 <__any_on>:
 8007504:	f100 0214 	add.w	r2, r0, #20
 8007508:	6900      	ldr	r0, [r0, #16]
 800750a:	114b      	asrs	r3, r1, #5
 800750c:	4298      	cmp	r0, r3
 800750e:	b510      	push	{r4, lr}
 8007510:	db11      	blt.n	8007536 <__any_on+0x32>
 8007512:	dd0a      	ble.n	800752a <__any_on+0x26>
 8007514:	f011 011f 	ands.w	r1, r1, #31
 8007518:	d007      	beq.n	800752a <__any_on+0x26>
 800751a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800751e:	fa24 f001 	lsr.w	r0, r4, r1
 8007522:	fa00 f101 	lsl.w	r1, r0, r1
 8007526:	428c      	cmp	r4, r1
 8007528:	d10b      	bne.n	8007542 <__any_on+0x3e>
 800752a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800752e:	4293      	cmp	r3, r2
 8007530:	d803      	bhi.n	800753a <__any_on+0x36>
 8007532:	2000      	movs	r0, #0
 8007534:	bd10      	pop	{r4, pc}
 8007536:	4603      	mov	r3, r0
 8007538:	e7f7      	b.n	800752a <__any_on+0x26>
 800753a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800753e:	2900      	cmp	r1, #0
 8007540:	d0f5      	beq.n	800752e <__any_on+0x2a>
 8007542:	2001      	movs	r0, #1
 8007544:	e7f6      	b.n	8007534 <__any_on+0x30>

08007546 <sulp>:
 8007546:	b570      	push	{r4, r5, r6, lr}
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	ec45 4b10 	vmov	d0, r4, r5
 8007550:	4616      	mov	r6, r2
 8007552:	f7ff feb7 	bl	80072c4 <__ulp>
 8007556:	ec51 0b10 	vmov	r0, r1, d0
 800755a:	b17e      	cbz	r6, 800757c <sulp+0x36>
 800755c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007564:	2b00      	cmp	r3, #0
 8007566:	dd09      	ble.n	800757c <sulp+0x36>
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800756e:	2400      	movs	r4, #0
 8007570:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007574:	4622      	mov	r2, r4
 8007576:	462b      	mov	r3, r5
 8007578:	f7f9 f846 	bl	8000608 <__aeabi_dmul>
 800757c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007580 <_strtod_l>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	ed2d 8b02 	vpush	{d8}
 8007588:	b09b      	sub	sp, #108	; 0x6c
 800758a:	4604      	mov	r4, r0
 800758c:	9213      	str	r2, [sp, #76]	; 0x4c
 800758e:	2200      	movs	r2, #0
 8007590:	9216      	str	r2, [sp, #88]	; 0x58
 8007592:	460d      	mov	r5, r1
 8007594:	f04f 0800 	mov.w	r8, #0
 8007598:	f04f 0900 	mov.w	r9, #0
 800759c:	460a      	mov	r2, r1
 800759e:	9215      	str	r2, [sp, #84]	; 0x54
 80075a0:	7811      	ldrb	r1, [r2, #0]
 80075a2:	292b      	cmp	r1, #43	; 0x2b
 80075a4:	d04c      	beq.n	8007640 <_strtod_l+0xc0>
 80075a6:	d83a      	bhi.n	800761e <_strtod_l+0x9e>
 80075a8:	290d      	cmp	r1, #13
 80075aa:	d834      	bhi.n	8007616 <_strtod_l+0x96>
 80075ac:	2908      	cmp	r1, #8
 80075ae:	d834      	bhi.n	800761a <_strtod_l+0x9a>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	d03d      	beq.n	8007630 <_strtod_l+0xb0>
 80075b4:	2200      	movs	r2, #0
 80075b6:	920a      	str	r2, [sp, #40]	; 0x28
 80075b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80075ba:	7832      	ldrb	r2, [r6, #0]
 80075bc:	2a30      	cmp	r2, #48	; 0x30
 80075be:	f040 80b4 	bne.w	800772a <_strtod_l+0x1aa>
 80075c2:	7872      	ldrb	r2, [r6, #1]
 80075c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80075c8:	2a58      	cmp	r2, #88	; 0x58
 80075ca:	d170      	bne.n	80076ae <_strtod_l+0x12e>
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	ab16      	add	r3, sp, #88	; 0x58
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	4a8e      	ldr	r2, [pc, #568]	; (8007810 <_strtod_l+0x290>)
 80075d8:	ab17      	add	r3, sp, #92	; 0x5c
 80075da:	a915      	add	r1, sp, #84	; 0x54
 80075dc:	4620      	mov	r0, r4
 80075de:	f001 fb17 	bl	8008c10 <__gethex>
 80075e2:	f010 070f 	ands.w	r7, r0, #15
 80075e6:	4605      	mov	r5, r0
 80075e8:	d005      	beq.n	80075f6 <_strtod_l+0x76>
 80075ea:	2f06      	cmp	r7, #6
 80075ec:	d12a      	bne.n	8007644 <_strtod_l+0xc4>
 80075ee:	3601      	adds	r6, #1
 80075f0:	2300      	movs	r3, #0
 80075f2:	9615      	str	r6, [sp, #84]	; 0x54
 80075f4:	930a      	str	r3, [sp, #40]	; 0x28
 80075f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 857f 	bne.w	80080fc <_strtod_l+0xb7c>
 80075fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007600:	b1db      	cbz	r3, 800763a <_strtod_l+0xba>
 8007602:	4642      	mov	r2, r8
 8007604:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007608:	ec43 2b10 	vmov	d0, r2, r3
 800760c:	b01b      	add	sp, #108	; 0x6c
 800760e:	ecbd 8b02 	vpop	{d8}
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	2920      	cmp	r1, #32
 8007618:	d1cc      	bne.n	80075b4 <_strtod_l+0x34>
 800761a:	3201      	adds	r2, #1
 800761c:	e7bf      	b.n	800759e <_strtod_l+0x1e>
 800761e:	292d      	cmp	r1, #45	; 0x2d
 8007620:	d1c8      	bne.n	80075b4 <_strtod_l+0x34>
 8007622:	2101      	movs	r1, #1
 8007624:	910a      	str	r1, [sp, #40]	; 0x28
 8007626:	1c51      	adds	r1, r2, #1
 8007628:	9115      	str	r1, [sp, #84]	; 0x54
 800762a:	7852      	ldrb	r2, [r2, #1]
 800762c:	2a00      	cmp	r2, #0
 800762e:	d1c3      	bne.n	80075b8 <_strtod_l+0x38>
 8007630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007632:	9515      	str	r5, [sp, #84]	; 0x54
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 855f 	bne.w	80080f8 <_strtod_l+0xb78>
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	e7e3      	b.n	8007608 <_strtod_l+0x88>
 8007640:	2100      	movs	r1, #0
 8007642:	e7ef      	b.n	8007624 <_strtod_l+0xa4>
 8007644:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007646:	b13a      	cbz	r2, 8007658 <_strtod_l+0xd8>
 8007648:	2135      	movs	r1, #53	; 0x35
 800764a:	a818      	add	r0, sp, #96	; 0x60
 800764c:	f7ff ff37 	bl	80074be <__copybits>
 8007650:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff fb0a 	bl	8006c6c <_Bfree>
 8007658:	3f01      	subs	r7, #1
 800765a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800765c:	2f04      	cmp	r7, #4
 800765e:	d806      	bhi.n	800766e <_strtod_l+0xee>
 8007660:	e8df f007 	tbb	[pc, r7]
 8007664:	201d0314 	.word	0x201d0314
 8007668:	14          	.byte	0x14
 8007669:	00          	.byte	0x00
 800766a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800766e:	05e9      	lsls	r1, r5, #23
 8007670:	bf48      	it	mi
 8007672:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007676:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800767a:	0d1b      	lsrs	r3, r3, #20
 800767c:	051b      	lsls	r3, r3, #20
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1b9      	bne.n	80075f6 <_strtod_l+0x76>
 8007682:	f7fe fb05 	bl	8005c90 <__errno>
 8007686:	2322      	movs	r3, #34	; 0x22
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	e7b4      	b.n	80075f6 <_strtod_l+0x76>
 800768c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007690:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007694:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007698:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800769c:	e7e7      	b.n	800766e <_strtod_l+0xee>
 800769e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007818 <_strtod_l+0x298>
 80076a2:	e7e4      	b.n	800766e <_strtod_l+0xee>
 80076a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80076a8:	f04f 38ff 	mov.w	r8, #4294967295
 80076ac:	e7df      	b.n	800766e <_strtod_l+0xee>
 80076ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	9215      	str	r2, [sp, #84]	; 0x54
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b30      	cmp	r3, #48	; 0x30
 80076b8:	d0f9      	beq.n	80076ae <_strtod_l+0x12e>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d09b      	beq.n	80075f6 <_strtod_l+0x76>
 80076be:	2301      	movs	r3, #1
 80076c0:	f04f 0a00 	mov.w	sl, #0
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80076ce:	46d3      	mov	fp, sl
 80076d0:	220a      	movs	r2, #10
 80076d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80076d4:	7806      	ldrb	r6, [r0, #0]
 80076d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80076da:	b2d9      	uxtb	r1, r3
 80076dc:	2909      	cmp	r1, #9
 80076de:	d926      	bls.n	800772e <_strtod_l+0x1ae>
 80076e0:	494c      	ldr	r1, [pc, #304]	; (8007814 <_strtod_l+0x294>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	f001 f9c0 	bl	8008a68 <strncmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d030      	beq.n	800774e <_strtod_l+0x1ce>
 80076ec:	2000      	movs	r0, #0
 80076ee:	4632      	mov	r2, r6
 80076f0:	9005      	str	r0, [sp, #20]
 80076f2:	465e      	mov	r6, fp
 80076f4:	4603      	mov	r3, r0
 80076f6:	2a65      	cmp	r2, #101	; 0x65
 80076f8:	d001      	beq.n	80076fe <_strtod_l+0x17e>
 80076fa:	2a45      	cmp	r2, #69	; 0x45
 80076fc:	d113      	bne.n	8007726 <_strtod_l+0x1a6>
 80076fe:	b91e      	cbnz	r6, 8007708 <_strtod_l+0x188>
 8007700:	9a04      	ldr	r2, [sp, #16]
 8007702:	4302      	orrs	r2, r0
 8007704:	d094      	beq.n	8007630 <_strtod_l+0xb0>
 8007706:	2600      	movs	r6, #0
 8007708:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800770a:	1c6a      	adds	r2, r5, #1
 800770c:	9215      	str	r2, [sp, #84]	; 0x54
 800770e:	786a      	ldrb	r2, [r5, #1]
 8007710:	2a2b      	cmp	r2, #43	; 0x2b
 8007712:	d074      	beq.n	80077fe <_strtod_l+0x27e>
 8007714:	2a2d      	cmp	r2, #45	; 0x2d
 8007716:	d078      	beq.n	800780a <_strtod_l+0x28a>
 8007718:	f04f 0c00 	mov.w	ip, #0
 800771c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007720:	2909      	cmp	r1, #9
 8007722:	d97f      	bls.n	8007824 <_strtod_l+0x2a4>
 8007724:	9515      	str	r5, [sp, #84]	; 0x54
 8007726:	2700      	movs	r7, #0
 8007728:	e09e      	b.n	8007868 <_strtod_l+0x2e8>
 800772a:	2300      	movs	r3, #0
 800772c:	e7c8      	b.n	80076c0 <_strtod_l+0x140>
 800772e:	f1bb 0f08 	cmp.w	fp, #8
 8007732:	bfd8      	it	le
 8007734:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007736:	f100 0001 	add.w	r0, r0, #1
 800773a:	bfda      	itte	le
 800773c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007740:	9309      	strle	r3, [sp, #36]	; 0x24
 8007742:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007746:	f10b 0b01 	add.w	fp, fp, #1
 800774a:	9015      	str	r0, [sp, #84]	; 0x54
 800774c:	e7c1      	b.n	80076d2 <_strtod_l+0x152>
 800774e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	9215      	str	r2, [sp, #84]	; 0x54
 8007754:	785a      	ldrb	r2, [r3, #1]
 8007756:	f1bb 0f00 	cmp.w	fp, #0
 800775a:	d037      	beq.n	80077cc <_strtod_l+0x24c>
 800775c:	9005      	str	r0, [sp, #20]
 800775e:	465e      	mov	r6, fp
 8007760:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007764:	2b09      	cmp	r3, #9
 8007766:	d912      	bls.n	800778e <_strtod_l+0x20e>
 8007768:	2301      	movs	r3, #1
 800776a:	e7c4      	b.n	80076f6 <_strtod_l+0x176>
 800776c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	9215      	str	r2, [sp, #84]	; 0x54
 8007772:	785a      	ldrb	r2, [r3, #1]
 8007774:	3001      	adds	r0, #1
 8007776:	2a30      	cmp	r2, #48	; 0x30
 8007778:	d0f8      	beq.n	800776c <_strtod_l+0x1ec>
 800777a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800777e:	2b08      	cmp	r3, #8
 8007780:	f200 84c1 	bhi.w	8008106 <_strtod_l+0xb86>
 8007784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007786:	9005      	str	r0, [sp, #20]
 8007788:	2000      	movs	r0, #0
 800778a:	930b      	str	r3, [sp, #44]	; 0x2c
 800778c:	4606      	mov	r6, r0
 800778e:	3a30      	subs	r2, #48	; 0x30
 8007790:	f100 0301 	add.w	r3, r0, #1
 8007794:	d014      	beq.n	80077c0 <_strtod_l+0x240>
 8007796:	9905      	ldr	r1, [sp, #20]
 8007798:	4419      	add	r1, r3
 800779a:	9105      	str	r1, [sp, #20]
 800779c:	4633      	mov	r3, r6
 800779e:	eb00 0c06 	add.w	ip, r0, r6
 80077a2:	210a      	movs	r1, #10
 80077a4:	4563      	cmp	r3, ip
 80077a6:	d113      	bne.n	80077d0 <_strtod_l+0x250>
 80077a8:	1833      	adds	r3, r6, r0
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	f106 0601 	add.w	r6, r6, #1
 80077b0:	4406      	add	r6, r0
 80077b2:	dc1a      	bgt.n	80077ea <_strtod_l+0x26a>
 80077b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077b6:	230a      	movs	r3, #10
 80077b8:	fb03 2301 	mla	r3, r3, r1, r2
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	2300      	movs	r3, #0
 80077c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077c2:	1c51      	adds	r1, r2, #1
 80077c4:	9115      	str	r1, [sp, #84]	; 0x54
 80077c6:	7852      	ldrb	r2, [r2, #1]
 80077c8:	4618      	mov	r0, r3
 80077ca:	e7c9      	b.n	8007760 <_strtod_l+0x1e0>
 80077cc:	4658      	mov	r0, fp
 80077ce:	e7d2      	b.n	8007776 <_strtod_l+0x1f6>
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	f103 0301 	add.w	r3, r3, #1
 80077d6:	dc03      	bgt.n	80077e0 <_strtod_l+0x260>
 80077d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80077da:	434f      	muls	r7, r1
 80077dc:	9709      	str	r7, [sp, #36]	; 0x24
 80077de:	e7e1      	b.n	80077a4 <_strtod_l+0x224>
 80077e0:	2b10      	cmp	r3, #16
 80077e2:	bfd8      	it	le
 80077e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80077e8:	e7dc      	b.n	80077a4 <_strtod_l+0x224>
 80077ea:	2e10      	cmp	r6, #16
 80077ec:	bfdc      	itt	le
 80077ee:	230a      	movle	r3, #10
 80077f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80077f4:	e7e3      	b.n	80077be <_strtod_l+0x23e>
 80077f6:	2300      	movs	r3, #0
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	2301      	movs	r3, #1
 80077fc:	e780      	b.n	8007700 <_strtod_l+0x180>
 80077fe:	f04f 0c00 	mov.w	ip, #0
 8007802:	1caa      	adds	r2, r5, #2
 8007804:	9215      	str	r2, [sp, #84]	; 0x54
 8007806:	78aa      	ldrb	r2, [r5, #2]
 8007808:	e788      	b.n	800771c <_strtod_l+0x19c>
 800780a:	f04f 0c01 	mov.w	ip, #1
 800780e:	e7f8      	b.n	8007802 <_strtod_l+0x282>
 8007810:	080096b0 	.word	0x080096b0
 8007814:	080096ac 	.word	0x080096ac
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800781e:	1c51      	adds	r1, r2, #1
 8007820:	9115      	str	r1, [sp, #84]	; 0x54
 8007822:	7852      	ldrb	r2, [r2, #1]
 8007824:	2a30      	cmp	r2, #48	; 0x30
 8007826:	d0f9      	beq.n	800781c <_strtod_l+0x29c>
 8007828:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800782c:	2908      	cmp	r1, #8
 800782e:	f63f af7a 	bhi.w	8007726 <_strtod_l+0x1a6>
 8007832:	3a30      	subs	r2, #48	; 0x30
 8007834:	9208      	str	r2, [sp, #32]
 8007836:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007838:	920c      	str	r2, [sp, #48]	; 0x30
 800783a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800783c:	1c57      	adds	r7, r2, #1
 800783e:	9715      	str	r7, [sp, #84]	; 0x54
 8007840:	7852      	ldrb	r2, [r2, #1]
 8007842:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007846:	f1be 0f09 	cmp.w	lr, #9
 800784a:	d938      	bls.n	80078be <_strtod_l+0x33e>
 800784c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800784e:	1a7f      	subs	r7, r7, r1
 8007850:	2f08      	cmp	r7, #8
 8007852:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007856:	dc03      	bgt.n	8007860 <_strtod_l+0x2e0>
 8007858:	9908      	ldr	r1, [sp, #32]
 800785a:	428f      	cmp	r7, r1
 800785c:	bfa8      	it	ge
 800785e:	460f      	movge	r7, r1
 8007860:	f1bc 0f00 	cmp.w	ip, #0
 8007864:	d000      	beq.n	8007868 <_strtod_l+0x2e8>
 8007866:	427f      	negs	r7, r7
 8007868:	2e00      	cmp	r6, #0
 800786a:	d14f      	bne.n	800790c <_strtod_l+0x38c>
 800786c:	9904      	ldr	r1, [sp, #16]
 800786e:	4301      	orrs	r1, r0
 8007870:	f47f aec1 	bne.w	80075f6 <_strtod_l+0x76>
 8007874:	2b00      	cmp	r3, #0
 8007876:	f47f aedb 	bne.w	8007630 <_strtod_l+0xb0>
 800787a:	2a69      	cmp	r2, #105	; 0x69
 800787c:	d029      	beq.n	80078d2 <_strtod_l+0x352>
 800787e:	dc26      	bgt.n	80078ce <_strtod_l+0x34e>
 8007880:	2a49      	cmp	r2, #73	; 0x49
 8007882:	d026      	beq.n	80078d2 <_strtod_l+0x352>
 8007884:	2a4e      	cmp	r2, #78	; 0x4e
 8007886:	f47f aed3 	bne.w	8007630 <_strtod_l+0xb0>
 800788a:	499b      	ldr	r1, [pc, #620]	; (8007af8 <_strtod_l+0x578>)
 800788c:	a815      	add	r0, sp, #84	; 0x54
 800788e:	f001 fbff 	bl	8009090 <__match>
 8007892:	2800      	cmp	r0, #0
 8007894:	f43f aecc 	beq.w	8007630 <_strtod_l+0xb0>
 8007898:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b28      	cmp	r3, #40	; 0x28
 800789e:	d12f      	bne.n	8007900 <_strtod_l+0x380>
 80078a0:	4996      	ldr	r1, [pc, #600]	; (8007afc <_strtod_l+0x57c>)
 80078a2:	aa18      	add	r2, sp, #96	; 0x60
 80078a4:	a815      	add	r0, sp, #84	; 0x54
 80078a6:	f001 fc07 	bl	80090b8 <__hexnan>
 80078aa:	2805      	cmp	r0, #5
 80078ac:	d128      	bne.n	8007900 <_strtod_l+0x380>
 80078ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80078b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80078bc:	e69b      	b.n	80075f6 <_strtod_l+0x76>
 80078be:	9f08      	ldr	r7, [sp, #32]
 80078c0:	210a      	movs	r1, #10
 80078c2:	fb01 2107 	mla	r1, r1, r7, r2
 80078c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80078ca:	9208      	str	r2, [sp, #32]
 80078cc:	e7b5      	b.n	800783a <_strtod_l+0x2ba>
 80078ce:	2a6e      	cmp	r2, #110	; 0x6e
 80078d0:	e7d9      	b.n	8007886 <_strtod_l+0x306>
 80078d2:	498b      	ldr	r1, [pc, #556]	; (8007b00 <_strtod_l+0x580>)
 80078d4:	a815      	add	r0, sp, #84	; 0x54
 80078d6:	f001 fbdb 	bl	8009090 <__match>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f43f aea8 	beq.w	8007630 <_strtod_l+0xb0>
 80078e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078e2:	4988      	ldr	r1, [pc, #544]	; (8007b04 <_strtod_l+0x584>)
 80078e4:	3b01      	subs	r3, #1
 80078e6:	a815      	add	r0, sp, #84	; 0x54
 80078e8:	9315      	str	r3, [sp, #84]	; 0x54
 80078ea:	f001 fbd1 	bl	8009090 <__match>
 80078ee:	b910      	cbnz	r0, 80078f6 <_strtod_l+0x376>
 80078f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078f2:	3301      	adds	r3, #1
 80078f4:	9315      	str	r3, [sp, #84]	; 0x54
 80078f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007b14 <_strtod_l+0x594>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	e67a      	b.n	80075f6 <_strtod_l+0x76>
 8007900:	4881      	ldr	r0, [pc, #516]	; (8007b08 <_strtod_l+0x588>)
 8007902:	f001 f8e1 	bl	8008ac8 <nan>
 8007906:	ec59 8b10 	vmov	r8, r9, d0
 800790a:	e674      	b.n	80075f6 <_strtod_l+0x76>
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007910:	1afb      	subs	r3, r7, r3
 8007912:	f1bb 0f00 	cmp.w	fp, #0
 8007916:	bf08      	it	eq
 8007918:	46b3      	moveq	fp, r6
 800791a:	2e10      	cmp	r6, #16
 800791c:	9308      	str	r3, [sp, #32]
 800791e:	4635      	mov	r5, r6
 8007920:	bfa8      	it	ge
 8007922:	2510      	movge	r5, #16
 8007924:	f7f8 fdf6 	bl	8000514 <__aeabi_ui2d>
 8007928:	2e09      	cmp	r6, #9
 800792a:	4680      	mov	r8, r0
 800792c:	4689      	mov	r9, r1
 800792e:	dd13      	ble.n	8007958 <_strtod_l+0x3d8>
 8007930:	4b76      	ldr	r3, [pc, #472]	; (8007b0c <_strtod_l+0x58c>)
 8007932:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007936:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800793a:	f7f8 fe65 	bl	8000608 <__aeabi_dmul>
 800793e:	4680      	mov	r8, r0
 8007940:	4650      	mov	r0, sl
 8007942:	4689      	mov	r9, r1
 8007944:	f7f8 fde6 	bl	8000514 <__aeabi_ui2d>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f8 fca4 	bl	800029c <__adddf3>
 8007954:	4680      	mov	r8, r0
 8007956:	4689      	mov	r9, r1
 8007958:	2e0f      	cmp	r6, #15
 800795a:	dc38      	bgt.n	80079ce <_strtod_l+0x44e>
 800795c:	9b08      	ldr	r3, [sp, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f43f ae49 	beq.w	80075f6 <_strtod_l+0x76>
 8007964:	dd24      	ble.n	80079b0 <_strtod_l+0x430>
 8007966:	2b16      	cmp	r3, #22
 8007968:	dc0b      	bgt.n	8007982 <_strtod_l+0x402>
 800796a:	4968      	ldr	r1, [pc, #416]	; (8007b0c <_strtod_l+0x58c>)
 800796c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007974:	4642      	mov	r2, r8
 8007976:	464b      	mov	r3, r9
 8007978:	f7f8 fe46 	bl	8000608 <__aeabi_dmul>
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	e639      	b.n	80075f6 <_strtod_l+0x76>
 8007982:	9a08      	ldr	r2, [sp, #32]
 8007984:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007988:	4293      	cmp	r3, r2
 800798a:	db20      	blt.n	80079ce <_strtod_l+0x44e>
 800798c:	4c5f      	ldr	r4, [pc, #380]	; (8007b0c <_strtod_l+0x58c>)
 800798e:	f1c6 060f 	rsb	r6, r6, #15
 8007992:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007996:	4642      	mov	r2, r8
 8007998:	464b      	mov	r3, r9
 800799a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	9b08      	ldr	r3, [sp, #32]
 80079a4:	1b9e      	subs	r6, r3, r6
 80079a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80079aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80079ae:	e7e3      	b.n	8007978 <_strtod_l+0x3f8>
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	3316      	adds	r3, #22
 80079b4:	db0b      	blt.n	80079ce <_strtod_l+0x44e>
 80079b6:	9b05      	ldr	r3, [sp, #20]
 80079b8:	1bdf      	subs	r7, r3, r7
 80079ba:	4b54      	ldr	r3, [pc, #336]	; (8007b0c <_strtod_l+0x58c>)
 80079bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80079c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c4:	4640      	mov	r0, r8
 80079c6:	4649      	mov	r1, r9
 80079c8:	f7f8 ff48 	bl	800085c <__aeabi_ddiv>
 80079cc:	e7d6      	b.n	800797c <_strtod_l+0x3fc>
 80079ce:	9b08      	ldr	r3, [sp, #32]
 80079d0:	1b75      	subs	r5, r6, r5
 80079d2:	441d      	add	r5, r3
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dd70      	ble.n	8007aba <_strtod_l+0x53a>
 80079d8:	f015 030f 	ands.w	r3, r5, #15
 80079dc:	d00a      	beq.n	80079f4 <_strtod_l+0x474>
 80079de:	494b      	ldr	r1, [pc, #300]	; (8007b0c <_strtod_l+0x58c>)
 80079e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079e4:	4642      	mov	r2, r8
 80079e6:	464b      	mov	r3, r9
 80079e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ec:	f7f8 fe0c 	bl	8000608 <__aeabi_dmul>
 80079f0:	4680      	mov	r8, r0
 80079f2:	4689      	mov	r9, r1
 80079f4:	f035 050f 	bics.w	r5, r5, #15
 80079f8:	d04d      	beq.n	8007a96 <_strtod_l+0x516>
 80079fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80079fe:	dd22      	ble.n	8007a46 <_strtod_l+0x4c6>
 8007a00:	2500      	movs	r5, #0
 8007a02:	46ab      	mov	fp, r5
 8007a04:	9509      	str	r5, [sp, #36]	; 0x24
 8007a06:	9505      	str	r5, [sp, #20]
 8007a08:	2322      	movs	r3, #34	; 0x22
 8007a0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007b14 <_strtod_l+0x594>
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	f04f 0800 	mov.w	r8, #0
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f43f aded 	beq.w	80075f6 <_strtod_l+0x76>
 8007a1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f7ff f924 	bl	8006c6c <_Bfree>
 8007a24:	9905      	ldr	r1, [sp, #20]
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff f920 	bl	8006c6c <_Bfree>
 8007a2c:	4659      	mov	r1, fp
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7ff f91c 	bl	8006c6c <_Bfree>
 8007a34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7ff f918 	bl	8006c6c <_Bfree>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7ff f914 	bl	8006c6c <_Bfree>
 8007a44:	e5d7      	b.n	80075f6 <_strtod_l+0x76>
 8007a46:	4b32      	ldr	r3, [pc, #200]	; (8007b10 <_strtod_l+0x590>)
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	112d      	asrs	r5, r5, #4
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	469a      	mov	sl, r3
 8007a54:	2d01      	cmp	r5, #1
 8007a56:	dc21      	bgt.n	8007a9c <_strtod_l+0x51c>
 8007a58:	b10b      	cbz	r3, 8007a5e <_strtod_l+0x4de>
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	4689      	mov	r9, r1
 8007a5e:	492c      	ldr	r1, [pc, #176]	; (8007b10 <_strtod_l+0x590>)
 8007a60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007a64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <_strtod_l+0x594>)
 8007a76:	460a      	mov	r2, r1
 8007a78:	400b      	ands	r3, r1
 8007a7a:	4927      	ldr	r1, [pc, #156]	; (8007b18 <_strtod_l+0x598>)
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	4680      	mov	r8, r0
 8007a80:	d8be      	bhi.n	8007a00 <_strtod_l+0x480>
 8007a82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007a86:	428b      	cmp	r3, r1
 8007a88:	bf86      	itte	hi
 8007a8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007b1c <_strtod_l+0x59c>
 8007a8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007a92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007a96:	2300      	movs	r3, #0
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	e07b      	b.n	8007b94 <_strtod_l+0x614>
 8007a9c:	07ea      	lsls	r2, r5, #31
 8007a9e:	d505      	bpl.n	8007aac <_strtod_l+0x52c>
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fdaf 	bl	8000608 <__aeabi_dmul>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	9a04      	ldr	r2, [sp, #16]
 8007aae:	3208      	adds	r2, #8
 8007ab0:	f10a 0a01 	add.w	sl, sl, #1
 8007ab4:	106d      	asrs	r5, r5, #1
 8007ab6:	9204      	str	r2, [sp, #16]
 8007ab8:	e7cc      	b.n	8007a54 <_strtod_l+0x4d4>
 8007aba:	d0ec      	beq.n	8007a96 <_strtod_l+0x516>
 8007abc:	426d      	negs	r5, r5
 8007abe:	f015 020f 	ands.w	r2, r5, #15
 8007ac2:	d00a      	beq.n	8007ada <_strtod_l+0x55a>
 8007ac4:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <_strtod_l+0x58c>)
 8007ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fec3 	bl	800085c <__aeabi_ddiv>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	4689      	mov	r9, r1
 8007ada:	112d      	asrs	r5, r5, #4
 8007adc:	d0db      	beq.n	8007a96 <_strtod_l+0x516>
 8007ade:	2d1f      	cmp	r5, #31
 8007ae0:	dd1e      	ble.n	8007b20 <_strtod_l+0x5a0>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	46ab      	mov	fp, r5
 8007ae6:	9509      	str	r5, [sp, #36]	; 0x24
 8007ae8:	9505      	str	r5, [sp, #20]
 8007aea:	2322      	movs	r3, #34	; 0x22
 8007aec:	f04f 0800 	mov.w	r8, #0
 8007af0:	f04f 0900 	mov.w	r9, #0
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	e78d      	b.n	8007a14 <_strtod_l+0x494>
 8007af8:	0800949d 	.word	0x0800949d
 8007afc:	080096c4 	.word	0x080096c4
 8007b00:	08009495 	.word	0x08009495
 8007b04:	080094cc 	.word	0x080094cc
 8007b08:	08009855 	.word	0x08009855
 8007b0c:	080095d8 	.word	0x080095d8
 8007b10:	080095b0 	.word	0x080095b0
 8007b14:	7ff00000 	.word	0x7ff00000
 8007b18:	7ca00000 	.word	0x7ca00000
 8007b1c:	7fefffff 	.word	0x7fefffff
 8007b20:	f015 0310 	ands.w	r3, r5, #16
 8007b24:	bf18      	it	ne
 8007b26:	236a      	movne	r3, #106	; 0x6a
 8007b28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007ecc <_strtod_l+0x94c>
 8007b2c:	9304      	str	r3, [sp, #16]
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	2300      	movs	r3, #0
 8007b34:	07ea      	lsls	r2, r5, #31
 8007b36:	d504      	bpl.n	8007b42 <_strtod_l+0x5c2>
 8007b38:	e9da 2300 	ldrd	r2, r3, [sl]
 8007b3c:	f7f8 fd64 	bl	8000608 <__aeabi_dmul>
 8007b40:	2301      	movs	r3, #1
 8007b42:	106d      	asrs	r5, r5, #1
 8007b44:	f10a 0a08 	add.w	sl, sl, #8
 8007b48:	d1f4      	bne.n	8007b34 <_strtod_l+0x5b4>
 8007b4a:	b10b      	cbz	r3, 8007b50 <_strtod_l+0x5d0>
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	4689      	mov	r9, r1
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	b1bb      	cbz	r3, 8007b84 <_strtod_l+0x604>
 8007b54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007b58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	4649      	mov	r1, r9
 8007b60:	dd10      	ble.n	8007b84 <_strtod_l+0x604>
 8007b62:	2b1f      	cmp	r3, #31
 8007b64:	f340 811e 	ble.w	8007da4 <_strtod_l+0x824>
 8007b68:	2b34      	cmp	r3, #52	; 0x34
 8007b6a:	bfde      	ittt	le
 8007b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8007b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007b74:	4093      	lslle	r3, r2
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	bfcc      	ite	gt
 8007b7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007b80:	ea03 0901 	andle.w	r9, r3, r1
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	4640      	mov	r0, r8
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	f7f8 ffa4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d1a6      	bne.n	8007ae2 <_strtod_l+0x562>
 8007b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b9a:	4633      	mov	r3, r6
 8007b9c:	465a      	mov	r2, fp
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7ff f8cc 	bl	8006d3c <__s2b>
 8007ba4:	9009      	str	r0, [sp, #36]	; 0x24
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f af2a 	beq.w	8007a00 <_strtod_l+0x480>
 8007bac:	9a08      	ldr	r2, [sp, #32]
 8007bae:	9b05      	ldr	r3, [sp, #20]
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	eba3 0307 	sub.w	r3, r3, r7
 8007bb6:	bfa8      	it	ge
 8007bb8:	2300      	movge	r3, #0
 8007bba:	930c      	str	r3, [sp, #48]	; 0x30
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007bc2:	9312      	str	r3, [sp, #72]	; 0x48
 8007bc4:	46ab      	mov	fp, r5
 8007bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc8:	4620      	mov	r0, r4
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	f7ff f80e 	bl	8006bec <_Balloc>
 8007bd0:	9005      	str	r0, [sp, #20]
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	f43f af18 	beq.w	8007a08 <_strtod_l+0x488>
 8007bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bda:	691a      	ldr	r2, [r3, #16]
 8007bdc:	3202      	adds	r2, #2
 8007bde:	f103 010c 	add.w	r1, r3, #12
 8007be2:	0092      	lsls	r2, r2, #2
 8007be4:	300c      	adds	r0, #12
 8007be6:	f000 ff61 	bl	8008aac <memcpy>
 8007bea:	ec49 8b10 	vmov	d0, r8, r9
 8007bee:	aa18      	add	r2, sp, #96	; 0x60
 8007bf0:	a917      	add	r1, sp, #92	; 0x5c
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f7ff fbd6 	bl	80073a4 <__d2b>
 8007bf8:	ec49 8b18 	vmov	d8, r8, r9
 8007bfc:	9016      	str	r0, [sp, #88]	; 0x58
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f43f af02 	beq.w	8007a08 <_strtod_l+0x488>
 8007c04:	2101      	movs	r1, #1
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff f930 	bl	8006e6c <__i2b>
 8007c0c:	4683      	mov	fp, r0
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f aefa 	beq.w	8007a08 <_strtod_l+0x488>
 8007c14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007c16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	bfab      	itete	ge
 8007c1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007c1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007c20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007c22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007c26:	bfac      	ite	ge
 8007c28:	eb06 0a03 	addge.w	sl, r6, r3
 8007c2c:	1b9f      	sublt	r7, r3, r6
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	1af6      	subs	r6, r6, r3
 8007c32:	4416      	add	r6, r2
 8007c34:	4ba0      	ldr	r3, [pc, #640]	; (8007eb8 <_strtod_l+0x938>)
 8007c36:	3e01      	subs	r6, #1
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007c3e:	f280 80c4 	bge.w	8007dca <_strtod_l+0x84a>
 8007c42:	1b9b      	subs	r3, r3, r6
 8007c44:	2b1f      	cmp	r3, #31
 8007c46:	eba2 0203 	sub.w	r2, r2, r3
 8007c4a:	f04f 0101 	mov.w	r1, #1
 8007c4e:	f300 80b0 	bgt.w	8007db2 <_strtod_l+0x832>
 8007c52:	fa01 f303 	lsl.w	r3, r1, r3
 8007c56:	930e      	str	r3, [sp, #56]	; 0x38
 8007c58:	2300      	movs	r3, #0
 8007c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5c:	eb0a 0602 	add.w	r6, sl, r2
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	45b2      	cmp	sl, r6
 8007c64:	4417      	add	r7, r2
 8007c66:	441f      	add	r7, r3
 8007c68:	4653      	mov	r3, sl
 8007c6a:	bfa8      	it	ge
 8007c6c:	4633      	movge	r3, r6
 8007c6e:	42bb      	cmp	r3, r7
 8007c70:	bfa8      	it	ge
 8007c72:	463b      	movge	r3, r7
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfc2      	ittt	gt
 8007c78:	1af6      	subgt	r6, r6, r3
 8007c7a:	1aff      	subgt	r7, r7, r3
 8007c7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd17      	ble.n	8007cb6 <_strtod_l+0x736>
 8007c86:	4659      	mov	r1, fp
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f7ff f9ae 	bl	8006fec <__pow5mult>
 8007c90:	4683      	mov	fp, r0
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aeb8 	beq.w	8007a08 <_strtod_l+0x488>
 8007c98:	4601      	mov	r1, r0
 8007c9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f7ff f8fb 	bl	8006e98 <__multiply>
 8007ca2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f43f aeaf 	beq.w	8007a08 <_strtod_l+0x488>
 8007caa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7fe ffdd 	bl	8006c6c <_Bfree>
 8007cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb4:	9316      	str	r3, [sp, #88]	; 0x58
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	f300 808c 	bgt.w	8007dd4 <_strtod_l+0x854>
 8007cbc:	9b08      	ldr	r3, [sp, #32]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	dd08      	ble.n	8007cd4 <_strtod_l+0x754>
 8007cc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cc4:	9905      	ldr	r1, [sp, #20]
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff f990 	bl	8006fec <__pow5mult>
 8007ccc:	9005      	str	r0, [sp, #20]
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f ae9a 	beq.w	8007a08 <_strtod_l+0x488>
 8007cd4:	2f00      	cmp	r7, #0
 8007cd6:	dd08      	ble.n	8007cea <_strtod_l+0x76a>
 8007cd8:	9905      	ldr	r1, [sp, #20]
 8007cda:	463a      	mov	r2, r7
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f7ff f9df 	bl	80070a0 <__lshift>
 8007ce2:	9005      	str	r0, [sp, #20]
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f43f ae8f 	beq.w	8007a08 <_strtod_l+0x488>
 8007cea:	f1ba 0f00 	cmp.w	sl, #0
 8007cee:	dd08      	ble.n	8007d02 <_strtod_l+0x782>
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	4652      	mov	r2, sl
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff f9d3 	bl	80070a0 <__lshift>
 8007cfa:	4683      	mov	fp, r0
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f43f ae83 	beq.w	8007a08 <_strtod_l+0x488>
 8007d02:	9a05      	ldr	r2, [sp, #20]
 8007d04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7ff fa52 	bl	80071b0 <__mdiff>
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	f43f ae7a 	beq.w	8007a08 <_strtod_l+0x488>
 8007d14:	68c3      	ldr	r3, [r0, #12]
 8007d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60c3      	str	r3, [r0, #12]
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	f7ff fa2b 	bl	8007178 <__mcmp>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	da60      	bge.n	8007de8 <_strtod_l+0x868>
 8007d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d28:	ea53 0308 	orrs.w	r3, r3, r8
 8007d2c:	f040 8084 	bne.w	8007e38 <_strtod_l+0x8b8>
 8007d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d17f      	bne.n	8007e38 <_strtod_l+0x8b8>
 8007d38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d3c:	0d1b      	lsrs	r3, r3, #20
 8007d3e:	051b      	lsls	r3, r3, #20
 8007d40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007d44:	d978      	bls.n	8007e38 <_strtod_l+0x8b8>
 8007d46:	696b      	ldr	r3, [r5, #20]
 8007d48:	b913      	cbnz	r3, 8007d50 <_strtod_l+0x7d0>
 8007d4a:	692b      	ldr	r3, [r5, #16]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	dd73      	ble.n	8007e38 <_strtod_l+0x8b8>
 8007d50:	4629      	mov	r1, r5
 8007d52:	2201      	movs	r2, #1
 8007d54:	4620      	mov	r0, r4
 8007d56:	f7ff f9a3 	bl	80070a0 <__lshift>
 8007d5a:	4659      	mov	r1, fp
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	f7ff fa0b 	bl	8007178 <__mcmp>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	dd68      	ble.n	8007e38 <_strtod_l+0x8b8>
 8007d66:	9904      	ldr	r1, [sp, #16]
 8007d68:	4a54      	ldr	r2, [pc, #336]	; (8007ebc <_strtod_l+0x93c>)
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	f000 8084 	beq.w	8007e7a <_strtod_l+0x8fa>
 8007d72:	ea02 0109 	and.w	r1, r2, r9
 8007d76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007d7a:	dc7e      	bgt.n	8007e7a <_strtod_l+0x8fa>
 8007d7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007d80:	f77f aeb3 	ble.w	8007aea <_strtod_l+0x56a>
 8007d84:	4b4e      	ldr	r3, [pc, #312]	; (8007ec0 <_strtod_l+0x940>)
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f7f8 fc3c 	bl	8000608 <__aeabi_dmul>
 8007d90:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <_strtod_l+0x93c>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	4680      	mov	r8, r0
 8007d96:	4689      	mov	r9, r1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f ae3f 	bne.w	8007a1c <_strtod_l+0x49c>
 8007d9e:	2322      	movs	r3, #34	; 0x22
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	e63b      	b.n	8007a1c <_strtod_l+0x49c>
 8007da4:	f04f 32ff 	mov.w	r2, #4294967295
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	ea03 0808 	and.w	r8, r3, r8
 8007db0:	e6e8      	b.n	8007b84 <_strtod_l+0x604>
 8007db2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007db6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007dba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007dbe:	36e2      	adds	r6, #226	; 0xe2
 8007dc0:	fa01 f306 	lsl.w	r3, r1, r6
 8007dc4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007dc8:	e748      	b.n	8007c5c <_strtod_l+0x6dc>
 8007dca:	2100      	movs	r1, #0
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007dd2:	e743      	b.n	8007c5c <_strtod_l+0x6dc>
 8007dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007dd6:	4632      	mov	r2, r6
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f7ff f961 	bl	80070a0 <__lshift>
 8007dde:	9016      	str	r0, [sp, #88]	; 0x58
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f47f af6b 	bne.w	8007cbc <_strtod_l+0x73c>
 8007de6:	e60f      	b.n	8007a08 <_strtod_l+0x488>
 8007de8:	46ca      	mov	sl, r9
 8007dea:	d171      	bne.n	8007ed0 <_strtod_l+0x950>
 8007dec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007df2:	b352      	cbz	r2, 8007e4a <_strtod_l+0x8ca>
 8007df4:	4a33      	ldr	r2, [pc, #204]	; (8007ec4 <_strtod_l+0x944>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d12a      	bne.n	8007e50 <_strtod_l+0x8d0>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	b1fb      	cbz	r3, 8007e40 <_strtod_l+0x8c0>
 8007e00:	4b2e      	ldr	r3, [pc, #184]	; (8007ebc <_strtod_l+0x93c>)
 8007e02:	ea09 0303 	and.w	r3, r9, r3
 8007e06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	d81a      	bhi.n	8007e46 <_strtod_l+0x8c6>
 8007e10:	0d1b      	lsrs	r3, r3, #20
 8007e12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	d118      	bne.n	8007e50 <_strtod_l+0x8d0>
 8007e1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ec8 <_strtod_l+0x948>)
 8007e20:	459a      	cmp	sl, r3
 8007e22:	d102      	bne.n	8007e2a <_strtod_l+0x8aa>
 8007e24:	3101      	adds	r1, #1
 8007e26:	f43f adef 	beq.w	8007a08 <_strtod_l+0x488>
 8007e2a:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <_strtod_l+0x93c>)
 8007e2c:	ea0a 0303 	and.w	r3, sl, r3
 8007e30:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007e34:	f04f 0800 	mov.w	r8, #0
 8007e38:	9b04      	ldr	r3, [sp, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1a2      	bne.n	8007d84 <_strtod_l+0x804>
 8007e3e:	e5ed      	b.n	8007a1c <_strtod_l+0x49c>
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	e7e9      	b.n	8007e1a <_strtod_l+0x89a>
 8007e46:	4613      	mov	r3, r2
 8007e48:	e7e7      	b.n	8007e1a <_strtod_l+0x89a>
 8007e4a:	ea53 0308 	orrs.w	r3, r3, r8
 8007e4e:	d08a      	beq.n	8007d66 <_strtod_l+0x7e6>
 8007e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e52:	b1e3      	cbz	r3, 8007e8e <_strtod_l+0x90e>
 8007e54:	ea13 0f0a 	tst.w	r3, sl
 8007e58:	d0ee      	beq.n	8007e38 <_strtod_l+0x8b8>
 8007e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	4640      	mov	r0, r8
 8007e60:	4649      	mov	r1, r9
 8007e62:	b1c3      	cbz	r3, 8007e96 <_strtod_l+0x916>
 8007e64:	f7ff fb6f 	bl	8007546 <sulp>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	ec51 0b18 	vmov	r0, r1, d8
 8007e70:	f7f8 fa14 	bl	800029c <__adddf3>
 8007e74:	4680      	mov	r8, r0
 8007e76:	4689      	mov	r9, r1
 8007e78:	e7de      	b.n	8007e38 <_strtod_l+0x8b8>
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007e80:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007e84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007e88:	f04f 38ff 	mov.w	r8, #4294967295
 8007e8c:	e7d4      	b.n	8007e38 <_strtod_l+0x8b8>
 8007e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e90:	ea13 0f08 	tst.w	r3, r8
 8007e94:	e7e0      	b.n	8007e58 <_strtod_l+0x8d8>
 8007e96:	f7ff fb56 	bl	8007546 <sulp>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	ec51 0b18 	vmov	r0, r1, d8
 8007ea2:	f7f8 f9f9 	bl	8000298 <__aeabi_dsub>
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	4680      	mov	r8, r0
 8007eac:	4689      	mov	r9, r1
 8007eae:	f7f8 fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d0c0      	beq.n	8007e38 <_strtod_l+0x8b8>
 8007eb6:	e618      	b.n	8007aea <_strtod_l+0x56a>
 8007eb8:	fffffc02 	.word	0xfffffc02
 8007ebc:	7ff00000 	.word	0x7ff00000
 8007ec0:	39500000 	.word	0x39500000
 8007ec4:	000fffff 	.word	0x000fffff
 8007ec8:	7fefffff 	.word	0x7fefffff
 8007ecc:	080096d8 	.word	0x080096d8
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fac0 	bl	8007458 <__ratio>
 8007ed8:	ec57 6b10 	vmov	r6, r7, d0
 8007edc:	ee10 0a10 	vmov	r0, s0
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 fe0a 	bl	8000b00 <__aeabi_dcmple>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d071      	beq.n	8007fd4 <_strtod_l+0xa54>
 8007ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d17c      	bne.n	8007ff0 <_strtod_l+0xa70>
 8007ef6:	f1b8 0f00 	cmp.w	r8, #0
 8007efa:	d15a      	bne.n	8007fb2 <_strtod_l+0xa32>
 8007efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d15d      	bne.n	8007fc0 <_strtod_l+0xa40>
 8007f04:	4b90      	ldr	r3, [pc, #576]	; (8008148 <_strtod_l+0xbc8>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	4630      	mov	r0, r6
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	f7f8 fdee 	bl	8000aec <__aeabi_dcmplt>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d15c      	bne.n	8007fce <_strtod_l+0xa4e>
 8007f14:	4630      	mov	r0, r6
 8007f16:	4639      	mov	r1, r7
 8007f18:	4b8c      	ldr	r3, [pc, #560]	; (800814c <_strtod_l+0xbcc>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007f28:	9606      	str	r6, [sp, #24]
 8007f2a:	9307      	str	r3, [sp, #28]
 8007f2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007f34:	4b86      	ldr	r3, [pc, #536]	; (8008150 <_strtod_l+0xbd0>)
 8007f36:	ea0a 0303 	and.w	r3, sl, r3
 8007f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f3e:	4b85      	ldr	r3, [pc, #532]	; (8008154 <_strtod_l+0xbd4>)
 8007f40:	429a      	cmp	r2, r3
 8007f42:	f040 8090 	bne.w	8008066 <_strtod_l+0xae6>
 8007f46:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007f4a:	ec49 8b10 	vmov	d0, r8, r9
 8007f4e:	f7ff f9b9 	bl	80072c4 <__ulp>
 8007f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f56:	ec51 0b10 	vmov	r0, r1, d0
 8007f5a:	f7f8 fb55 	bl	8000608 <__aeabi_dmul>
 8007f5e:	4642      	mov	r2, r8
 8007f60:	464b      	mov	r3, r9
 8007f62:	f7f8 f99b 	bl	800029c <__adddf3>
 8007f66:	460b      	mov	r3, r1
 8007f68:	4979      	ldr	r1, [pc, #484]	; (8008150 <_strtod_l+0xbd0>)
 8007f6a:	4a7b      	ldr	r2, [pc, #492]	; (8008158 <_strtod_l+0xbd8>)
 8007f6c:	4019      	ands	r1, r3
 8007f6e:	4291      	cmp	r1, r2
 8007f70:	4680      	mov	r8, r0
 8007f72:	d944      	bls.n	8007ffe <_strtod_l+0xa7e>
 8007f74:	ee18 2a90 	vmov	r2, s17
 8007f78:	4b78      	ldr	r3, [pc, #480]	; (800815c <_strtod_l+0xbdc>)
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d104      	bne.n	8007f88 <_strtod_l+0xa08>
 8007f7e:	ee18 3a10 	vmov	r3, s16
 8007f82:	3301      	adds	r3, #1
 8007f84:	f43f ad40 	beq.w	8007a08 <_strtod_l+0x488>
 8007f88:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800815c <_strtod_l+0xbdc>
 8007f8c:	f04f 38ff 	mov.w	r8, #4294967295
 8007f90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7fe fe6a 	bl	8006c6c <_Bfree>
 8007f98:	9905      	ldr	r1, [sp, #20]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7fe fe66 	bl	8006c6c <_Bfree>
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f7fe fe62 	bl	8006c6c <_Bfree>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7fe fe5e 	bl	8006c6c <_Bfree>
 8007fb0:	e609      	b.n	8007bc6 <_strtod_l+0x646>
 8007fb2:	f1b8 0f01 	cmp.w	r8, #1
 8007fb6:	d103      	bne.n	8007fc0 <_strtod_l+0xa40>
 8007fb8:	f1b9 0f00 	cmp.w	r9, #0
 8007fbc:	f43f ad95 	beq.w	8007aea <_strtod_l+0x56a>
 8007fc0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008118 <_strtod_l+0xb98>
 8007fc4:	4f60      	ldr	r7, [pc, #384]	; (8008148 <_strtod_l+0xbc8>)
 8007fc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fca:	2600      	movs	r6, #0
 8007fcc:	e7ae      	b.n	8007f2c <_strtod_l+0x9ac>
 8007fce:	4f5f      	ldr	r7, [pc, #380]	; (800814c <_strtod_l+0xbcc>)
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	e7a7      	b.n	8007f24 <_strtod_l+0x9a4>
 8007fd4:	4b5d      	ldr	r3, [pc, #372]	; (800814c <_strtod_l+0xbcc>)
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	4639      	mov	r1, r7
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d09c      	beq.n	8007f24 <_strtod_l+0x9a4>
 8007fea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fee:	e79d      	b.n	8007f2c <_strtod_l+0x9ac>
 8007ff0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008120 <_strtod_l+0xba0>
 8007ff4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ff8:	ec57 6b17 	vmov	r6, r7, d7
 8007ffc:	e796      	b.n	8007f2c <_strtod_l+0x9ac>
 8007ffe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	46ca      	mov	sl, r9
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1c2      	bne.n	8007f90 <_strtod_l+0xa10>
 800800a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800800e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	051b      	lsls	r3, r3, #20
 8008014:	429a      	cmp	r2, r3
 8008016:	d1bb      	bne.n	8007f90 <_strtod_l+0xa10>
 8008018:	4630      	mov	r0, r6
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fe54 	bl	8000cc8 <__aeabi_d2lz>
 8008020:	f7f8 fac4 	bl	80005ac <__aeabi_l2d>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4630      	mov	r0, r6
 800802a:	4639      	mov	r1, r7
 800802c:	f7f8 f934 	bl	8000298 <__aeabi_dsub>
 8008030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008032:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008036:	ea43 0308 	orr.w	r3, r3, r8
 800803a:	4313      	orrs	r3, r2
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	d054      	beq.n	80080ec <_strtod_l+0xb6c>
 8008042:	a339      	add	r3, pc, #228	; (adr r3, 8008128 <_strtod_l+0xba8>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 fd50 	bl	8000aec <__aeabi_dcmplt>
 800804c:	2800      	cmp	r0, #0
 800804e:	f47f ace5 	bne.w	8007a1c <_strtod_l+0x49c>
 8008052:	a337      	add	r3, pc, #220	; (adr r3, 8008130 <_strtod_l+0xbb0>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fd64 	bl	8000b28 <__aeabi_dcmpgt>
 8008060:	2800      	cmp	r0, #0
 8008062:	d095      	beq.n	8007f90 <_strtod_l+0xa10>
 8008064:	e4da      	b.n	8007a1c <_strtod_l+0x49c>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	b333      	cbz	r3, 80080b8 <_strtod_l+0xb38>
 800806a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800806c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008070:	d822      	bhi.n	80080b8 <_strtod_l+0xb38>
 8008072:	a331      	add	r3, pc, #196	; (adr r3, 8008138 <_strtod_l+0xbb8>)
 8008074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fd40 	bl	8000b00 <__aeabi_dcmple>
 8008080:	b1a0      	cbz	r0, 80080ac <_strtod_l+0xb2c>
 8008082:	4639      	mov	r1, r7
 8008084:	4630      	mov	r0, r6
 8008086:	f7f8 fd97 	bl	8000bb8 <__aeabi_d2uiz>
 800808a:	2801      	cmp	r0, #1
 800808c:	bf38      	it	cc
 800808e:	2001      	movcc	r0, #1
 8008090:	f7f8 fa40 	bl	8000514 <__aeabi_ui2d>
 8008094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008096:	4606      	mov	r6, r0
 8008098:	460f      	mov	r7, r1
 800809a:	bb23      	cbnz	r3, 80080e6 <_strtod_l+0xb66>
 800809c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080a0:	9010      	str	r0, [sp, #64]	; 0x40
 80080a2:	9311      	str	r3, [sp, #68]	; 0x44
 80080a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80080ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80080bc:	eeb0 0a48 	vmov.f32	s0, s16
 80080c0:	eef0 0a68 	vmov.f32	s1, s17
 80080c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80080c8:	f7ff f8fc 	bl	80072c4 <__ulp>
 80080cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80080d0:	ec53 2b10 	vmov	r2, r3, d0
 80080d4:	f7f8 fa98 	bl	8000608 <__aeabi_dmul>
 80080d8:	ec53 2b18 	vmov	r2, r3, d8
 80080dc:	f7f8 f8de 	bl	800029c <__adddf3>
 80080e0:	4680      	mov	r8, r0
 80080e2:	4689      	mov	r9, r1
 80080e4:	e78d      	b.n	8008002 <_strtod_l+0xa82>
 80080e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80080ea:	e7db      	b.n	80080a4 <_strtod_l+0xb24>
 80080ec:	a314      	add	r3, pc, #80	; (adr r3, 8008140 <_strtod_l+0xbc0>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	f7f8 fcfb 	bl	8000aec <__aeabi_dcmplt>
 80080f6:	e7b3      	b.n	8008060 <_strtod_l+0xae0>
 80080f8:	2300      	movs	r3, #0
 80080fa:	930a      	str	r3, [sp, #40]	; 0x28
 80080fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	f7ff ba7c 	b.w	80075fe <_strtod_l+0x7e>
 8008106:	2a65      	cmp	r2, #101	; 0x65
 8008108:	f43f ab75 	beq.w	80077f6 <_strtod_l+0x276>
 800810c:	2a45      	cmp	r2, #69	; 0x45
 800810e:	f43f ab72 	beq.w	80077f6 <_strtod_l+0x276>
 8008112:	2301      	movs	r3, #1
 8008114:	f7ff bbaa 	b.w	800786c <_strtod_l+0x2ec>
 8008118:	00000000 	.word	0x00000000
 800811c:	bff00000 	.word	0xbff00000
 8008120:	00000000 	.word	0x00000000
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	94a03595 	.word	0x94a03595
 800812c:	3fdfffff 	.word	0x3fdfffff
 8008130:	35afe535 	.word	0x35afe535
 8008134:	3fe00000 	.word	0x3fe00000
 8008138:	ffc00000 	.word	0xffc00000
 800813c:	41dfffff 	.word	0x41dfffff
 8008140:	94a03595 	.word	0x94a03595
 8008144:	3fcfffff 	.word	0x3fcfffff
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	3fe00000 	.word	0x3fe00000
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	7fe00000 	.word	0x7fe00000
 8008158:	7c9fffff 	.word	0x7c9fffff
 800815c:	7fefffff 	.word	0x7fefffff

08008160 <_strtod_r>:
 8008160:	4b01      	ldr	r3, [pc, #4]	; (8008168 <_strtod_r+0x8>)
 8008162:	f7ff ba0d 	b.w	8007580 <_strtod_l>
 8008166:	bf00      	nop
 8008168:	20000068 	.word	0x20000068

0800816c <_strtol_l.constprop.0>:
 800816c:	2b01      	cmp	r3, #1
 800816e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008172:	d001      	beq.n	8008178 <_strtol_l.constprop.0+0xc>
 8008174:	2b24      	cmp	r3, #36	; 0x24
 8008176:	d906      	bls.n	8008186 <_strtol_l.constprop.0+0x1a>
 8008178:	f7fd fd8a 	bl	8005c90 <__errno>
 800817c:	2316      	movs	r3, #22
 800817e:	6003      	str	r3, [r0, #0]
 8008180:	2000      	movs	r0, #0
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008186:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800826c <_strtol_l.constprop.0+0x100>
 800818a:	460d      	mov	r5, r1
 800818c:	462e      	mov	r6, r5
 800818e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008192:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008196:	f017 0708 	ands.w	r7, r7, #8
 800819a:	d1f7      	bne.n	800818c <_strtol_l.constprop.0+0x20>
 800819c:	2c2d      	cmp	r4, #45	; 0x2d
 800819e:	d132      	bne.n	8008206 <_strtol_l.constprop.0+0x9a>
 80081a0:	782c      	ldrb	r4, [r5, #0]
 80081a2:	2701      	movs	r7, #1
 80081a4:	1cb5      	adds	r5, r6, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d05b      	beq.n	8008262 <_strtol_l.constprop.0+0xf6>
 80081aa:	2b10      	cmp	r3, #16
 80081ac:	d109      	bne.n	80081c2 <_strtol_l.constprop.0+0x56>
 80081ae:	2c30      	cmp	r4, #48	; 0x30
 80081b0:	d107      	bne.n	80081c2 <_strtol_l.constprop.0+0x56>
 80081b2:	782c      	ldrb	r4, [r5, #0]
 80081b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80081b8:	2c58      	cmp	r4, #88	; 0x58
 80081ba:	d14d      	bne.n	8008258 <_strtol_l.constprop.0+0xec>
 80081bc:	786c      	ldrb	r4, [r5, #1]
 80081be:	2310      	movs	r3, #16
 80081c0:	3502      	adds	r5, #2
 80081c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80081c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80081ca:	f04f 0e00 	mov.w	lr, #0
 80081ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80081d2:	4676      	mov	r6, lr
 80081d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80081d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80081dc:	f1bc 0f09 	cmp.w	ip, #9
 80081e0:	d816      	bhi.n	8008210 <_strtol_l.constprop.0+0xa4>
 80081e2:	4664      	mov	r4, ip
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	dd24      	ble.n	8008232 <_strtol_l.constprop.0+0xc6>
 80081e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80081ec:	d008      	beq.n	8008200 <_strtol_l.constprop.0+0x94>
 80081ee:	45b1      	cmp	r9, r6
 80081f0:	d31c      	bcc.n	800822c <_strtol_l.constprop.0+0xc0>
 80081f2:	d101      	bne.n	80081f8 <_strtol_l.constprop.0+0x8c>
 80081f4:	45a2      	cmp	sl, r4
 80081f6:	db19      	blt.n	800822c <_strtol_l.constprop.0+0xc0>
 80081f8:	fb06 4603 	mla	r6, r6, r3, r4
 80081fc:	f04f 0e01 	mov.w	lr, #1
 8008200:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008204:	e7e8      	b.n	80081d8 <_strtol_l.constprop.0+0x6c>
 8008206:	2c2b      	cmp	r4, #43	; 0x2b
 8008208:	bf04      	itt	eq
 800820a:	782c      	ldrbeq	r4, [r5, #0]
 800820c:	1cb5      	addeq	r5, r6, #2
 800820e:	e7ca      	b.n	80081a6 <_strtol_l.constprop.0+0x3a>
 8008210:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008214:	f1bc 0f19 	cmp.w	ip, #25
 8008218:	d801      	bhi.n	800821e <_strtol_l.constprop.0+0xb2>
 800821a:	3c37      	subs	r4, #55	; 0x37
 800821c:	e7e2      	b.n	80081e4 <_strtol_l.constprop.0+0x78>
 800821e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008222:	f1bc 0f19 	cmp.w	ip, #25
 8008226:	d804      	bhi.n	8008232 <_strtol_l.constprop.0+0xc6>
 8008228:	3c57      	subs	r4, #87	; 0x57
 800822a:	e7db      	b.n	80081e4 <_strtol_l.constprop.0+0x78>
 800822c:	f04f 3eff 	mov.w	lr, #4294967295
 8008230:	e7e6      	b.n	8008200 <_strtol_l.constprop.0+0x94>
 8008232:	f1be 3fff 	cmp.w	lr, #4294967295
 8008236:	d105      	bne.n	8008244 <_strtol_l.constprop.0+0xd8>
 8008238:	2322      	movs	r3, #34	; 0x22
 800823a:	6003      	str	r3, [r0, #0]
 800823c:	4646      	mov	r6, r8
 800823e:	b942      	cbnz	r2, 8008252 <_strtol_l.constprop.0+0xe6>
 8008240:	4630      	mov	r0, r6
 8008242:	e79e      	b.n	8008182 <_strtol_l.constprop.0+0x16>
 8008244:	b107      	cbz	r7, 8008248 <_strtol_l.constprop.0+0xdc>
 8008246:	4276      	negs	r6, r6
 8008248:	2a00      	cmp	r2, #0
 800824a:	d0f9      	beq.n	8008240 <_strtol_l.constprop.0+0xd4>
 800824c:	f1be 0f00 	cmp.w	lr, #0
 8008250:	d000      	beq.n	8008254 <_strtol_l.constprop.0+0xe8>
 8008252:	1e69      	subs	r1, r5, #1
 8008254:	6011      	str	r1, [r2, #0]
 8008256:	e7f3      	b.n	8008240 <_strtol_l.constprop.0+0xd4>
 8008258:	2430      	movs	r4, #48	; 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1b1      	bne.n	80081c2 <_strtol_l.constprop.0+0x56>
 800825e:	2308      	movs	r3, #8
 8008260:	e7af      	b.n	80081c2 <_strtol_l.constprop.0+0x56>
 8008262:	2c30      	cmp	r4, #48	; 0x30
 8008264:	d0a5      	beq.n	80081b2 <_strtol_l.constprop.0+0x46>
 8008266:	230a      	movs	r3, #10
 8008268:	e7ab      	b.n	80081c2 <_strtol_l.constprop.0+0x56>
 800826a:	bf00      	nop
 800826c:	08009701 	.word	0x08009701

08008270 <_strtol_r>:
 8008270:	f7ff bf7c 	b.w	800816c <_strtol_l.constprop.0>

08008274 <__ssputs_r>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	688e      	ldr	r6, [r1, #8]
 800827a:	461f      	mov	r7, r3
 800827c:	42be      	cmp	r6, r7
 800827e:	680b      	ldr	r3, [r1, #0]
 8008280:	4682      	mov	sl, r0
 8008282:	460c      	mov	r4, r1
 8008284:	4690      	mov	r8, r2
 8008286:	d82c      	bhi.n	80082e2 <__ssputs_r+0x6e>
 8008288:	898a      	ldrh	r2, [r1, #12]
 800828a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800828e:	d026      	beq.n	80082de <__ssputs_r+0x6a>
 8008290:	6965      	ldr	r5, [r4, #20]
 8008292:	6909      	ldr	r1, [r1, #16]
 8008294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008298:	eba3 0901 	sub.w	r9, r3, r1
 800829c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082a0:	1c7b      	adds	r3, r7, #1
 80082a2:	444b      	add	r3, r9
 80082a4:	106d      	asrs	r5, r5, #1
 80082a6:	429d      	cmp	r5, r3
 80082a8:	bf38      	it	cc
 80082aa:	461d      	movcc	r5, r3
 80082ac:	0553      	lsls	r3, r2, #21
 80082ae:	d527      	bpl.n	8008300 <__ssputs_r+0x8c>
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7fe fc0f 	bl	8006ad4 <_malloc_r>
 80082b6:	4606      	mov	r6, r0
 80082b8:	b360      	cbz	r0, 8008314 <__ssputs_r+0xa0>
 80082ba:	6921      	ldr	r1, [r4, #16]
 80082bc:	464a      	mov	r2, r9
 80082be:	f000 fbf5 	bl	8008aac <memcpy>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	6126      	str	r6, [r4, #16]
 80082d0:	6165      	str	r5, [r4, #20]
 80082d2:	444e      	add	r6, r9
 80082d4:	eba5 0509 	sub.w	r5, r5, r9
 80082d8:	6026      	str	r6, [r4, #0]
 80082da:	60a5      	str	r5, [r4, #8]
 80082dc:	463e      	mov	r6, r7
 80082de:	42be      	cmp	r6, r7
 80082e0:	d900      	bls.n	80082e4 <__ssputs_r+0x70>
 80082e2:	463e      	mov	r6, r7
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	4632      	mov	r2, r6
 80082e8:	4641      	mov	r1, r8
 80082ea:	f000 fba3 	bl	8008a34 <memmove>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	1b9b      	subs	r3, r3, r6
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	4433      	add	r3, r6
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	462a      	mov	r2, r5
 8008302:	f000 ff86 	bl	8009212 <_realloc_r>
 8008306:	4606      	mov	r6, r0
 8008308:	2800      	cmp	r0, #0
 800830a:	d1e0      	bne.n	80082ce <__ssputs_r+0x5a>
 800830c:	6921      	ldr	r1, [r4, #16]
 800830e:	4650      	mov	r0, sl
 8008310:	f7fe fb6c 	bl	80069ec <_free_r>
 8008314:	230c      	movs	r3, #12
 8008316:	f8ca 3000 	str.w	r3, [sl]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295
 8008326:	e7e9      	b.n	80082fc <__ssputs_r+0x88>

08008328 <_svfiprintf_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	4698      	mov	r8, r3
 800832e:	898b      	ldrh	r3, [r1, #12]
 8008330:	061b      	lsls	r3, r3, #24
 8008332:	b09d      	sub	sp, #116	; 0x74
 8008334:	4607      	mov	r7, r0
 8008336:	460d      	mov	r5, r1
 8008338:	4614      	mov	r4, r2
 800833a:	d50e      	bpl.n	800835a <_svfiprintf_r+0x32>
 800833c:	690b      	ldr	r3, [r1, #16]
 800833e:	b963      	cbnz	r3, 800835a <_svfiprintf_r+0x32>
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	f7fe fbc7 	bl	8006ad4 <_malloc_r>
 8008346:	6028      	str	r0, [r5, #0]
 8008348:	6128      	str	r0, [r5, #16]
 800834a:	b920      	cbnz	r0, 8008356 <_svfiprintf_r+0x2e>
 800834c:	230c      	movs	r3, #12
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	f04f 30ff 	mov.w	r0, #4294967295
 8008354:	e0d0      	b.n	80084f8 <_svfiprintf_r+0x1d0>
 8008356:	2340      	movs	r3, #64	; 0x40
 8008358:	616b      	str	r3, [r5, #20]
 800835a:	2300      	movs	r3, #0
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	2320      	movs	r3, #32
 8008360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	2330      	movs	r3, #48	; 0x30
 800836a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008510 <_svfiprintf_r+0x1e8>
 800836e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008372:	f04f 0901 	mov.w	r9, #1
 8008376:	4623      	mov	r3, r4
 8008378:	469a      	mov	sl, r3
 800837a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837e:	b10a      	cbz	r2, 8008384 <_svfiprintf_r+0x5c>
 8008380:	2a25      	cmp	r2, #37	; 0x25
 8008382:	d1f9      	bne.n	8008378 <_svfiprintf_r+0x50>
 8008384:	ebba 0b04 	subs.w	fp, sl, r4
 8008388:	d00b      	beq.n	80083a2 <_svfiprintf_r+0x7a>
 800838a:	465b      	mov	r3, fp
 800838c:	4622      	mov	r2, r4
 800838e:	4629      	mov	r1, r5
 8008390:	4638      	mov	r0, r7
 8008392:	f7ff ff6f 	bl	8008274 <__ssputs_r>
 8008396:	3001      	adds	r0, #1
 8008398:	f000 80a9 	beq.w	80084ee <_svfiprintf_r+0x1c6>
 800839c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800839e:	445a      	add	r2, fp
 80083a0:	9209      	str	r2, [sp, #36]	; 0x24
 80083a2:	f89a 3000 	ldrb.w	r3, [sl]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 80a1 	beq.w	80084ee <_svfiprintf_r+0x1c6>
 80083ac:	2300      	movs	r3, #0
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b6:	f10a 0a01 	add.w	sl, sl, #1
 80083ba:	9304      	str	r3, [sp, #16]
 80083bc:	9307      	str	r3, [sp, #28]
 80083be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083c2:	931a      	str	r3, [sp, #104]	; 0x68
 80083c4:	4654      	mov	r4, sl
 80083c6:	2205      	movs	r2, #5
 80083c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083cc:	4850      	ldr	r0, [pc, #320]	; (8008510 <_svfiprintf_r+0x1e8>)
 80083ce:	f7f7 ff07 	bl	80001e0 <memchr>
 80083d2:	9a04      	ldr	r2, [sp, #16]
 80083d4:	b9d8      	cbnz	r0, 800840e <_svfiprintf_r+0xe6>
 80083d6:	06d0      	lsls	r0, r2, #27
 80083d8:	bf44      	itt	mi
 80083da:	2320      	movmi	r3, #32
 80083dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e0:	0711      	lsls	r1, r2, #28
 80083e2:	bf44      	itt	mi
 80083e4:	232b      	movmi	r3, #43	; 0x2b
 80083e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ea:	f89a 3000 	ldrb.w	r3, [sl]
 80083ee:	2b2a      	cmp	r3, #42	; 0x2a
 80083f0:	d015      	beq.n	800841e <_svfiprintf_r+0xf6>
 80083f2:	9a07      	ldr	r2, [sp, #28]
 80083f4:	4654      	mov	r4, sl
 80083f6:	2000      	movs	r0, #0
 80083f8:	f04f 0c0a 	mov.w	ip, #10
 80083fc:	4621      	mov	r1, r4
 80083fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008402:	3b30      	subs	r3, #48	; 0x30
 8008404:	2b09      	cmp	r3, #9
 8008406:	d94d      	bls.n	80084a4 <_svfiprintf_r+0x17c>
 8008408:	b1b0      	cbz	r0, 8008438 <_svfiprintf_r+0x110>
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	e014      	b.n	8008438 <_svfiprintf_r+0x110>
 800840e:	eba0 0308 	sub.w	r3, r0, r8
 8008412:	fa09 f303 	lsl.w	r3, r9, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	9304      	str	r3, [sp, #16]
 800841a:	46a2      	mov	sl, r4
 800841c:	e7d2      	b.n	80083c4 <_svfiprintf_r+0x9c>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d19      	adds	r1, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9103      	str	r1, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfbb      	ittet	lt
 800842a:	425b      	neglt	r3, r3
 800842c:	f042 0202 	orrlt.w	r2, r2, #2
 8008430:	9307      	strge	r3, [sp, #28]
 8008432:	9307      	strlt	r3, [sp, #28]
 8008434:	bfb8      	it	lt
 8008436:	9204      	strlt	r2, [sp, #16]
 8008438:	7823      	ldrb	r3, [r4, #0]
 800843a:	2b2e      	cmp	r3, #46	; 0x2e
 800843c:	d10c      	bne.n	8008458 <_svfiprintf_r+0x130>
 800843e:	7863      	ldrb	r3, [r4, #1]
 8008440:	2b2a      	cmp	r3, #42	; 0x2a
 8008442:	d134      	bne.n	80084ae <_svfiprintf_r+0x186>
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	1d1a      	adds	r2, r3, #4
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	9203      	str	r2, [sp, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	bfb8      	it	lt
 8008450:	f04f 33ff 	movlt.w	r3, #4294967295
 8008454:	3402      	adds	r4, #2
 8008456:	9305      	str	r3, [sp, #20]
 8008458:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008520 <_svfiprintf_r+0x1f8>
 800845c:	7821      	ldrb	r1, [r4, #0]
 800845e:	2203      	movs	r2, #3
 8008460:	4650      	mov	r0, sl
 8008462:	f7f7 febd 	bl	80001e0 <memchr>
 8008466:	b138      	cbz	r0, 8008478 <_svfiprintf_r+0x150>
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	eba0 000a 	sub.w	r0, r0, sl
 800846e:	2240      	movs	r2, #64	; 0x40
 8008470:	4082      	lsls	r2, r0
 8008472:	4313      	orrs	r3, r2
 8008474:	3401      	adds	r4, #1
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800847c:	4825      	ldr	r0, [pc, #148]	; (8008514 <_svfiprintf_r+0x1ec>)
 800847e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008482:	2206      	movs	r2, #6
 8008484:	f7f7 feac 	bl	80001e0 <memchr>
 8008488:	2800      	cmp	r0, #0
 800848a:	d038      	beq.n	80084fe <_svfiprintf_r+0x1d6>
 800848c:	4b22      	ldr	r3, [pc, #136]	; (8008518 <_svfiprintf_r+0x1f0>)
 800848e:	bb1b      	cbnz	r3, 80084d8 <_svfiprintf_r+0x1b0>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	3307      	adds	r3, #7
 8008494:	f023 0307 	bic.w	r3, r3, #7
 8008498:	3308      	adds	r3, #8
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	4433      	add	r3, r6
 80084a0:	9309      	str	r3, [sp, #36]	; 0x24
 80084a2:	e768      	b.n	8008376 <_svfiprintf_r+0x4e>
 80084a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a8:	460c      	mov	r4, r1
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7a6      	b.n	80083fc <_svfiprintf_r+0xd4>
 80084ae:	2300      	movs	r3, #0
 80084b0:	3401      	adds	r4, #1
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	4619      	mov	r1, r3
 80084b6:	f04f 0c0a 	mov.w	ip, #10
 80084ba:	4620      	mov	r0, r4
 80084bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c0:	3a30      	subs	r2, #48	; 0x30
 80084c2:	2a09      	cmp	r2, #9
 80084c4:	d903      	bls.n	80084ce <_svfiprintf_r+0x1a6>
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0c6      	beq.n	8008458 <_svfiprintf_r+0x130>
 80084ca:	9105      	str	r1, [sp, #20]
 80084cc:	e7c4      	b.n	8008458 <_svfiprintf_r+0x130>
 80084ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d2:	4604      	mov	r4, r0
 80084d4:	2301      	movs	r3, #1
 80084d6:	e7f0      	b.n	80084ba <_svfiprintf_r+0x192>
 80084d8:	ab03      	add	r3, sp, #12
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	462a      	mov	r2, r5
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <_svfiprintf_r+0x1f4>)
 80084e0:	a904      	add	r1, sp, #16
 80084e2:	4638      	mov	r0, r7
 80084e4:	f7fc fc86 	bl	8004df4 <_printf_float>
 80084e8:	1c42      	adds	r2, r0, #1
 80084ea:	4606      	mov	r6, r0
 80084ec:	d1d6      	bne.n	800849c <_svfiprintf_r+0x174>
 80084ee:	89ab      	ldrh	r3, [r5, #12]
 80084f0:	065b      	lsls	r3, r3, #25
 80084f2:	f53f af2d 	bmi.w	8008350 <_svfiprintf_r+0x28>
 80084f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f8:	b01d      	add	sp, #116	; 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <_svfiprintf_r+0x1f4>)
 8008506:	a904      	add	r1, sp, #16
 8008508:	4638      	mov	r0, r7
 800850a:	f7fc ff17 	bl	800533c <_printf_i>
 800850e:	e7eb      	b.n	80084e8 <_svfiprintf_r+0x1c0>
 8008510:	08009801 	.word	0x08009801
 8008514:	0800980b 	.word	0x0800980b
 8008518:	08004df5 	.word	0x08004df5
 800851c:	08008275 	.word	0x08008275
 8008520:	08009807 	.word	0x08009807

08008524 <__sfputc_r>:
 8008524:	6893      	ldr	r3, [r2, #8]
 8008526:	3b01      	subs	r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	b410      	push	{r4}
 800852c:	6093      	str	r3, [r2, #8]
 800852e:	da08      	bge.n	8008542 <__sfputc_r+0x1e>
 8008530:	6994      	ldr	r4, [r2, #24]
 8008532:	42a3      	cmp	r3, r4
 8008534:	db01      	blt.n	800853a <__sfputc_r+0x16>
 8008536:	290a      	cmp	r1, #10
 8008538:	d103      	bne.n	8008542 <__sfputc_r+0x1e>
 800853a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853e:	f000 b9e3 	b.w	8008908 <__swbuf_r>
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	1c58      	adds	r0, r3, #1
 8008546:	6010      	str	r0, [r2, #0]
 8008548:	7019      	strb	r1, [r3, #0]
 800854a:	4608      	mov	r0, r1
 800854c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008550:	4770      	bx	lr

08008552 <__sfputs_r>:
 8008552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	4614      	mov	r4, r2
 800855a:	18d5      	adds	r5, r2, r3
 800855c:	42ac      	cmp	r4, r5
 800855e:	d101      	bne.n	8008564 <__sfputs_r+0x12>
 8008560:	2000      	movs	r0, #0
 8008562:	e007      	b.n	8008574 <__sfputs_r+0x22>
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	463a      	mov	r2, r7
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ffda 	bl	8008524 <__sfputc_r>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d1f3      	bne.n	800855c <__sfputs_r+0xa>
 8008574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008578 <_vfiprintf_r>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	460d      	mov	r5, r1
 800857e:	b09d      	sub	sp, #116	; 0x74
 8008580:	4614      	mov	r4, r2
 8008582:	4698      	mov	r8, r3
 8008584:	4606      	mov	r6, r0
 8008586:	b118      	cbz	r0, 8008590 <_vfiprintf_r+0x18>
 8008588:	6a03      	ldr	r3, [r0, #32]
 800858a:	b90b      	cbnz	r3, 8008590 <_vfiprintf_r+0x18>
 800858c:	f7fd fa94 	bl	8005ab8 <__sinit>
 8008590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008592:	07d9      	lsls	r1, r3, #31
 8008594:	d405      	bmi.n	80085a2 <_vfiprintf_r+0x2a>
 8008596:	89ab      	ldrh	r3, [r5, #12]
 8008598:	059a      	lsls	r2, r3, #22
 800859a:	d402      	bmi.n	80085a2 <_vfiprintf_r+0x2a>
 800859c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859e:	f7fd fba2 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 80085a2:	89ab      	ldrh	r3, [r5, #12]
 80085a4:	071b      	lsls	r3, r3, #28
 80085a6:	d501      	bpl.n	80085ac <_vfiprintf_r+0x34>
 80085a8:	692b      	ldr	r3, [r5, #16]
 80085aa:	b99b      	cbnz	r3, 80085d4 <_vfiprintf_r+0x5c>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4630      	mov	r0, r6
 80085b0:	f000 f9e8 	bl	8008984 <__swsetup_r>
 80085b4:	b170      	cbz	r0, 80085d4 <_vfiprintf_r+0x5c>
 80085b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b8:	07dc      	lsls	r4, r3, #31
 80085ba:	d504      	bpl.n	80085c6 <_vfiprintf_r+0x4e>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	b01d      	add	sp, #116	; 0x74
 80085c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c6:	89ab      	ldrh	r3, [r5, #12]
 80085c8:	0598      	lsls	r0, r3, #22
 80085ca:	d4f7      	bmi.n	80085bc <_vfiprintf_r+0x44>
 80085cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ce:	f7fd fb8b 	bl	8005ce8 <__retarget_lock_release_recursive>
 80085d2:	e7f3      	b.n	80085bc <_vfiprintf_r+0x44>
 80085d4:	2300      	movs	r3, #0
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	2320      	movs	r3, #32
 80085da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085de:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e2:	2330      	movs	r3, #48	; 0x30
 80085e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008798 <_vfiprintf_r+0x220>
 80085e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085ec:	f04f 0901 	mov.w	r9, #1
 80085f0:	4623      	mov	r3, r4
 80085f2:	469a      	mov	sl, r3
 80085f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f8:	b10a      	cbz	r2, 80085fe <_vfiprintf_r+0x86>
 80085fa:	2a25      	cmp	r2, #37	; 0x25
 80085fc:	d1f9      	bne.n	80085f2 <_vfiprintf_r+0x7a>
 80085fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008602:	d00b      	beq.n	800861c <_vfiprintf_r+0xa4>
 8008604:	465b      	mov	r3, fp
 8008606:	4622      	mov	r2, r4
 8008608:	4629      	mov	r1, r5
 800860a:	4630      	mov	r0, r6
 800860c:	f7ff ffa1 	bl	8008552 <__sfputs_r>
 8008610:	3001      	adds	r0, #1
 8008612:	f000 80a9 	beq.w	8008768 <_vfiprintf_r+0x1f0>
 8008616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008618:	445a      	add	r2, fp
 800861a:	9209      	str	r2, [sp, #36]	; 0x24
 800861c:	f89a 3000 	ldrb.w	r3, [sl]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80a1 	beq.w	8008768 <_vfiprintf_r+0x1f0>
 8008626:	2300      	movs	r3, #0
 8008628:	f04f 32ff 	mov.w	r2, #4294967295
 800862c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008630:	f10a 0a01 	add.w	sl, sl, #1
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800863c:	931a      	str	r3, [sp, #104]	; 0x68
 800863e:	4654      	mov	r4, sl
 8008640:	2205      	movs	r2, #5
 8008642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008646:	4854      	ldr	r0, [pc, #336]	; (8008798 <_vfiprintf_r+0x220>)
 8008648:	f7f7 fdca 	bl	80001e0 <memchr>
 800864c:	9a04      	ldr	r2, [sp, #16]
 800864e:	b9d8      	cbnz	r0, 8008688 <_vfiprintf_r+0x110>
 8008650:	06d1      	lsls	r1, r2, #27
 8008652:	bf44      	itt	mi
 8008654:	2320      	movmi	r3, #32
 8008656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800865a:	0713      	lsls	r3, r2, #28
 800865c:	bf44      	itt	mi
 800865e:	232b      	movmi	r3, #43	; 0x2b
 8008660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008664:	f89a 3000 	ldrb.w	r3, [sl]
 8008668:	2b2a      	cmp	r3, #42	; 0x2a
 800866a:	d015      	beq.n	8008698 <_vfiprintf_r+0x120>
 800866c:	9a07      	ldr	r2, [sp, #28]
 800866e:	4654      	mov	r4, sl
 8008670:	2000      	movs	r0, #0
 8008672:	f04f 0c0a 	mov.w	ip, #10
 8008676:	4621      	mov	r1, r4
 8008678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867c:	3b30      	subs	r3, #48	; 0x30
 800867e:	2b09      	cmp	r3, #9
 8008680:	d94d      	bls.n	800871e <_vfiprintf_r+0x1a6>
 8008682:	b1b0      	cbz	r0, 80086b2 <_vfiprintf_r+0x13a>
 8008684:	9207      	str	r2, [sp, #28]
 8008686:	e014      	b.n	80086b2 <_vfiprintf_r+0x13a>
 8008688:	eba0 0308 	sub.w	r3, r0, r8
 800868c:	fa09 f303 	lsl.w	r3, r9, r3
 8008690:	4313      	orrs	r3, r2
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	46a2      	mov	sl, r4
 8008696:	e7d2      	b.n	800863e <_vfiprintf_r+0xc6>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	1d19      	adds	r1, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	9103      	str	r1, [sp, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	bfbb      	ittet	lt
 80086a4:	425b      	neglt	r3, r3
 80086a6:	f042 0202 	orrlt.w	r2, r2, #2
 80086aa:	9307      	strge	r3, [sp, #28]
 80086ac:	9307      	strlt	r3, [sp, #28]
 80086ae:	bfb8      	it	lt
 80086b0:	9204      	strlt	r2, [sp, #16]
 80086b2:	7823      	ldrb	r3, [r4, #0]
 80086b4:	2b2e      	cmp	r3, #46	; 0x2e
 80086b6:	d10c      	bne.n	80086d2 <_vfiprintf_r+0x15a>
 80086b8:	7863      	ldrb	r3, [r4, #1]
 80086ba:	2b2a      	cmp	r3, #42	; 0x2a
 80086bc:	d134      	bne.n	8008728 <_vfiprintf_r+0x1b0>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	1d1a      	adds	r2, r3, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	9203      	str	r2, [sp, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bfb8      	it	lt
 80086ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ce:	3402      	adds	r4, #2
 80086d0:	9305      	str	r3, [sp, #20]
 80086d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80087a8 <_vfiprintf_r+0x230>
 80086d6:	7821      	ldrb	r1, [r4, #0]
 80086d8:	2203      	movs	r2, #3
 80086da:	4650      	mov	r0, sl
 80086dc:	f7f7 fd80 	bl	80001e0 <memchr>
 80086e0:	b138      	cbz	r0, 80086f2 <_vfiprintf_r+0x17a>
 80086e2:	9b04      	ldr	r3, [sp, #16]
 80086e4:	eba0 000a 	sub.w	r0, r0, sl
 80086e8:	2240      	movs	r2, #64	; 0x40
 80086ea:	4082      	lsls	r2, r0
 80086ec:	4313      	orrs	r3, r2
 80086ee:	3401      	adds	r4, #1
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f6:	4829      	ldr	r0, [pc, #164]	; (800879c <_vfiprintf_r+0x224>)
 80086f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086fc:	2206      	movs	r2, #6
 80086fe:	f7f7 fd6f 	bl	80001e0 <memchr>
 8008702:	2800      	cmp	r0, #0
 8008704:	d03f      	beq.n	8008786 <_vfiprintf_r+0x20e>
 8008706:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <_vfiprintf_r+0x228>)
 8008708:	bb1b      	cbnz	r3, 8008752 <_vfiprintf_r+0x1da>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	3307      	adds	r3, #7
 800870e:	f023 0307 	bic.w	r3, r3, #7
 8008712:	3308      	adds	r3, #8
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	443b      	add	r3, r7
 800871a:	9309      	str	r3, [sp, #36]	; 0x24
 800871c:	e768      	b.n	80085f0 <_vfiprintf_r+0x78>
 800871e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008722:	460c      	mov	r4, r1
 8008724:	2001      	movs	r0, #1
 8008726:	e7a6      	b.n	8008676 <_vfiprintf_r+0xfe>
 8008728:	2300      	movs	r3, #0
 800872a:	3401      	adds	r4, #1
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	4619      	mov	r1, r3
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4620      	mov	r0, r4
 8008736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800873a:	3a30      	subs	r2, #48	; 0x30
 800873c:	2a09      	cmp	r2, #9
 800873e:	d903      	bls.n	8008748 <_vfiprintf_r+0x1d0>
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0c6      	beq.n	80086d2 <_vfiprintf_r+0x15a>
 8008744:	9105      	str	r1, [sp, #20]
 8008746:	e7c4      	b.n	80086d2 <_vfiprintf_r+0x15a>
 8008748:	fb0c 2101 	mla	r1, ip, r1, r2
 800874c:	4604      	mov	r4, r0
 800874e:	2301      	movs	r3, #1
 8008750:	e7f0      	b.n	8008734 <_vfiprintf_r+0x1bc>
 8008752:	ab03      	add	r3, sp, #12
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	462a      	mov	r2, r5
 8008758:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <_vfiprintf_r+0x22c>)
 800875a:	a904      	add	r1, sp, #16
 800875c:	4630      	mov	r0, r6
 800875e:	f7fc fb49 	bl	8004df4 <_printf_float>
 8008762:	4607      	mov	r7, r0
 8008764:	1c78      	adds	r0, r7, #1
 8008766:	d1d6      	bne.n	8008716 <_vfiprintf_r+0x19e>
 8008768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d405      	bmi.n	800877a <_vfiprintf_r+0x202>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d402      	bmi.n	800877a <_vfiprintf_r+0x202>
 8008774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008776:	f7fd fab7 	bl	8005ce8 <__retarget_lock_release_recursive>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	065b      	lsls	r3, r3, #25
 800877e:	f53f af1d 	bmi.w	80085bc <_vfiprintf_r+0x44>
 8008782:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008784:	e71c      	b.n	80085c0 <_vfiprintf_r+0x48>
 8008786:	ab03      	add	r3, sp, #12
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	462a      	mov	r2, r5
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <_vfiprintf_r+0x22c>)
 800878e:	a904      	add	r1, sp, #16
 8008790:	4630      	mov	r0, r6
 8008792:	f7fc fdd3 	bl	800533c <_printf_i>
 8008796:	e7e4      	b.n	8008762 <_vfiprintf_r+0x1ea>
 8008798:	08009801 	.word	0x08009801
 800879c:	0800980b 	.word	0x0800980b
 80087a0:	08004df5 	.word	0x08004df5
 80087a4:	08008553 	.word	0x08008553
 80087a8:	08009807 	.word	0x08009807

080087ac <__sflush_r>:
 80087ac:	898a      	ldrh	r2, [r1, #12]
 80087ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	0710      	lsls	r0, r2, #28
 80087b6:	460c      	mov	r4, r1
 80087b8:	d458      	bmi.n	800886c <__sflush_r+0xc0>
 80087ba:	684b      	ldr	r3, [r1, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc05      	bgt.n	80087cc <__sflush_r+0x20>
 80087c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dc02      	bgt.n	80087cc <__sflush_r+0x20>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d0f9      	beq.n	80087c6 <__sflush_r+0x1a>
 80087d2:	2300      	movs	r3, #0
 80087d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087d8:	682f      	ldr	r7, [r5, #0]
 80087da:	6a21      	ldr	r1, [r4, #32]
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	d032      	beq.n	8008846 <__sflush_r+0x9a>
 80087e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	075a      	lsls	r2, r3, #29
 80087e6:	d505      	bpl.n	80087f4 <__sflush_r+0x48>
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	1ac0      	subs	r0, r0, r3
 80087ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ee:	b10b      	cbz	r3, 80087f4 <__sflush_r+0x48>
 80087f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f2:	1ac0      	subs	r0, r0, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	4602      	mov	r2, r0
 80087f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fa:	6a21      	ldr	r1, [r4, #32]
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b0      	blx	r6
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	d106      	bne.n	8008814 <__sflush_r+0x68>
 8008806:	6829      	ldr	r1, [r5, #0]
 8008808:	291d      	cmp	r1, #29
 800880a:	d82b      	bhi.n	8008864 <__sflush_r+0xb8>
 800880c:	4a29      	ldr	r2, [pc, #164]	; (80088b4 <__sflush_r+0x108>)
 800880e:	410a      	asrs	r2, r1
 8008810:	07d6      	lsls	r6, r2, #31
 8008812:	d427      	bmi.n	8008864 <__sflush_r+0xb8>
 8008814:	2200      	movs	r2, #0
 8008816:	6062      	str	r2, [r4, #4]
 8008818:	04d9      	lsls	r1, r3, #19
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	d504      	bpl.n	800882a <__sflush_r+0x7e>
 8008820:	1c42      	adds	r2, r0, #1
 8008822:	d101      	bne.n	8008828 <__sflush_r+0x7c>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b903      	cbnz	r3, 800882a <__sflush_r+0x7e>
 8008828:	6560      	str	r0, [r4, #84]	; 0x54
 800882a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882c:	602f      	str	r7, [r5, #0]
 800882e:	2900      	cmp	r1, #0
 8008830:	d0c9      	beq.n	80087c6 <__sflush_r+0x1a>
 8008832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x94>
 800883a:	4628      	mov	r0, r5
 800883c:	f7fe f8d6 	bl	80069ec <_free_r>
 8008840:	2000      	movs	r0, #0
 8008842:	6360      	str	r0, [r4, #52]	; 0x34
 8008844:	e7c0      	b.n	80087c8 <__sflush_r+0x1c>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	1c41      	adds	r1, r0, #1
 800884e:	d1c8      	bne.n	80087e2 <__sflush_r+0x36>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0c5      	beq.n	80087e2 <__sflush_r+0x36>
 8008856:	2b1d      	cmp	r3, #29
 8008858:	d001      	beq.n	800885e <__sflush_r+0xb2>
 800885a:	2b16      	cmp	r3, #22
 800885c:	d101      	bne.n	8008862 <__sflush_r+0xb6>
 800885e:	602f      	str	r7, [r5, #0]
 8008860:	e7b1      	b.n	80087c6 <__sflush_r+0x1a>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	e7ad      	b.n	80087c8 <__sflush_r+0x1c>
 800886c:	690f      	ldr	r7, [r1, #16]
 800886e:	2f00      	cmp	r7, #0
 8008870:	d0a9      	beq.n	80087c6 <__sflush_r+0x1a>
 8008872:	0793      	lsls	r3, r2, #30
 8008874:	680e      	ldr	r6, [r1, #0]
 8008876:	bf08      	it	eq
 8008878:	694b      	ldreq	r3, [r1, #20]
 800887a:	600f      	str	r7, [r1, #0]
 800887c:	bf18      	it	ne
 800887e:	2300      	movne	r3, #0
 8008880:	eba6 0807 	sub.w	r8, r6, r7
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	f1b8 0f00 	cmp.w	r8, #0
 800888a:	dd9c      	ble.n	80087c6 <__sflush_r+0x1a>
 800888c:	6a21      	ldr	r1, [r4, #32]
 800888e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008890:	4643      	mov	r3, r8
 8008892:	463a      	mov	r2, r7
 8008894:	4628      	mov	r0, r5
 8008896:	47b0      	blx	r6
 8008898:	2800      	cmp	r0, #0
 800889a:	dc06      	bgt.n	80088aa <__sflush_r+0xfe>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e78e      	b.n	80087c8 <__sflush_r+0x1c>
 80088aa:	4407      	add	r7, r0
 80088ac:	eba8 0800 	sub.w	r8, r8, r0
 80088b0:	e7e9      	b.n	8008886 <__sflush_r+0xda>
 80088b2:	bf00      	nop
 80088b4:	dfbffffe 	.word	0xdfbffffe

080088b8 <_fflush_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	690b      	ldr	r3, [r1, #16]
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b913      	cbnz	r3, 80088c8 <_fflush_r+0x10>
 80088c2:	2500      	movs	r5, #0
 80088c4:	4628      	mov	r0, r5
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	b118      	cbz	r0, 80088d2 <_fflush_r+0x1a>
 80088ca:	6a03      	ldr	r3, [r0, #32]
 80088cc:	b90b      	cbnz	r3, 80088d2 <_fflush_r+0x1a>
 80088ce:	f7fd f8f3 	bl	8005ab8 <__sinit>
 80088d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f3      	beq.n	80088c2 <_fflush_r+0xa>
 80088da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088dc:	07d0      	lsls	r0, r2, #31
 80088de:	d404      	bmi.n	80088ea <_fflush_r+0x32>
 80088e0:	0599      	lsls	r1, r3, #22
 80088e2:	d402      	bmi.n	80088ea <_fflush_r+0x32>
 80088e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e6:	f7fd f9fe 	bl	8005ce6 <__retarget_lock_acquire_recursive>
 80088ea:	4628      	mov	r0, r5
 80088ec:	4621      	mov	r1, r4
 80088ee:	f7ff ff5d 	bl	80087ac <__sflush_r>
 80088f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f4:	07da      	lsls	r2, r3, #31
 80088f6:	4605      	mov	r5, r0
 80088f8:	d4e4      	bmi.n	80088c4 <_fflush_r+0xc>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	059b      	lsls	r3, r3, #22
 80088fe:	d4e1      	bmi.n	80088c4 <_fflush_r+0xc>
 8008900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008902:	f7fd f9f1 	bl	8005ce8 <__retarget_lock_release_recursive>
 8008906:	e7dd      	b.n	80088c4 <_fflush_r+0xc>

08008908 <__swbuf_r>:
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	460e      	mov	r6, r1
 800890c:	4614      	mov	r4, r2
 800890e:	4605      	mov	r5, r0
 8008910:	b118      	cbz	r0, 800891a <__swbuf_r+0x12>
 8008912:	6a03      	ldr	r3, [r0, #32]
 8008914:	b90b      	cbnz	r3, 800891a <__swbuf_r+0x12>
 8008916:	f7fd f8cf 	bl	8005ab8 <__sinit>
 800891a:	69a3      	ldr	r3, [r4, #24]
 800891c:	60a3      	str	r3, [r4, #8]
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	071a      	lsls	r2, r3, #28
 8008922:	d525      	bpl.n	8008970 <__swbuf_r+0x68>
 8008924:	6923      	ldr	r3, [r4, #16]
 8008926:	b31b      	cbz	r3, 8008970 <__swbuf_r+0x68>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	6922      	ldr	r2, [r4, #16]
 800892c:	1a98      	subs	r0, r3, r2
 800892e:	6963      	ldr	r3, [r4, #20]
 8008930:	b2f6      	uxtb	r6, r6
 8008932:	4283      	cmp	r3, r0
 8008934:	4637      	mov	r7, r6
 8008936:	dc04      	bgt.n	8008942 <__swbuf_r+0x3a>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f7ff ffbc 	bl	80088b8 <_fflush_r>
 8008940:	b9e0      	cbnz	r0, 800897c <__swbuf_r+0x74>
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	3b01      	subs	r3, #1
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	701e      	strb	r6, [r3, #0]
 8008950:	6962      	ldr	r2, [r4, #20]
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	429a      	cmp	r2, r3
 8008956:	d004      	beq.n	8008962 <__swbuf_r+0x5a>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	07db      	lsls	r3, r3, #31
 800895c:	d506      	bpl.n	800896c <__swbuf_r+0x64>
 800895e:	2e0a      	cmp	r6, #10
 8008960:	d104      	bne.n	800896c <__swbuf_r+0x64>
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	f7ff ffa7 	bl	80088b8 <_fflush_r>
 800896a:	b938      	cbnz	r0, 800897c <__swbuf_r+0x74>
 800896c:	4638      	mov	r0, r7
 800896e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008970:	4621      	mov	r1, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f806 	bl	8008984 <__swsetup_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	d0d5      	beq.n	8008928 <__swbuf_r+0x20>
 800897c:	f04f 37ff 	mov.w	r7, #4294967295
 8008980:	e7f4      	b.n	800896c <__swbuf_r+0x64>
	...

08008984 <__swsetup_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <__swsetup_r+0xac>)
 8008988:	4605      	mov	r5, r0
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	460c      	mov	r4, r1
 800898e:	b118      	cbz	r0, 8008998 <__swsetup_r+0x14>
 8008990:	6a03      	ldr	r3, [r0, #32]
 8008992:	b90b      	cbnz	r3, 8008998 <__swsetup_r+0x14>
 8008994:	f7fd f890 	bl	8005ab8 <__sinit>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800899e:	0718      	lsls	r0, r3, #28
 80089a0:	d422      	bmi.n	80089e8 <__swsetup_r+0x64>
 80089a2:	06d9      	lsls	r1, r3, #27
 80089a4:	d407      	bmi.n	80089b6 <__swsetup_r+0x32>
 80089a6:	2309      	movs	r3, #9
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	e034      	b.n	8008a20 <__swsetup_r+0x9c>
 80089b6:	0758      	lsls	r0, r3, #29
 80089b8:	d512      	bpl.n	80089e0 <__swsetup_r+0x5c>
 80089ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089bc:	b141      	cbz	r1, 80089d0 <__swsetup_r+0x4c>
 80089be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089c2:	4299      	cmp	r1, r3
 80089c4:	d002      	beq.n	80089cc <__swsetup_r+0x48>
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7fe f810 	bl	80069ec <_free_r>
 80089cc:	2300      	movs	r3, #0
 80089ce:	6363      	str	r3, [r4, #52]	; 0x34
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	2300      	movs	r3, #0
 80089da:	6063      	str	r3, [r4, #4]
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	f043 0308 	orr.w	r3, r3, #8
 80089e6:	81a3      	strh	r3, [r4, #12]
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	b94b      	cbnz	r3, 8008a00 <__swsetup_r+0x7c>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f6:	d003      	beq.n	8008a00 <__swsetup_r+0x7c>
 80089f8:	4621      	mov	r1, r4
 80089fa:	4628      	mov	r0, r5
 80089fc:	f000 fc7e 	bl	80092fc <__smakebuf_r>
 8008a00:	89a0      	ldrh	r0, [r4, #12]
 8008a02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a06:	f010 0301 	ands.w	r3, r0, #1
 8008a0a:	d00a      	beq.n	8008a22 <__swsetup_r+0x9e>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60a3      	str	r3, [r4, #8]
 8008a10:	6963      	ldr	r3, [r4, #20]
 8008a12:	425b      	negs	r3, r3
 8008a14:	61a3      	str	r3, [r4, #24]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	b943      	cbnz	r3, 8008a2c <__swsetup_r+0xa8>
 8008a1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a1e:	d1c4      	bne.n	80089aa <__swsetup_r+0x26>
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	0781      	lsls	r1, r0, #30
 8008a24:	bf58      	it	pl
 8008a26:	6963      	ldrpl	r3, [r4, #20]
 8008a28:	60a3      	str	r3, [r4, #8]
 8008a2a:	e7f4      	b.n	8008a16 <__swsetup_r+0x92>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e7f7      	b.n	8008a20 <__swsetup_r+0x9c>
 8008a30:	20000064 	.word	0x20000064

08008a34 <memmove>:
 8008a34:	4288      	cmp	r0, r1
 8008a36:	b510      	push	{r4, lr}
 8008a38:	eb01 0402 	add.w	r4, r1, r2
 8008a3c:	d902      	bls.n	8008a44 <memmove+0x10>
 8008a3e:	4284      	cmp	r4, r0
 8008a40:	4623      	mov	r3, r4
 8008a42:	d807      	bhi.n	8008a54 <memmove+0x20>
 8008a44:	1e43      	subs	r3, r0, #1
 8008a46:	42a1      	cmp	r1, r4
 8008a48:	d008      	beq.n	8008a5c <memmove+0x28>
 8008a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a52:	e7f8      	b.n	8008a46 <memmove+0x12>
 8008a54:	4402      	add	r2, r0
 8008a56:	4601      	mov	r1, r0
 8008a58:	428a      	cmp	r2, r1
 8008a5a:	d100      	bne.n	8008a5e <memmove+0x2a>
 8008a5c:	bd10      	pop	{r4, pc}
 8008a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a66:	e7f7      	b.n	8008a58 <memmove+0x24>

08008a68 <strncmp>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	b16a      	cbz	r2, 8008a88 <strncmp+0x20>
 8008a6c:	3901      	subs	r1, #1
 8008a6e:	1884      	adds	r4, r0, r2
 8008a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d103      	bne.n	8008a84 <strncmp+0x1c>
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d001      	beq.n	8008a84 <strncmp+0x1c>
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d1f5      	bne.n	8008a70 <strncmp+0x8>
 8008a84:	1ad0      	subs	r0, r2, r3
 8008a86:	bd10      	pop	{r4, pc}
 8008a88:	4610      	mov	r0, r2
 8008a8a:	e7fc      	b.n	8008a86 <strncmp+0x1e>

08008a8c <_sbrk_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	; (8008aa8 <_sbrk_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7f8 feaa 	bl	80017f0 <_sbrk>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_sbrk_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_sbrk_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20000540 	.word	0x20000540

08008aac <memcpy>:
 8008aac:	440a      	add	r2, r1
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ab4:	d100      	bne.n	8008ab8 <memcpy+0xc>
 8008ab6:	4770      	bx	lr
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ac2:	4291      	cmp	r1, r2
 8008ac4:	d1f9      	bne.n	8008aba <memcpy+0xe>
 8008ac6:	bd10      	pop	{r4, pc}

08008ac8 <nan>:
 8008ac8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ad0 <nan+0x8>
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	00000000 	.word	0x00000000
 8008ad4:	7ff80000 	.word	0x7ff80000

08008ad8 <__assert_func>:
 8008ad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ada:	4614      	mov	r4, r2
 8008adc:	461a      	mov	r2, r3
 8008ade:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <__assert_func+0x2c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	68d8      	ldr	r0, [r3, #12]
 8008ae6:	b14c      	cbz	r4, 8008afc <__assert_func+0x24>
 8008ae8:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <__assert_func+0x30>)
 8008aea:	9100      	str	r1, [sp, #0]
 8008aec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008af0:	4906      	ldr	r1, [pc, #24]	; (8008b0c <__assert_func+0x34>)
 8008af2:	462b      	mov	r3, r5
 8008af4:	f000 fbca 	bl	800928c <fiprintf>
 8008af8:	f000 fc5e 	bl	80093b8 <abort>
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <__assert_func+0x38>)
 8008afe:	461c      	mov	r4, r3
 8008b00:	e7f3      	b.n	8008aea <__assert_func+0x12>
 8008b02:	bf00      	nop
 8008b04:	20000064 	.word	0x20000064
 8008b08:	0800981a 	.word	0x0800981a
 8008b0c:	08009827 	.word	0x08009827
 8008b10:	08009855 	.word	0x08009855

08008b14 <_calloc_r>:
 8008b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b16:	fba1 2402 	umull	r2, r4, r1, r2
 8008b1a:	b94c      	cbnz	r4, 8008b30 <_calloc_r+0x1c>
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	9201      	str	r2, [sp, #4]
 8008b20:	f7fd ffd8 	bl	8006ad4 <_malloc_r>
 8008b24:	9a01      	ldr	r2, [sp, #4]
 8008b26:	4605      	mov	r5, r0
 8008b28:	b930      	cbnz	r0, 8008b38 <_calloc_r+0x24>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bd30      	pop	{r4, r5, pc}
 8008b30:	220c      	movs	r2, #12
 8008b32:	6002      	str	r2, [r0, #0]
 8008b34:	2500      	movs	r5, #0
 8008b36:	e7f8      	b.n	8008b2a <_calloc_r+0x16>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f7fd f856 	bl	8005bea <memset>
 8008b3e:	e7f4      	b.n	8008b2a <_calloc_r+0x16>

08008b40 <rshift>:
 8008b40:	6903      	ldr	r3, [r0, #16]
 8008b42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b4e:	f100 0414 	add.w	r4, r0, #20
 8008b52:	dd45      	ble.n	8008be0 <rshift+0xa0>
 8008b54:	f011 011f 	ands.w	r1, r1, #31
 8008b58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b60:	d10c      	bne.n	8008b7c <rshift+0x3c>
 8008b62:	f100 0710 	add.w	r7, r0, #16
 8008b66:	4629      	mov	r1, r5
 8008b68:	42b1      	cmp	r1, r6
 8008b6a:	d334      	bcc.n	8008bd6 <rshift+0x96>
 8008b6c:	1a9b      	subs	r3, r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	1eea      	subs	r2, r5, #3
 8008b72:	4296      	cmp	r6, r2
 8008b74:	bf38      	it	cc
 8008b76:	2300      	movcc	r3, #0
 8008b78:	4423      	add	r3, r4
 8008b7a:	e015      	b.n	8008ba8 <rshift+0x68>
 8008b7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b80:	f1c1 0820 	rsb	r8, r1, #32
 8008b84:	40cf      	lsrs	r7, r1
 8008b86:	f105 0e04 	add.w	lr, r5, #4
 8008b8a:	46a1      	mov	r9, r4
 8008b8c:	4576      	cmp	r6, lr
 8008b8e:	46f4      	mov	ip, lr
 8008b90:	d815      	bhi.n	8008bbe <rshift+0x7e>
 8008b92:	1a9a      	subs	r2, r3, r2
 8008b94:	0092      	lsls	r2, r2, #2
 8008b96:	3a04      	subs	r2, #4
 8008b98:	3501      	adds	r5, #1
 8008b9a:	42ae      	cmp	r6, r5
 8008b9c:	bf38      	it	cc
 8008b9e:	2200      	movcc	r2, #0
 8008ba0:	18a3      	adds	r3, r4, r2
 8008ba2:	50a7      	str	r7, [r4, r2]
 8008ba4:	b107      	cbz	r7, 8008ba8 <rshift+0x68>
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	1b1a      	subs	r2, r3, r4
 8008baa:	42a3      	cmp	r3, r4
 8008bac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bb0:	bf08      	it	eq
 8008bb2:	2300      	moveq	r3, #0
 8008bb4:	6102      	str	r2, [r0, #16]
 8008bb6:	bf08      	it	eq
 8008bb8:	6143      	streq	r3, [r0, #20]
 8008bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bbe:	f8dc c000 	ldr.w	ip, [ip]
 8008bc2:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bc6:	ea4c 0707 	orr.w	r7, ip, r7
 8008bca:	f849 7b04 	str.w	r7, [r9], #4
 8008bce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bd2:	40cf      	lsrs	r7, r1
 8008bd4:	e7da      	b.n	8008b8c <rshift+0x4c>
 8008bd6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bda:	f847 cf04 	str.w	ip, [r7, #4]!
 8008bde:	e7c3      	b.n	8008b68 <rshift+0x28>
 8008be0:	4623      	mov	r3, r4
 8008be2:	e7e1      	b.n	8008ba8 <rshift+0x68>

08008be4 <__hexdig_fun>:
 8008be4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008be8:	2b09      	cmp	r3, #9
 8008bea:	d802      	bhi.n	8008bf2 <__hexdig_fun+0xe>
 8008bec:	3820      	subs	r0, #32
 8008bee:	b2c0      	uxtb	r0, r0
 8008bf0:	4770      	bx	lr
 8008bf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d801      	bhi.n	8008bfe <__hexdig_fun+0x1a>
 8008bfa:	3847      	subs	r0, #71	; 0x47
 8008bfc:	e7f7      	b.n	8008bee <__hexdig_fun+0xa>
 8008bfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	d801      	bhi.n	8008c0a <__hexdig_fun+0x26>
 8008c06:	3827      	subs	r0, #39	; 0x27
 8008c08:	e7f1      	b.n	8008bee <__hexdig_fun+0xa>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	4770      	bx	lr
	...

08008c10 <__gethex>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	4617      	mov	r7, r2
 8008c16:	680a      	ldr	r2, [r1, #0]
 8008c18:	b085      	sub	sp, #20
 8008c1a:	f102 0b02 	add.w	fp, r2, #2
 8008c1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c26:	4681      	mov	r9, r0
 8008c28:	468a      	mov	sl, r1
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	32fe      	adds	r2, #254	; 0xfe
 8008c2e:	eb02 030b 	add.w	r3, r2, fp
 8008c32:	46d8      	mov	r8, fp
 8008c34:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	2830      	cmp	r0, #48	; 0x30
 8008c3c:	d0f7      	beq.n	8008c2e <__gethex+0x1e>
 8008c3e:	f7ff ffd1 	bl	8008be4 <__hexdig_fun>
 8008c42:	4604      	mov	r4, r0
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d138      	bne.n	8008cba <__gethex+0xaa>
 8008c48:	49a7      	ldr	r1, [pc, #668]	; (8008ee8 <__gethex+0x2d8>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	f7ff ff0b 	bl	8008a68 <strncmp>
 8008c52:	4606      	mov	r6, r0
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d169      	bne.n	8008d2c <__gethex+0x11c>
 8008c58:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c5c:	465d      	mov	r5, fp
 8008c5e:	f7ff ffc1 	bl	8008be4 <__hexdig_fun>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d064      	beq.n	8008d30 <__gethex+0x120>
 8008c66:	465a      	mov	r2, fp
 8008c68:	7810      	ldrb	r0, [r2, #0]
 8008c6a:	2830      	cmp	r0, #48	; 0x30
 8008c6c:	4690      	mov	r8, r2
 8008c6e:	f102 0201 	add.w	r2, r2, #1
 8008c72:	d0f9      	beq.n	8008c68 <__gethex+0x58>
 8008c74:	f7ff ffb6 	bl	8008be4 <__hexdig_fun>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	fab0 f480 	clz	r4, r0
 8008c7e:	0964      	lsrs	r4, r4, #5
 8008c80:	465e      	mov	r6, fp
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	4642      	mov	r2, r8
 8008c86:	4615      	mov	r5, r2
 8008c88:	3201      	adds	r2, #1
 8008c8a:	7828      	ldrb	r0, [r5, #0]
 8008c8c:	f7ff ffaa 	bl	8008be4 <__hexdig_fun>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d1f8      	bne.n	8008c86 <__gethex+0x76>
 8008c94:	4994      	ldr	r1, [pc, #592]	; (8008ee8 <__gethex+0x2d8>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f7ff fee5 	bl	8008a68 <strncmp>
 8008c9e:	b978      	cbnz	r0, 8008cc0 <__gethex+0xb0>
 8008ca0:	b946      	cbnz	r6, 8008cb4 <__gethex+0xa4>
 8008ca2:	1c6e      	adds	r6, r5, #1
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	4615      	mov	r5, r2
 8008ca8:	3201      	adds	r2, #1
 8008caa:	7828      	ldrb	r0, [r5, #0]
 8008cac:	f7ff ff9a 	bl	8008be4 <__hexdig_fun>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d1f8      	bne.n	8008ca6 <__gethex+0x96>
 8008cb4:	1b73      	subs	r3, r6, r5
 8008cb6:	009e      	lsls	r6, r3, #2
 8008cb8:	e004      	b.n	8008cc4 <__gethex+0xb4>
 8008cba:	2400      	movs	r4, #0
 8008cbc:	4626      	mov	r6, r4
 8008cbe:	e7e1      	b.n	8008c84 <__gethex+0x74>
 8008cc0:	2e00      	cmp	r6, #0
 8008cc2:	d1f7      	bne.n	8008cb4 <__gethex+0xa4>
 8008cc4:	782b      	ldrb	r3, [r5, #0]
 8008cc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cca:	2b50      	cmp	r3, #80	; 0x50
 8008ccc:	d13d      	bne.n	8008d4a <__gethex+0x13a>
 8008cce:	786b      	ldrb	r3, [r5, #1]
 8008cd0:	2b2b      	cmp	r3, #43	; 0x2b
 8008cd2:	d02f      	beq.n	8008d34 <__gethex+0x124>
 8008cd4:	2b2d      	cmp	r3, #45	; 0x2d
 8008cd6:	d031      	beq.n	8008d3c <__gethex+0x12c>
 8008cd8:	1c69      	adds	r1, r5, #1
 8008cda:	f04f 0b00 	mov.w	fp, #0
 8008cde:	7808      	ldrb	r0, [r1, #0]
 8008ce0:	f7ff ff80 	bl	8008be4 <__hexdig_fun>
 8008ce4:	1e42      	subs	r2, r0, #1
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	2a18      	cmp	r2, #24
 8008cea:	d82e      	bhi.n	8008d4a <__gethex+0x13a>
 8008cec:	f1a0 0210 	sub.w	r2, r0, #16
 8008cf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008cf4:	f7ff ff76 	bl	8008be4 <__hexdig_fun>
 8008cf8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cfc:	fa5f fc8c 	uxtb.w	ip, ip
 8008d00:	f1bc 0f18 	cmp.w	ip, #24
 8008d04:	d91d      	bls.n	8008d42 <__gethex+0x132>
 8008d06:	f1bb 0f00 	cmp.w	fp, #0
 8008d0a:	d000      	beq.n	8008d0e <__gethex+0xfe>
 8008d0c:	4252      	negs	r2, r2
 8008d0e:	4416      	add	r6, r2
 8008d10:	f8ca 1000 	str.w	r1, [sl]
 8008d14:	b1dc      	cbz	r4, 8008d4e <__gethex+0x13e>
 8008d16:	9b01      	ldr	r3, [sp, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bf14      	ite	ne
 8008d1c:	f04f 0800 	movne.w	r8, #0
 8008d20:	f04f 0806 	moveq.w	r8, #6
 8008d24:	4640      	mov	r0, r8
 8008d26:	b005      	add	sp, #20
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	4645      	mov	r5, r8
 8008d2e:	4626      	mov	r6, r4
 8008d30:	2401      	movs	r4, #1
 8008d32:	e7c7      	b.n	8008cc4 <__gethex+0xb4>
 8008d34:	f04f 0b00 	mov.w	fp, #0
 8008d38:	1ca9      	adds	r1, r5, #2
 8008d3a:	e7d0      	b.n	8008cde <__gethex+0xce>
 8008d3c:	f04f 0b01 	mov.w	fp, #1
 8008d40:	e7fa      	b.n	8008d38 <__gethex+0x128>
 8008d42:	230a      	movs	r3, #10
 8008d44:	fb03 0002 	mla	r0, r3, r2, r0
 8008d48:	e7d0      	b.n	8008cec <__gethex+0xdc>
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	e7e0      	b.n	8008d10 <__gethex+0x100>
 8008d4e:	eba5 0308 	sub.w	r3, r5, r8
 8008d52:	3b01      	subs	r3, #1
 8008d54:	4621      	mov	r1, r4
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	dc0a      	bgt.n	8008d70 <__gethex+0x160>
 8008d5a:	4648      	mov	r0, r9
 8008d5c:	f7fd ff46 	bl	8006bec <_Balloc>
 8008d60:	4604      	mov	r4, r0
 8008d62:	b940      	cbnz	r0, 8008d76 <__gethex+0x166>
 8008d64:	4b61      	ldr	r3, [pc, #388]	; (8008eec <__gethex+0x2dc>)
 8008d66:	4602      	mov	r2, r0
 8008d68:	21e4      	movs	r1, #228	; 0xe4
 8008d6a:	4861      	ldr	r0, [pc, #388]	; (8008ef0 <__gethex+0x2e0>)
 8008d6c:	f7ff feb4 	bl	8008ad8 <__assert_func>
 8008d70:	3101      	adds	r1, #1
 8008d72:	105b      	asrs	r3, r3, #1
 8008d74:	e7ef      	b.n	8008d56 <__gethex+0x146>
 8008d76:	f100 0a14 	add.w	sl, r0, #20
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	495a      	ldr	r1, [pc, #360]	; (8008ee8 <__gethex+0x2d8>)
 8008d7e:	f8cd a004 	str.w	sl, [sp, #4]
 8008d82:	469b      	mov	fp, r3
 8008d84:	45a8      	cmp	r8, r5
 8008d86:	d342      	bcc.n	8008e0e <__gethex+0x1fe>
 8008d88:	9801      	ldr	r0, [sp, #4]
 8008d8a:	f840 bb04 	str.w	fp, [r0], #4
 8008d8e:	eba0 000a 	sub.w	r0, r0, sl
 8008d92:	1080      	asrs	r0, r0, #2
 8008d94:	6120      	str	r0, [r4, #16]
 8008d96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f7fe f818 	bl	8006dd0 <__hi0bits>
 8008da0:	683d      	ldr	r5, [r7, #0]
 8008da2:	eba8 0000 	sub.w	r0, r8, r0
 8008da6:	42a8      	cmp	r0, r5
 8008da8:	dd59      	ble.n	8008e5e <__gethex+0x24e>
 8008daa:	eba0 0805 	sub.w	r8, r0, r5
 8008dae:	4641      	mov	r1, r8
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7fe fba7 	bl	8007504 <__any_on>
 8008db6:	4683      	mov	fp, r0
 8008db8:	b1b8      	cbz	r0, 8008dea <__gethex+0x1da>
 8008dba:	f108 33ff 	add.w	r3, r8, #4294967295
 8008dbe:	1159      	asrs	r1, r3, #5
 8008dc0:	f003 021f 	and.w	r2, r3, #31
 8008dc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008dc8:	f04f 0b01 	mov.w	fp, #1
 8008dcc:	fa0b f202 	lsl.w	r2, fp, r2
 8008dd0:	420a      	tst	r2, r1
 8008dd2:	d00a      	beq.n	8008dea <__gethex+0x1da>
 8008dd4:	455b      	cmp	r3, fp
 8008dd6:	dd06      	ble.n	8008de6 <__gethex+0x1d6>
 8008dd8:	f1a8 0102 	sub.w	r1, r8, #2
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f7fe fb91 	bl	8007504 <__any_on>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d138      	bne.n	8008e58 <__gethex+0x248>
 8008de6:	f04f 0b02 	mov.w	fp, #2
 8008dea:	4641      	mov	r1, r8
 8008dec:	4620      	mov	r0, r4
 8008dee:	f7ff fea7 	bl	8008b40 <rshift>
 8008df2:	4446      	add	r6, r8
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	42b3      	cmp	r3, r6
 8008df8:	da41      	bge.n	8008e7e <__gethex+0x26e>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f7fd ff35 	bl	8006c6c <_Bfree>
 8008e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e04:	2300      	movs	r3, #0
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008e0c:	e78a      	b.n	8008d24 <__gethex+0x114>
 8008e0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008e12:	2a2e      	cmp	r2, #46	; 0x2e
 8008e14:	d014      	beq.n	8008e40 <__gethex+0x230>
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	d106      	bne.n	8008e28 <__gethex+0x218>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	f843 bb04 	str.w	fp, [r3], #4
 8008e20:	f04f 0b00 	mov.w	fp, #0
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	465b      	mov	r3, fp
 8008e28:	7828      	ldrb	r0, [r5, #0]
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	f7ff feda 	bl	8008be4 <__hexdig_fun>
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	f000 000f 	and.w	r0, r0, #15
 8008e36:	4098      	lsls	r0, r3
 8008e38:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	e7a1      	b.n	8008d84 <__gethex+0x174>
 8008e40:	45a8      	cmp	r8, r5
 8008e42:	d8e8      	bhi.n	8008e16 <__gethex+0x206>
 8008e44:	2201      	movs	r2, #1
 8008e46:	4628      	mov	r0, r5
 8008e48:	9303      	str	r3, [sp, #12]
 8008e4a:	f7ff fe0d 	bl	8008a68 <strncmp>
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <__gethex+0x2d8>)
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d1df      	bne.n	8008e16 <__gethex+0x206>
 8008e56:	e795      	b.n	8008d84 <__gethex+0x174>
 8008e58:	f04f 0b03 	mov.w	fp, #3
 8008e5c:	e7c5      	b.n	8008dea <__gethex+0x1da>
 8008e5e:	da0b      	bge.n	8008e78 <__gethex+0x268>
 8008e60:	eba5 0800 	sub.w	r8, r5, r0
 8008e64:	4621      	mov	r1, r4
 8008e66:	4642      	mov	r2, r8
 8008e68:	4648      	mov	r0, r9
 8008e6a:	f7fe f919 	bl	80070a0 <__lshift>
 8008e6e:	eba6 0608 	sub.w	r6, r6, r8
 8008e72:	4604      	mov	r4, r0
 8008e74:	f100 0a14 	add.w	sl, r0, #20
 8008e78:	f04f 0b00 	mov.w	fp, #0
 8008e7c:	e7ba      	b.n	8008df4 <__gethex+0x1e4>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	42b3      	cmp	r3, r6
 8008e82:	dd73      	ble.n	8008f6c <__gethex+0x35c>
 8008e84:	1b9e      	subs	r6, r3, r6
 8008e86:	42b5      	cmp	r5, r6
 8008e88:	dc34      	bgt.n	8008ef4 <__gethex+0x2e4>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d023      	beq.n	8008ed8 <__gethex+0x2c8>
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d025      	beq.n	8008ee0 <__gethex+0x2d0>
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d115      	bne.n	8008ec4 <__gethex+0x2b4>
 8008e98:	42b5      	cmp	r5, r6
 8008e9a:	d113      	bne.n	8008ec4 <__gethex+0x2b4>
 8008e9c:	2d01      	cmp	r5, #1
 8008e9e:	d10b      	bne.n	8008eb8 <__gethex+0x2a8>
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	f8ca 3000 	str.w	r3, [sl]
 8008eae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008eb4:	601c      	str	r4, [r3, #0]
 8008eb6:	e735      	b.n	8008d24 <__gethex+0x114>
 8008eb8:	1e69      	subs	r1, r5, #1
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7fe fb22 	bl	8007504 <__any_on>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1ed      	bne.n	8008ea0 <__gethex+0x290>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	4648      	mov	r0, r9
 8008ec8:	f7fd fed0 	bl	8006c6c <_Bfree>
 8008ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ece:	2300      	movs	r3, #0
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008ed6:	e725      	b.n	8008d24 <__gethex+0x114>
 8008ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f2      	bne.n	8008ec4 <__gethex+0x2b4>
 8008ede:	e7df      	b.n	8008ea0 <__gethex+0x290>
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1dc      	bne.n	8008ea0 <__gethex+0x290>
 8008ee6:	e7ed      	b.n	8008ec4 <__gethex+0x2b4>
 8008ee8:	080096ac 	.word	0x080096ac
 8008eec:	08009545 	.word	0x08009545
 8008ef0:	08009856 	.word	0x08009856
 8008ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	d133      	bne.n	8008f66 <__gethex+0x356>
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	d004      	beq.n	8008f0e <__gethex+0x2fe>
 8008f04:	4641      	mov	r1, r8
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7fe fafc 	bl	8007504 <__any_on>
 8008f0c:	4683      	mov	fp, r0
 8008f0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008f12:	2301      	movs	r3, #1
 8008f14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f18:	f008 081f 	and.w	r8, r8, #31
 8008f1c:	fa03 f308 	lsl.w	r3, r3, r8
 8008f20:	4213      	tst	r3, r2
 8008f22:	4631      	mov	r1, r6
 8008f24:	4620      	mov	r0, r4
 8008f26:	bf18      	it	ne
 8008f28:	f04b 0b02 	orrne.w	fp, fp, #2
 8008f2c:	1bad      	subs	r5, r5, r6
 8008f2e:	f7ff fe07 	bl	8008b40 <rshift>
 8008f32:	687e      	ldr	r6, [r7, #4]
 8008f34:	f04f 0802 	mov.w	r8, #2
 8008f38:	f1bb 0f00 	cmp.w	fp, #0
 8008f3c:	d04a      	beq.n	8008fd4 <__gethex+0x3c4>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d016      	beq.n	8008f72 <__gethex+0x362>
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d018      	beq.n	8008f7a <__gethex+0x36a>
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d109      	bne.n	8008f60 <__gethex+0x350>
 8008f4c:	f01b 0f02 	tst.w	fp, #2
 8008f50:	d006      	beq.n	8008f60 <__gethex+0x350>
 8008f52:	f8da 3000 	ldr.w	r3, [sl]
 8008f56:	ea4b 0b03 	orr.w	fp, fp, r3
 8008f5a:	f01b 0f01 	tst.w	fp, #1
 8008f5e:	d10f      	bne.n	8008f80 <__gethex+0x370>
 8008f60:	f048 0810 	orr.w	r8, r8, #16
 8008f64:	e036      	b.n	8008fd4 <__gethex+0x3c4>
 8008f66:	f04f 0b01 	mov.w	fp, #1
 8008f6a:	e7d0      	b.n	8008f0e <__gethex+0x2fe>
 8008f6c:	f04f 0801 	mov.w	r8, #1
 8008f70:	e7e2      	b.n	8008f38 <__gethex+0x328>
 8008f72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f74:	f1c3 0301 	rsb	r3, r3, #1
 8008f78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0ef      	beq.n	8008f60 <__gethex+0x350>
 8008f80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f84:	f104 0214 	add.w	r2, r4, #20
 8008f88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008f92:	2300      	movs	r3, #0
 8008f94:	4694      	mov	ip, r2
 8008f96:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008f9e:	d01e      	beq.n	8008fde <__gethex+0x3ce>
 8008fa0:	3101      	adds	r1, #1
 8008fa2:	f8cc 1000 	str.w	r1, [ip]
 8008fa6:	f1b8 0f02 	cmp.w	r8, #2
 8008faa:	f104 0214 	add.w	r2, r4, #20
 8008fae:	d13d      	bne.n	800902c <__gethex+0x41c>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	42ab      	cmp	r3, r5
 8008fb6:	d10b      	bne.n	8008fd0 <__gethex+0x3c0>
 8008fb8:	1169      	asrs	r1, r5, #5
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f005 051f 	and.w	r5, r5, #31
 8008fc0:	fa03 f505 	lsl.w	r5, r3, r5
 8008fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fc8:	421d      	tst	r5, r3
 8008fca:	bf18      	it	ne
 8008fcc:	f04f 0801 	movne.w	r8, #1
 8008fd0:	f048 0820 	orr.w	r8, r8, #32
 8008fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fd6:	601c      	str	r4, [r3, #0]
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	601e      	str	r6, [r3, #0]
 8008fdc:	e6a2      	b.n	8008d24 <__gethex+0x114>
 8008fde:	4290      	cmp	r0, r2
 8008fe0:	f842 3c04 	str.w	r3, [r2, #-4]
 8008fe4:	d8d6      	bhi.n	8008f94 <__gethex+0x384>
 8008fe6:	68a2      	ldr	r2, [r4, #8]
 8008fe8:	4593      	cmp	fp, r2
 8008fea:	db17      	blt.n	800901c <__gethex+0x40c>
 8008fec:	6861      	ldr	r1, [r4, #4]
 8008fee:	4648      	mov	r0, r9
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	f7fd fdfb 	bl	8006bec <_Balloc>
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	b918      	cbnz	r0, 8009002 <__gethex+0x3f2>
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <__gethex+0x458>)
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	2184      	movs	r1, #132	; 0x84
 8009000:	e6b3      	b.n	8008d6a <__gethex+0x15a>
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	3202      	adds	r2, #2
 8009006:	f104 010c 	add.w	r1, r4, #12
 800900a:	0092      	lsls	r2, r2, #2
 800900c:	300c      	adds	r0, #12
 800900e:	f7ff fd4d 	bl	8008aac <memcpy>
 8009012:	4621      	mov	r1, r4
 8009014:	4648      	mov	r0, r9
 8009016:	f7fd fe29 	bl	8006c6c <_Bfree>
 800901a:	4654      	mov	r4, sl
 800901c:	6922      	ldr	r2, [r4, #16]
 800901e:	1c51      	adds	r1, r2, #1
 8009020:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009024:	6121      	str	r1, [r4, #16]
 8009026:	2101      	movs	r1, #1
 8009028:	6151      	str	r1, [r2, #20]
 800902a:	e7bc      	b.n	8008fa6 <__gethex+0x396>
 800902c:	6921      	ldr	r1, [r4, #16]
 800902e:	4559      	cmp	r1, fp
 8009030:	dd0b      	ble.n	800904a <__gethex+0x43a>
 8009032:	2101      	movs	r1, #1
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff fd83 	bl	8008b40 <rshift>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3601      	adds	r6, #1
 800903e:	42b3      	cmp	r3, r6
 8009040:	f6ff aedb 	blt.w	8008dfa <__gethex+0x1ea>
 8009044:	f04f 0801 	mov.w	r8, #1
 8009048:	e7c2      	b.n	8008fd0 <__gethex+0x3c0>
 800904a:	f015 051f 	ands.w	r5, r5, #31
 800904e:	d0f9      	beq.n	8009044 <__gethex+0x434>
 8009050:	9b01      	ldr	r3, [sp, #4]
 8009052:	441a      	add	r2, r3
 8009054:	f1c5 0520 	rsb	r5, r5, #32
 8009058:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800905c:	f7fd feb8 	bl	8006dd0 <__hi0bits>
 8009060:	42a8      	cmp	r0, r5
 8009062:	dbe6      	blt.n	8009032 <__gethex+0x422>
 8009064:	e7ee      	b.n	8009044 <__gethex+0x434>
 8009066:	bf00      	nop
 8009068:	08009545 	.word	0x08009545

0800906c <L_shift>:
 800906c:	f1c2 0208 	rsb	r2, r2, #8
 8009070:	0092      	lsls	r2, r2, #2
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	f1c2 0620 	rsb	r6, r2, #32
 8009078:	6843      	ldr	r3, [r0, #4]
 800907a:	6804      	ldr	r4, [r0, #0]
 800907c:	fa03 f506 	lsl.w	r5, r3, r6
 8009080:	432c      	orrs	r4, r5
 8009082:	40d3      	lsrs	r3, r2
 8009084:	6004      	str	r4, [r0, #0]
 8009086:	f840 3f04 	str.w	r3, [r0, #4]!
 800908a:	4288      	cmp	r0, r1
 800908c:	d3f4      	bcc.n	8009078 <L_shift+0xc>
 800908e:	bd70      	pop	{r4, r5, r6, pc}

08009090 <__match>:
 8009090:	b530      	push	{r4, r5, lr}
 8009092:	6803      	ldr	r3, [r0, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909a:	b914      	cbnz	r4, 80090a2 <__match+0x12>
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	2001      	movs	r0, #1
 80090a0:	bd30      	pop	{r4, r5, pc}
 80090a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090aa:	2d19      	cmp	r5, #25
 80090ac:	bf98      	it	ls
 80090ae:	3220      	addls	r2, #32
 80090b0:	42a2      	cmp	r2, r4
 80090b2:	d0f0      	beq.n	8009096 <__match+0x6>
 80090b4:	2000      	movs	r0, #0
 80090b6:	e7f3      	b.n	80090a0 <__match+0x10>

080090b8 <__hexnan>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	680b      	ldr	r3, [r1, #0]
 80090be:	6801      	ldr	r1, [r0, #0]
 80090c0:	115e      	asrs	r6, r3, #5
 80090c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80090c6:	f013 031f 	ands.w	r3, r3, #31
 80090ca:	b087      	sub	sp, #28
 80090cc:	bf18      	it	ne
 80090ce:	3604      	addne	r6, #4
 80090d0:	2500      	movs	r5, #0
 80090d2:	1f37      	subs	r7, r6, #4
 80090d4:	4682      	mov	sl, r0
 80090d6:	4690      	mov	r8, r2
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	f846 5c04 	str.w	r5, [r6, #-4]
 80090de:	46b9      	mov	r9, r7
 80090e0:	463c      	mov	r4, r7
 80090e2:	9502      	str	r5, [sp, #8]
 80090e4:	46ab      	mov	fp, r5
 80090e6:	784a      	ldrb	r2, [r1, #1]
 80090e8:	1c4b      	adds	r3, r1, #1
 80090ea:	9303      	str	r3, [sp, #12]
 80090ec:	b342      	cbz	r2, 8009140 <__hexnan+0x88>
 80090ee:	4610      	mov	r0, r2
 80090f0:	9105      	str	r1, [sp, #20]
 80090f2:	9204      	str	r2, [sp, #16]
 80090f4:	f7ff fd76 	bl	8008be4 <__hexdig_fun>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d14f      	bne.n	800919c <__hexnan+0xe4>
 80090fc:	9a04      	ldr	r2, [sp, #16]
 80090fe:	9905      	ldr	r1, [sp, #20]
 8009100:	2a20      	cmp	r2, #32
 8009102:	d818      	bhi.n	8009136 <__hexnan+0x7e>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	459b      	cmp	fp, r3
 8009108:	dd13      	ble.n	8009132 <__hexnan+0x7a>
 800910a:	454c      	cmp	r4, r9
 800910c:	d206      	bcs.n	800911c <__hexnan+0x64>
 800910e:	2d07      	cmp	r5, #7
 8009110:	dc04      	bgt.n	800911c <__hexnan+0x64>
 8009112:	462a      	mov	r2, r5
 8009114:	4649      	mov	r1, r9
 8009116:	4620      	mov	r0, r4
 8009118:	f7ff ffa8 	bl	800906c <L_shift>
 800911c:	4544      	cmp	r4, r8
 800911e:	d950      	bls.n	80091c2 <__hexnan+0x10a>
 8009120:	2300      	movs	r3, #0
 8009122:	f1a4 0904 	sub.w	r9, r4, #4
 8009126:	f844 3c04 	str.w	r3, [r4, #-4]
 800912a:	f8cd b008 	str.w	fp, [sp, #8]
 800912e:	464c      	mov	r4, r9
 8009130:	461d      	mov	r5, r3
 8009132:	9903      	ldr	r1, [sp, #12]
 8009134:	e7d7      	b.n	80090e6 <__hexnan+0x2e>
 8009136:	2a29      	cmp	r2, #41	; 0x29
 8009138:	d155      	bne.n	80091e6 <__hexnan+0x12e>
 800913a:	3102      	adds	r1, #2
 800913c:	f8ca 1000 	str.w	r1, [sl]
 8009140:	f1bb 0f00 	cmp.w	fp, #0
 8009144:	d04f      	beq.n	80091e6 <__hexnan+0x12e>
 8009146:	454c      	cmp	r4, r9
 8009148:	d206      	bcs.n	8009158 <__hexnan+0xa0>
 800914a:	2d07      	cmp	r5, #7
 800914c:	dc04      	bgt.n	8009158 <__hexnan+0xa0>
 800914e:	462a      	mov	r2, r5
 8009150:	4649      	mov	r1, r9
 8009152:	4620      	mov	r0, r4
 8009154:	f7ff ff8a 	bl	800906c <L_shift>
 8009158:	4544      	cmp	r4, r8
 800915a:	d934      	bls.n	80091c6 <__hexnan+0x10e>
 800915c:	f1a8 0204 	sub.w	r2, r8, #4
 8009160:	4623      	mov	r3, r4
 8009162:	f853 1b04 	ldr.w	r1, [r3], #4
 8009166:	f842 1f04 	str.w	r1, [r2, #4]!
 800916a:	429f      	cmp	r7, r3
 800916c:	d2f9      	bcs.n	8009162 <__hexnan+0xaa>
 800916e:	1b3b      	subs	r3, r7, r4
 8009170:	f023 0303 	bic.w	r3, r3, #3
 8009174:	3304      	adds	r3, #4
 8009176:	3e03      	subs	r6, #3
 8009178:	3401      	adds	r4, #1
 800917a:	42a6      	cmp	r6, r4
 800917c:	bf38      	it	cc
 800917e:	2304      	movcc	r3, #4
 8009180:	4443      	add	r3, r8
 8009182:	2200      	movs	r2, #0
 8009184:	f843 2b04 	str.w	r2, [r3], #4
 8009188:	429f      	cmp	r7, r3
 800918a:	d2fb      	bcs.n	8009184 <__hexnan+0xcc>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	b91b      	cbnz	r3, 8009198 <__hexnan+0xe0>
 8009190:	4547      	cmp	r7, r8
 8009192:	d126      	bne.n	80091e2 <__hexnan+0x12a>
 8009194:	2301      	movs	r3, #1
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	2005      	movs	r0, #5
 800919a:	e025      	b.n	80091e8 <__hexnan+0x130>
 800919c:	3501      	adds	r5, #1
 800919e:	2d08      	cmp	r5, #8
 80091a0:	f10b 0b01 	add.w	fp, fp, #1
 80091a4:	dd06      	ble.n	80091b4 <__hexnan+0xfc>
 80091a6:	4544      	cmp	r4, r8
 80091a8:	d9c3      	bls.n	8009132 <__hexnan+0x7a>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80091b0:	2501      	movs	r5, #1
 80091b2:	3c04      	subs	r4, #4
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	f000 000f 	and.w	r0, r0, #15
 80091ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80091be:	6020      	str	r0, [r4, #0]
 80091c0:	e7b7      	b.n	8009132 <__hexnan+0x7a>
 80091c2:	2508      	movs	r5, #8
 80091c4:	e7b5      	b.n	8009132 <__hexnan+0x7a>
 80091c6:	9b01      	ldr	r3, [sp, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0df      	beq.n	800918c <__hexnan+0xd4>
 80091cc:	f1c3 0320 	rsb	r3, r3, #32
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	40da      	lsrs	r2, r3
 80091d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80091da:	4013      	ands	r3, r2
 80091dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80091e0:	e7d4      	b.n	800918c <__hexnan+0xd4>
 80091e2:	3f04      	subs	r7, #4
 80091e4:	e7d2      	b.n	800918c <__hexnan+0xd4>
 80091e6:	2004      	movs	r0, #4
 80091e8:	b007      	add	sp, #28
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091ee <__ascii_mbtowc>:
 80091ee:	b082      	sub	sp, #8
 80091f0:	b901      	cbnz	r1, 80091f4 <__ascii_mbtowc+0x6>
 80091f2:	a901      	add	r1, sp, #4
 80091f4:	b142      	cbz	r2, 8009208 <__ascii_mbtowc+0x1a>
 80091f6:	b14b      	cbz	r3, 800920c <__ascii_mbtowc+0x1e>
 80091f8:	7813      	ldrb	r3, [r2, #0]
 80091fa:	600b      	str	r3, [r1, #0]
 80091fc:	7812      	ldrb	r2, [r2, #0]
 80091fe:	1e10      	subs	r0, r2, #0
 8009200:	bf18      	it	ne
 8009202:	2001      	movne	r0, #1
 8009204:	b002      	add	sp, #8
 8009206:	4770      	bx	lr
 8009208:	4610      	mov	r0, r2
 800920a:	e7fb      	b.n	8009204 <__ascii_mbtowc+0x16>
 800920c:	f06f 0001 	mvn.w	r0, #1
 8009210:	e7f8      	b.n	8009204 <__ascii_mbtowc+0x16>

08009212 <_realloc_r>:
 8009212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009216:	4680      	mov	r8, r0
 8009218:	4614      	mov	r4, r2
 800921a:	460e      	mov	r6, r1
 800921c:	b921      	cbnz	r1, 8009228 <_realloc_r+0x16>
 800921e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	4611      	mov	r1, r2
 8009224:	f7fd bc56 	b.w	8006ad4 <_malloc_r>
 8009228:	b92a      	cbnz	r2, 8009236 <_realloc_r+0x24>
 800922a:	f7fd fbdf 	bl	80069ec <_free_r>
 800922e:	4625      	mov	r5, r4
 8009230:	4628      	mov	r0, r5
 8009232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009236:	f000 f8c6 	bl	80093c6 <_malloc_usable_size_r>
 800923a:	4284      	cmp	r4, r0
 800923c:	4607      	mov	r7, r0
 800923e:	d802      	bhi.n	8009246 <_realloc_r+0x34>
 8009240:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009244:	d812      	bhi.n	800926c <_realloc_r+0x5a>
 8009246:	4621      	mov	r1, r4
 8009248:	4640      	mov	r0, r8
 800924a:	f7fd fc43 	bl	8006ad4 <_malloc_r>
 800924e:	4605      	mov	r5, r0
 8009250:	2800      	cmp	r0, #0
 8009252:	d0ed      	beq.n	8009230 <_realloc_r+0x1e>
 8009254:	42bc      	cmp	r4, r7
 8009256:	4622      	mov	r2, r4
 8009258:	4631      	mov	r1, r6
 800925a:	bf28      	it	cs
 800925c:	463a      	movcs	r2, r7
 800925e:	f7ff fc25 	bl	8008aac <memcpy>
 8009262:	4631      	mov	r1, r6
 8009264:	4640      	mov	r0, r8
 8009266:	f7fd fbc1 	bl	80069ec <_free_r>
 800926a:	e7e1      	b.n	8009230 <_realloc_r+0x1e>
 800926c:	4635      	mov	r5, r6
 800926e:	e7df      	b.n	8009230 <_realloc_r+0x1e>

08009270 <__ascii_wctomb>:
 8009270:	b149      	cbz	r1, 8009286 <__ascii_wctomb+0x16>
 8009272:	2aff      	cmp	r2, #255	; 0xff
 8009274:	bf85      	ittet	hi
 8009276:	238a      	movhi	r3, #138	; 0x8a
 8009278:	6003      	strhi	r3, [r0, #0]
 800927a:	700a      	strbls	r2, [r1, #0]
 800927c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009280:	bf98      	it	ls
 8009282:	2001      	movls	r0, #1
 8009284:	4770      	bx	lr
 8009286:	4608      	mov	r0, r1
 8009288:	4770      	bx	lr
	...

0800928c <fiprintf>:
 800928c:	b40e      	push	{r1, r2, r3}
 800928e:	b503      	push	{r0, r1, lr}
 8009290:	4601      	mov	r1, r0
 8009292:	ab03      	add	r3, sp, #12
 8009294:	4805      	ldr	r0, [pc, #20]	; (80092ac <fiprintf+0x20>)
 8009296:	f853 2b04 	ldr.w	r2, [r3], #4
 800929a:	6800      	ldr	r0, [r0, #0]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	f7ff f96b 	bl	8008578 <_vfiprintf_r>
 80092a2:	b002      	add	sp, #8
 80092a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a8:	b003      	add	sp, #12
 80092aa:	4770      	bx	lr
 80092ac:	20000064 	.word	0x20000064

080092b0 <__swhatbuf_r>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	460c      	mov	r4, r1
 80092b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b8:	2900      	cmp	r1, #0
 80092ba:	b096      	sub	sp, #88	; 0x58
 80092bc:	4615      	mov	r5, r2
 80092be:	461e      	mov	r6, r3
 80092c0:	da0d      	bge.n	80092de <__swhatbuf_r+0x2e>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80092c8:	f04f 0100 	mov.w	r1, #0
 80092cc:	bf0c      	ite	eq
 80092ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092d2:	2340      	movne	r3, #64	; 0x40
 80092d4:	2000      	movs	r0, #0
 80092d6:	6031      	str	r1, [r6, #0]
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	b016      	add	sp, #88	; 0x58
 80092dc:	bd70      	pop	{r4, r5, r6, pc}
 80092de:	466a      	mov	r2, sp
 80092e0:	f000 f848 	bl	8009374 <_fstat_r>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	dbec      	blt.n	80092c2 <__swhatbuf_r+0x12>
 80092e8:	9901      	ldr	r1, [sp, #4]
 80092ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092f2:	4259      	negs	r1, r3
 80092f4:	4159      	adcs	r1, r3
 80092f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092fa:	e7eb      	b.n	80092d4 <__swhatbuf_r+0x24>

080092fc <__smakebuf_r>:
 80092fc:	898b      	ldrh	r3, [r1, #12]
 80092fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009300:	079d      	lsls	r5, r3, #30
 8009302:	4606      	mov	r6, r0
 8009304:	460c      	mov	r4, r1
 8009306:	d507      	bpl.n	8009318 <__smakebuf_r+0x1c>
 8009308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	2301      	movs	r3, #1
 8009312:	6163      	str	r3, [r4, #20]
 8009314:	b002      	add	sp, #8
 8009316:	bd70      	pop	{r4, r5, r6, pc}
 8009318:	ab01      	add	r3, sp, #4
 800931a:	466a      	mov	r2, sp
 800931c:	f7ff ffc8 	bl	80092b0 <__swhatbuf_r>
 8009320:	9900      	ldr	r1, [sp, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	4630      	mov	r0, r6
 8009326:	f7fd fbd5 	bl	8006ad4 <_malloc_r>
 800932a:	b948      	cbnz	r0, 8009340 <__smakebuf_r+0x44>
 800932c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d4ef      	bmi.n	8009314 <__smakebuf_r+0x18>
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	f043 0302 	orr.w	r3, r3, #2
 800933c:	81a3      	strh	r3, [r4, #12]
 800933e:	e7e3      	b.n	8009308 <__smakebuf_r+0xc>
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	6020      	str	r0, [r4, #0]
 8009344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009348:	81a3      	strh	r3, [r4, #12]
 800934a:	9b00      	ldr	r3, [sp, #0]
 800934c:	6163      	str	r3, [r4, #20]
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	6120      	str	r0, [r4, #16]
 8009352:	b15b      	cbz	r3, 800936c <__smakebuf_r+0x70>
 8009354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009358:	4630      	mov	r0, r6
 800935a:	f000 f81d 	bl	8009398 <_isatty_r>
 800935e:	b128      	cbz	r0, 800936c <__smakebuf_r+0x70>
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	431d      	orrs	r5, r3
 8009370:	81a5      	strh	r5, [r4, #12]
 8009372:	e7cf      	b.n	8009314 <__smakebuf_r+0x18>

08009374 <_fstat_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d07      	ldr	r5, [pc, #28]	; (8009394 <_fstat_r+0x20>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	4611      	mov	r1, r2
 8009380:	602b      	str	r3, [r5, #0]
 8009382:	f7f8 fa0c 	bl	800179e <_fstat>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d102      	bne.n	8009390 <_fstat_r+0x1c>
 800938a:	682b      	ldr	r3, [r5, #0]
 800938c:	b103      	cbz	r3, 8009390 <_fstat_r+0x1c>
 800938e:	6023      	str	r3, [r4, #0]
 8009390:	bd38      	pop	{r3, r4, r5, pc}
 8009392:	bf00      	nop
 8009394:	20000540 	.word	0x20000540

08009398 <_isatty_r>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	4d06      	ldr	r5, [pc, #24]	; (80093b4 <_isatty_r+0x1c>)
 800939c:	2300      	movs	r3, #0
 800939e:	4604      	mov	r4, r0
 80093a0:	4608      	mov	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7f8 fa0b 	bl	80017be <_isatty>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_isatty_r+0x1a>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_isatty_r+0x1a>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20000540 	.word	0x20000540

080093b8 <abort>:
 80093b8:	b508      	push	{r3, lr}
 80093ba:	2006      	movs	r0, #6
 80093bc:	f000 f834 	bl	8009428 <raise>
 80093c0:	2001      	movs	r0, #1
 80093c2:	f7f8 f99d 	bl	8001700 <_exit>

080093c6 <_malloc_usable_size_r>:
 80093c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ca:	1f18      	subs	r0, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	bfbc      	itt	lt
 80093d0:	580b      	ldrlt	r3, [r1, r0]
 80093d2:	18c0      	addlt	r0, r0, r3
 80093d4:	4770      	bx	lr

080093d6 <_raise_r>:
 80093d6:	291f      	cmp	r1, #31
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4604      	mov	r4, r0
 80093dc:	460d      	mov	r5, r1
 80093de:	d904      	bls.n	80093ea <_raise_r+0x14>
 80093e0:	2316      	movs	r3, #22
 80093e2:	6003      	str	r3, [r0, #0]
 80093e4:	f04f 30ff 	mov.w	r0, #4294967295
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80093ec:	b112      	cbz	r2, 80093f4 <_raise_r+0x1e>
 80093ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093f2:	b94b      	cbnz	r3, 8009408 <_raise_r+0x32>
 80093f4:	4620      	mov	r0, r4
 80093f6:	f000 f831 	bl	800945c <_getpid_r>
 80093fa:	462a      	mov	r2, r5
 80093fc:	4601      	mov	r1, r0
 80093fe:	4620      	mov	r0, r4
 8009400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009404:	f000 b818 	b.w	8009438 <_kill_r>
 8009408:	2b01      	cmp	r3, #1
 800940a:	d00a      	beq.n	8009422 <_raise_r+0x4c>
 800940c:	1c59      	adds	r1, r3, #1
 800940e:	d103      	bne.n	8009418 <_raise_r+0x42>
 8009410:	2316      	movs	r3, #22
 8009412:	6003      	str	r3, [r0, #0]
 8009414:	2001      	movs	r0, #1
 8009416:	e7e7      	b.n	80093e8 <_raise_r+0x12>
 8009418:	2400      	movs	r4, #0
 800941a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800941e:	4628      	mov	r0, r5
 8009420:	4798      	blx	r3
 8009422:	2000      	movs	r0, #0
 8009424:	e7e0      	b.n	80093e8 <_raise_r+0x12>
	...

08009428 <raise>:
 8009428:	4b02      	ldr	r3, [pc, #8]	; (8009434 <raise+0xc>)
 800942a:	4601      	mov	r1, r0
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	f7ff bfd2 	b.w	80093d6 <_raise_r>
 8009432:	bf00      	nop
 8009434:	20000064 	.word	0x20000064

08009438 <_kill_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	; (8009458 <_kill_r+0x20>)
 800943c:	2300      	movs	r3, #0
 800943e:	4604      	mov	r4, r0
 8009440:	4608      	mov	r0, r1
 8009442:	4611      	mov	r1, r2
 8009444:	602b      	str	r3, [r5, #0]
 8009446:	f7f8 f94b 	bl	80016e0 <_kill>
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	d102      	bne.n	8009454 <_kill_r+0x1c>
 800944e:	682b      	ldr	r3, [r5, #0]
 8009450:	b103      	cbz	r3, 8009454 <_kill_r+0x1c>
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	bd38      	pop	{r3, r4, r5, pc}
 8009456:	bf00      	nop
 8009458:	20000540 	.word	0x20000540

0800945c <_getpid_r>:
 800945c:	f7f8 b938 	b.w	80016d0 <_getpid>

08009460 <_init>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	bf00      	nop
 8009464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009466:	bc08      	pop	{r3}
 8009468:	469e      	mov	lr, r3
 800946a:	4770      	bx	lr

0800946c <_fini>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr
